(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>s});var a=t(537),r=t.n(a),i=t(645),o=t.n(i)()(r());o.push([n.id,":root {\n  --settings-width: 300px;\n\n  --background: #282a36;\n  --start-screen-bg: #6273a4f8;\n  --subtle: #6272a4;\n  --pink: #ff79c6;\n  --green: #50fa7b;\n  --yellow: #f1fa8c;\n  --blue: #8be9fd;\n  --plain: #f8f8f2;\n\n  --day-sky1: #4687d8;\n  --day-sky2: #7fafde;\n\n  --cloud1: #f5f5f7;\n  --cloud2: #a1b5c7;\n  --cloud-font: #3b3b3b;\n\n  --rain1: #51606b;\n  --rain2: #97999d;\n\n  --night1: #0b192b;\n  --night2: #013a60;\n  --night-cloud: hsl(204, 24%, 30%);\n}\n\n* {\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  height: 100%;\n}\n\nbody {\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  margin: 0;\n  padding: 0;\n  min-height: 100%;\n  width: 100%;\n  background-color: #013a6000;\n  color: var(--plain);\n}\n\n.site-wrapper {\n  position: relative;\n  min-height: 100vh;\n  width: 100%;\n  display: grid;\n  grid-template-rows: min(75px, 8%) auto 1fr;\n  align-items: center;\n  justify-items: center;\n  overflow-x: hidden;\n}\n\n.gradient {\n  position: absolute;\n  content: '';\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: -1;\n  opacity: 0;\n  transition: opacity 0.5s;\n}\n\n.gradient.day {\n  opacity: 1;\n  background-image: linear-gradient(var(--day-sky1), var(--day-sky2));\n}\n\n.gradient.cloud {\n  background-image: linear-gradient(var(--cloud1), var(--cloud2));\n}\n\n.site-wrapper.cloud {\n  color: var(--cloud-font);\n}\n\n.gradient.rain {\n  background-image: linear-gradient(var(--rain1), var(--rain2));\n}\n\n.gradient.night {\n  background-image: linear-gradient(var(--night1), var(--night2));\n}\n\n.gradient.night-cloud {\n  background-image: linear-gradient(var(--night1), var(--night-cloud), var(--night2));\n\n}\n\n.location-input {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  margin: auto;\n  height: min-content;\n  width: max-content;\n}\n\n.location-input.post {\n  top: 8px;\n  left: 8px;\n  bottom: auto;\n  right: auto;\n  display: flex;\n  justify-content: center;\n  z-index: 1;\n}\n\nul {\n  list-style: none;\n}\n\n#loc {\n  box-sizing: border-box;\n  appearance: none;\n  border: none;\n  line-height: 1.2rem;\n  width: 100%;\n  border-radius: 20px;\n  padding: 4px 8px;\n  font-size: 90%;\n  background-color: rgb(232, 240, 254);\n}\n\n#loc:focus {\n  outline: 1px solid lightblue;\n}\n\n.loc-input-field {\n  min-width: 150px;\n  position: relative;\n  transition: all 0.3s;\n}\n\n.location-input.post .loc-input-field {\n  min-width: 30px;\n  container-type: inline-size;\n  opacity: 0.3;\n}\n\n.location-input.post .loc-input-field:hover,\n.location-input.post .loc-input-field:has(#loc:focus) {\n  min-width: 150px;\n  opacity: 1;\n}\n\n.loc-input-field:hover .suggestion-box-container,\n.loc-input-field:has(#loc:focus) .suggestion-box-container {\n  display: block;\n}\n\n\n.search-icon {\n  background-color: rgba(232, 240, 254, 0);\n  position: absolute;\n  height: 18px;\n  right: 5px;\n  top: 4px;\n}\n\n.search-icon img {\n  height: 100%;\n  width: 100%;\n}\n\n@container (max-width: 50px) {\n  .search-icon {\n    position: absolute;\n    width: 30px;\n    height: 1.2rem;\n    top:0;\n    right:0;\n    left:0;\n    bottom: 0;\n    margin: auto;\n    border-radius: 20px;\n  }\n  #loc::placeholder {\n    opacity: 0;\n  }\n  \n  .loc-input-field #loc {\n      color: rgba(0, 0, 0, 0);\n    }\n}\n\n.suggestion-box-container {\n  position: relative;\n  display: none;\n}\n\n.suggestion-box {\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  width:200px;\n  border-radius: 10px;\n  overflow: hidden;\n}\n\n.loc-suggestion {\n  width: 100%;\n  background-color: white;\n  color: black;\n  padding: 5px 8px;\n  appearance: none;\n  border: none;\n  text-align: left;\n}\n\n.loc-suggestion:focus {\n  outline: none;\n  background-color: hsl(210, 59%, 90%);\n  border-left: 3px solid var(--day-sky2);\n}\n\n.loc-suggestion:hover {\n  background-color: hsl(210, 59%, 90%);\n}\n\n.current-weather {\n  margin-right: calc(100% - 100vw);\n  grid-row: 2 / 3;\n}\n\n.current-weather .current-weather-display {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  position: relative;\n}\n\n.current-location {\n  font-size: 1.5rem;\n  font-weight: 200;\n  padding: 0;\n  margin: 0;\n}\n\n.current-temp {\n  font-size: 4rem;\n  font-weight: 100;\n  margin-right: -10px;\n}\n\n.current-description {\n  font-size: 1rem;\n  font-weight: 200;\n}\n\n.current-weather-icon {\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 16px;\n  height: 200px;\n}\n\n.icon {\n  height: 95%;\n}\n\n.forecast {\n  margin-right: calc(100% - 100vw);\n  grid-row: 3 / 4;\n  align-self: baseline;\n}\n\n.forecast-display {\n  display: flex;\n  gap: 10px;\n}\n\n.day-display {\n  font-weight: 300;\n  display: flex;\n  flex-direction: column;\n  width: 15vw;\n  align-items: center;\n}\n\n.day-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 60px;\n}\n\n.low-high {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  font-size: 0.9rem;\n  font-weight: 200;\n}\n\n.settings {\n  position: absolute;\n  right: 0;\n  top: 0;\n  background-color: rgba(232, 240, 254, 0.95);\n  width: var(--settings-width);\n  height: 100%;\n  transition: 0.3s;\n  color: var(--cloud-font);\n  z-index: 1;\n}\n\n.settings.hidden {\n  translate: var(--settings-width);\n}\n\n.cog-icon-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  position: relative;\n  margin-top: 8px;\n  width: 25px;\n  height: 30px;\n  background-color: rgb(232, 240, 254);\n  opacity: 0.3;\n  border-radius: 20px 0px 0px 20px;\n  transition: 0.3s;\n  cursor: pointer;\n}\n\n.settings.hidden .cog-icon-container {\n  translate: -25px;\n}\n\n.cog-icon {\n  width: 18px;\n  height: 18px;\n}\n\n.settings-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.settings-container li {\n  display: grid;\n  grid-template: 1fr auto / 1fr 20px;\n}\n\n.settings-container li label {\n  grid-area: 1 / 1 / 2 / 2;\n}\n\n.advanced-search input {\n  grid-area: 2 / 1 / 3 / 2;\n  box-sizing: border-box;\n  appearance: none;\n  border: none;\n  line-height: 1.2rem;\n  border-radius: 10px;\n  width: 100%;\n  padding: 4px 6px;\n  cursor: pointer;\n}\n\n.settings-container li input:focus {\n  outline: 1px solid lightblue;\n}\n\n.settings-container li button {\n  grid-area: 2 / 2 / 3 / 4;\n  appearance: none;\n  border: none;\n  background-color: #ffffff00;\n  cursor: pointer;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: 8px;\n  opacity: 0.5;\n}\n\n.settings-container li button:hover {\n  opacity: 1;\n}\n\n.settings-container .no-display {\n  display: none;\n}\n\n.settings-container h4 {\n  margin: 15px 0 6px;\n}\n\n.reset {\n  display: flex;\n  flex-direction: column;\n}\n.reset button {\n  cursor: pointer;\n  box-sizing: border-box;\n  width: 100px;\n  appearance: none;\n  border: none;\n  padding: 6px 8px;\n  border-radius: 20px;\n  background-color: rgb(170, 37, 37);\n  color: var(--plain);\n  margin: 5px 0;\n  align-self: flex-end;\n  line-height: 1.2rem;\n}\n\n.more-info {\n  position: absolute;\n  bottom: 20px;\n  right: -20px;\n  width: 20px;\n  height: 20px;\n  appearance: none;\n  border: none;\n  background-color: rgba(255, 255, 255, 0);\n  border-radius: 50%;\n  opacity: 0.1;\n  cursor: pointer;\n}\n\n.current-weather:hover .more-info {\n  opacity: 0.5;\n}\n\n.more-info-list {\n  color: var(--plain);\n  font-size: 1rem;\n  font-weight: 200;\n  display: grid;\n  margin: 30px;\n  grid-template-columns: repeat(6, 1fr);\n  border-radius: 20px;\n  max-height: 0;\n  transition: max-height 0.3s;\n  overflow: hidden;\n  gap: 1vw;\n}\n\n.more-info-list li {\n  display: grid;\n  grid-template: 1fr 1fr / 20px 2fr;\n  align-items: center;\n  justify-items: center;\n  background-color: #0b192b2d;\n  border-radius: 20px;\n  padding: 8px;\n}\n\n.more-info-list li img {\n  grid-area: 1 / 1 / 2 / 2;\n  height: 20px;\n  justify-self: left;\n}\n\n.more-info-list li span:nth-child(2) {\n  grid-area: 1 / 2 / 2 / 3;\n  justify-self: left;\n  margin-left: 4px;\n}\n\n.more-info-list li span:nth-child(3) {\n  grid-area: 2 / 1 / 3 / 3;\n  font-weight: 300;\n}\n\n.site-wrapper.cloud .more-info {\n  opacity: 1;\n}\n\n.collapse {\n  max-height: 0;\n}\n\n@media only screen and (max-width: 600px) {\n  :root {\n    --settings-width: 100vw;\n  }\n  .site-wrapper {\n    grid-template-rows: 30px auto 1fr;\n  }\n\n  .forecast-display {\n    flex-direction: column;\n    width: 80vw;\n    gap: 0;\n  }\n\n  .day-display {\n    width: 100%;\n    display: grid;\n    grid-template-columns: 20% 45% 35%;\n    border-bottom: 0.5px solid var(--day-sky1);\n    padding: 8px 0px;\n  }\n\n  .day-icon {\n    height: 30px;\n  }\n\n  .low-high {\n    flex-direction: row;\n    gap: 16px;\n  }\n\n  .more-info-list {\n    width: min(70vw, 300px);\n    grid-template: repeat(6, 40px) / 1fr;\n    gap: 0px;\n    margin-bottom: 16px;\n  }\n  \n  .more-info-list li {\n    width: 100%;\n    display: grid;\n    grid-template: 1fr / 1fr 2fr 2fr;\n    align-items: center;\n    justify-items: center;\n    background-color: #0b192b00;\n    padding: 0;\n  }\n  \n  .more-info-list li img {\n    height: 20px;\n    justify-self: right;\n  }\n  \n  .more-info-list li span:nth-child(2) {\n    justify-self: left;\n    margin-left: 30px;\n  }\n  \n  .more-info-list li span:nth-child(3) {\n    grid-area: 1 / 3 / 2 / 4;\n  }\n\n  .site-wrapper.cloud .more-info-list {\n    background-color: #0b192b2d;\n  }\n\n}\n\n.settings-select li:first-child {\n  display: grid;\n  grid-template: 1fr 2fr / 1fr 1fr;\n  align-items: center;\n  justify-items: center;\n}\n\n.settings-select li label {\n  grid-area: 1 / 1 / 2 / -1;\n}\n\n.settings-select .imperial {\n  grid-area: 2 / 1 / 3 / 2;\n  font-size: 0.8rem;\n  z-index: 1;\n  pointer-events: none;\n  color: var(--plain);\n}\n\n.settings-select:has(#units-toggle:checked) .metric {\n  color: var(--plain);\n}\n\n.settings-select:has(#units-toggle:checked) .imperial {\n  color: var(--cloud-font);\n}\n\n#units-toggle {\n  width: 100%;\n  height: 30px;\n  background-color: white;\n  border-radius: 30px;\n  grid-area: 2 / 1 / 3 / -1;\n  position: relative;\n  appearance: none;\n  cursor: pointer;\n}\n\n#units-toggle:before {\n  content: '';\n  box-sizing: border-box;\n  background-color: var(--day-sky1);\n  width: 50%;\n  height: 26px;\n  position: absolute;\n  border-radius: 30px;\n  top:2px;\n  left: 2px;\n  transition: 0.3s;\n}\n\n#units-toggle:checked:before {\n  translate: 95%;\n}\n\n.settings-select .metric {\n  grid-area: 2 / 2 / 3 / 3;\n  font-size: 0.8rem;\n  z-index: 1;\n  pointer-events: none;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:[":root {\n  --settings-width: 300px;\n\n  --background: #282a36;\n  --start-screen-bg: #6273a4f8;\n  --subtle: #6272a4;\n  --pink: #ff79c6;\n  --green: #50fa7b;\n  --yellow: #f1fa8c;\n  --blue: #8be9fd;\n  --plain: #f8f8f2;\n\n  --day-sky1: #4687d8;\n  --day-sky2: #7fafde;\n\n  --cloud1: #f5f5f7;\n  --cloud2: #a1b5c7;\n  --cloud-font: #3b3b3b;\n\n  --rain1: #51606b;\n  --rain2: #97999d;\n\n  --night1: #0b192b;\n  --night2: #013a60;\n  --night-cloud: hsl(204, 24%, 30%);\n}\n\n* {\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  height: 100%;\n}\n\nbody {\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  margin: 0;\n  padding: 0;\n  min-height: 100%;\n  width: 100%;\n  background-color: #013a6000;\n  color: var(--plain);\n}\n\n.site-wrapper {\n  position: relative;\n  min-height: 100vh;\n  width: 100%;\n  display: grid;\n  grid-template-rows: min(75px, 8%) auto 1fr;\n  align-items: center;\n  justify-items: center;\n  overflow-x: hidden;\n}\n\n.gradient {\n  position: absolute;\n  content: '';\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: -1;\n  opacity: 0;\n  transition: opacity 0.5s;\n}\n\n.gradient.day {\n  opacity: 1;\n  background-image: linear-gradient(var(--day-sky1), var(--day-sky2));\n}\n\n.gradient.cloud {\n  background-image: linear-gradient(var(--cloud1), var(--cloud2));\n}\n\n.site-wrapper.cloud {\n  color: var(--cloud-font);\n}\n\n.gradient.rain {\n  background-image: linear-gradient(var(--rain1), var(--rain2));\n}\n\n.gradient.night {\n  background-image: linear-gradient(var(--night1), var(--night2));\n}\n\n.gradient.night-cloud {\n  background-image: linear-gradient(var(--night1), var(--night-cloud), var(--night2));\n\n}\n\n.location-input {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  margin: auto;\n  height: min-content;\n  width: max-content;\n}\n\n.location-input.post {\n  top: 8px;\n  left: 8px;\n  bottom: auto;\n  right: auto;\n  display: flex;\n  justify-content: center;\n  z-index: 1;\n}\n\nul {\n  list-style: none;\n}\n\n#loc {\n  box-sizing: border-box;\n  appearance: none;\n  border: none;\n  line-height: 1.2rem;\n  width: 100%;\n  border-radius: 20px;\n  padding: 4px 8px;\n  font-size: 90%;\n  background-color: rgb(232, 240, 254);\n}\n\n#loc:focus {\n  outline: 1px solid lightblue;\n}\n\n.loc-input-field {\n  min-width: 150px;\n  position: relative;\n  transition: all 0.3s;\n}\n\n.location-input.post .loc-input-field {\n  min-width: 30px;\n  container-type: inline-size;\n  opacity: 0.3;\n}\n\n.location-input.post .loc-input-field:hover,\n.location-input.post .loc-input-field:has(#loc:focus) {\n  min-width: 150px;\n  opacity: 1;\n}\n\n.loc-input-field:hover .suggestion-box-container,\n.loc-input-field:has(#loc:focus) .suggestion-box-container {\n  display: block;\n}\n\n\n.search-icon {\n  background-color: rgba(232, 240, 254, 0);\n  position: absolute;\n  height: 18px;\n  right: 5px;\n  top: 4px;\n}\n\n.search-icon img {\n  height: 100%;\n  width: 100%;\n}\n\n@container (max-width: 50px) {\n  .search-icon {\n    position: absolute;\n    width: 30px;\n    height: 1.2rem;\n    top:0;\n    right:0;\n    left:0;\n    bottom: 0;\n    margin: auto;\n    border-radius: 20px;\n  }\n  #loc::placeholder {\n    opacity: 0;\n  }\n  \n  .loc-input-field #loc {\n      color: rgba(0, 0, 0, 0);\n    }\n}\n\n.suggestion-box-container {\n  position: relative;\n  display: none;\n}\n\n.suggestion-box {\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  width:200px;\n  border-radius: 10px;\n  overflow: hidden;\n}\n\n.loc-suggestion {\n  width: 100%;\n  background-color: white;\n  color: black;\n  padding: 5px 8px;\n  appearance: none;\n  border: none;\n  text-align: left;\n}\n\n.loc-suggestion:focus {\n  outline: none;\n  background-color: hsl(210, 59%, 90%);\n  border-left: 3px solid var(--day-sky2);\n}\n\n.loc-suggestion:hover {\n  background-color: hsl(210, 59%, 90%);\n}\n\n.current-weather {\n  margin-right: calc(100% - 100vw);\n  grid-row: 2 / 3;\n}\n\n.current-weather .current-weather-display {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  position: relative;\n}\n\n.current-location {\n  font-size: 1.5rem;\n  font-weight: 200;\n  padding: 0;\n  margin: 0;\n}\n\n.current-temp {\n  font-size: 4rem;\n  font-weight: 100;\n  margin-right: -10px;\n}\n\n.current-description {\n  font-size: 1rem;\n  font-weight: 200;\n}\n\n.current-weather-icon {\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 16px;\n  height: 200px;\n}\n\n.icon {\n  height: 95%;\n}\n\n.forecast {\n  margin-right: calc(100% - 100vw);\n  grid-row: 3 / 4;\n  align-self: baseline;\n}\n\n.forecast-display {\n  display: flex;\n  gap: 10px;\n}\n\n.day-display {\n  font-weight: 300;\n  display: flex;\n  flex-direction: column;\n  width: 15vw;\n  align-items: center;\n}\n\n.day-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 60px;\n}\n\n.low-high {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  font-size: 0.9rem;\n  font-weight: 200;\n}\n\n.settings {\n  position: absolute;\n  right: 0;\n  top: 0;\n  background-color: rgba(232, 240, 254, 0.95);\n  width: var(--settings-width);\n  height: 100%;\n  transition: 0.3s;\n  color: var(--cloud-font);\n  z-index: 1;\n}\n\n.settings.hidden {\n  translate: var(--settings-width);\n}\n\n.cog-icon-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  position: relative;\n  margin-top: 8px;\n  width: 25px;\n  height: 30px;\n  background-color: rgb(232, 240, 254);\n  opacity: 0.3;\n  border-radius: 20px 0px 0px 20px;\n  transition: 0.3s;\n  cursor: pointer;\n}\n\n.settings.hidden .cog-icon-container {\n  translate: -25px;\n}\n\n.cog-icon {\n  width: 18px;\n  height: 18px;\n}\n\n.settings-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.settings-container li {\n  display: grid;\n  grid-template: 1fr auto / 1fr 20px;\n}\n\n.settings-container li label {\n  grid-area: 1 / 1 / 2 / 2;\n}\n\n.advanced-search input {\n  grid-area: 2 / 1 / 3 / 2;\n  box-sizing: border-box;\n  appearance: none;\n  border: none;\n  line-height: 1.2rem;\n  border-radius: 10px;\n  width: 100%;\n  padding: 4px 6px;\n  cursor: pointer;\n}\n\n.settings-container li input:focus {\n  outline: 1px solid lightblue;\n}\n\n.settings-container li button {\n  grid-area: 2 / 2 / 3 / 4;\n  appearance: none;\n  border: none;\n  background-color: #ffffff00;\n  cursor: pointer;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: 8px;\n  opacity: 0.5;\n}\n\n.settings-container li button:hover {\n  opacity: 1;\n}\n\n.settings-container .no-display {\n  display: none;\n}\n\n.settings-container h4 {\n  margin: 15px 0 6px;\n}\n\n.reset {\n  display: flex;\n  flex-direction: column;\n}\n.reset button {\n  cursor: pointer;\n  box-sizing: border-box;\n  width: 100px;\n  appearance: none;\n  border: none;\n  padding: 6px 8px;\n  border-radius: 20px;\n  background-color: rgb(170, 37, 37);\n  color: var(--plain);\n  margin: 5px 0;\n  align-self: flex-end;\n  line-height: 1.2rem;\n}\n\n.more-info {\n  position: absolute;\n  bottom: 20px;\n  right: -20px;\n  width: 20px;\n  height: 20px;\n  appearance: none;\n  border: none;\n  background-color: rgba(255, 255, 255, 0);\n  border-radius: 50%;\n  opacity: 0.1;\n  cursor: pointer;\n}\n\n.current-weather:hover .more-info {\n  opacity: 0.5;\n}\n\n.more-info-list {\n  color: var(--plain);\n  font-size: 1rem;\n  font-weight: 200;\n  display: grid;\n  margin: 30px;\n  grid-template-columns: repeat(6, 1fr);\n  border-radius: 20px;\n  max-height: 0;\n  transition: max-height 0.3s;\n  overflow: hidden;\n  gap: 1vw;\n}\n\n.more-info-list li {\n  display: grid;\n  grid-template: 1fr 1fr / 20px 2fr;\n  align-items: center;\n  justify-items: center;\n  background-color: #0b192b2d;\n  border-radius: 20px;\n  padding: 8px;\n}\n\n.more-info-list li img {\n  grid-area: 1 / 1 / 2 / 2;\n  height: 20px;\n  justify-self: left;\n}\n\n.more-info-list li span:nth-child(2) {\n  grid-area: 1 / 2 / 2 / 3;\n  justify-self: left;\n  margin-left: 4px;\n}\n\n.more-info-list li span:nth-child(3) {\n  grid-area: 2 / 1 / 3 / 3;\n  font-weight: 300;\n}\n\n.site-wrapper.cloud .more-info {\n  opacity: 1;\n}\n\n.collapse {\n  max-height: 0;\n}\n\n@media only screen and (max-width: 600px) {\n  :root {\n    --settings-width: 100vw;\n  }\n  .site-wrapper {\n    grid-template-rows: 30px auto 1fr;\n  }\n\n  .forecast-display {\n    flex-direction: column;\n    width: 80vw;\n    gap: 0;\n  }\n\n  .day-display {\n    width: 100%;\n    display: grid;\n    grid-template-columns: 20% 45% 35%;\n    border-bottom: 0.5px solid var(--day-sky1);\n    padding: 8px 0px;\n  }\n\n  .day-icon {\n    height: 30px;\n  }\n\n  .low-high {\n    flex-direction: row;\n    gap: 16px;\n  }\n\n  .more-info-list {\n    width: min(70vw, 300px);\n    grid-template: repeat(6, 40px) / 1fr;\n    gap: 0px;\n    margin-bottom: 16px;\n  }\n  \n  .more-info-list li {\n    width: 100%;\n    display: grid;\n    grid-template: 1fr / 1fr 2fr 2fr;\n    align-items: center;\n    justify-items: center;\n    background-color: #0b192b00;\n    padding: 0;\n  }\n  \n  .more-info-list li img {\n    height: 20px;\n    justify-self: right;\n  }\n  \n  .more-info-list li span:nth-child(2) {\n    justify-self: left;\n    margin-left: 30px;\n  }\n  \n  .more-info-list li span:nth-child(3) {\n    grid-area: 1 / 3 / 2 / 4;\n  }\n\n  .site-wrapper.cloud .more-info-list {\n    background-color: #0b192b2d;\n  }\n\n}\n\n.settings-select li:first-child {\n  display: grid;\n  grid-template: 1fr 2fr / 1fr 1fr;\n  align-items: center;\n  justify-items: center;\n}\n\n.settings-select li label {\n  grid-area: 1 / 1 / 2 / -1;\n}\n\n.settings-select .imperial {\n  grid-area: 2 / 1 / 3 / 2;\n  font-size: 0.8rem;\n  z-index: 1;\n  pointer-events: none;\n  color: var(--plain);\n}\n\n.settings-select:has(#units-toggle:checked) .metric {\n  color: var(--plain);\n}\n\n.settings-select:has(#units-toggle:checked) .imperial {\n  color: var(--cloud-font);\n}\n\n#units-toggle {\n  width: 100%;\n  height: 30px;\n  background-color: white;\n  border-radius: 30px;\n  grid-area: 2 / 1 / 3 / -1;\n  position: relative;\n  appearance: none;\n  cursor: pointer;\n}\n\n#units-toggle:before {\n  content: '';\n  box-sizing: border-box;\n  background-color: var(--day-sky1);\n  width: 50%;\n  height: 26px;\n  position: absolute;\n  border-radius: 30px;\n  top:2px;\n  left: 2px;\n  transition: 0.3s;\n}\n\n#units-toggle:checked:before {\n  translate: 95%;\n}\n\n.settings-select .metric {\n  grid-area: 2 / 2 / 3 / 3;\n  font-size: 0.8rem;\n  z-index: 1;\n  pointer-events: none;\n}"],sourceRoot:""}]);const s=o},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",a=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),a&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),a&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,a,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(a)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(o[c]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);a&&o[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),i="/*# ".concat(r," */"),o=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(o).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,a=0;a<e.length;a++)if(e[a].identifier===n){t=a;break}return t}function a(n,a){for(var i={},o=[],s=0;s<n.length;s++){var c=n[s],l=a.base?c[0]+a.base:c[0],d=i[l]||0,A="".concat(l," ").concat(d);i[l]=d+1;var u=t(A),g={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(g);else{var m=r(g,a);a.byIndex=s,e.splice(s,0,{identifier:A,updater:m,references:1})}o.push(A)}return o}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var i=a(n=n||[],r=r||{});return function(n){n=n||[];for(var o=0;o<i.length;o++){var s=t(i[o]);e[s].references--}for(var c=a(n,r),l=0;l<i.length;l++){var d=t(i[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=c}}},777:n=>{var e={};n.exports=function(n,t){var a=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,r&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(a,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(a){var r=e[a];if(void 0!==r)return r.exports;var i=e[a]={id:a,exports:{}};return n[a](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var a in e)t.o(e,a)&&!t.o(n,a)&&Object.defineProperty(n,a,{enumerable:!0,get:e[a]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var a=e.getElementsByTagName("script");a.length&&(n=a[a.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.nc=void 0,(()=>{function n(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function e(n){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},e(n)}function a(t){return n(1,arguments),t instanceof Date||"object"===e(t)&&"[object Date]"===Object.prototype.toString.call(t)}function r(n){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},r(n)}function i(e){n(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===r(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function o(e){if(n(1,arguments),!a(e)&&"number"!=typeof e)return!1;var t=i(e);return!isNaN(Number(t))}function s(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function c(e,t){n(2,arguments);var a=i(e).getTime(),r=s(t);return new Date(a+r)}function l(e,t){n(2,arguments);var a=s(t);return c(e,-a)}var d=864e5;function A(e){n(1,arguments);var t=1,a=i(e),r=a.getUTCDay(),o=(r<t?7:0)+r-t;return a.setUTCDate(a.getUTCDate()-o),a.setUTCHours(0,0,0,0),a}function u(e){n(1,arguments);var t=i(e),a=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(a+1,0,4),r.setUTCHours(0,0,0,0);var o=A(r),s=new Date(0);s.setUTCFullYear(a,0,4),s.setUTCHours(0,0,0,0);var c=A(s);return t.getTime()>=o.getTime()?a+1:t.getTime()>=c.getTime()?a:a-1}function g(e){n(1,arguments);var t=u(e),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var r=A(a);return r}var m=6048e5,h={};function p(){return h}function f(e,t){var a,r,o,c,l,d,A,u;n(1,arguments);var g=p(),m=s(null!==(a=null!==(r=null!==(o=null!==(c=null==t?void 0:t.weekStartsOn)&&void 0!==c?c:null==t||null===(l=t.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==o?o:g.weekStartsOn)&&void 0!==r?r:null===(A=g.locale)||void 0===A||null===(u=A.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==a?a:0);if(!(m>=0&&m<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var h=i(e),f=h.getUTCDay(),C=(f<m?7:0)+f-m;return h.setUTCDate(h.getUTCDate()-C),h.setUTCHours(0,0,0,0),h}function C(e,t){var a,r,o,c,l,d,A,u;n(1,arguments);var g=i(e),m=g.getUTCFullYear(),h=p(),C=s(null!==(a=null!==(r=null!==(o=null!==(c=null==t?void 0:t.firstWeekContainsDate)&&void 0!==c?c:null==t||null===(l=t.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:h.firstWeekContainsDate)&&void 0!==r?r:null===(A=h.locale)||void 0===A||null===(u=A.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:1);if(!(C>=1&&C<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var E=new Date(0);E.setUTCFullYear(m+1,0,C),E.setUTCHours(0,0,0,0);var b=f(E,t),B=new Date(0);B.setUTCFullYear(m,0,C),B.setUTCHours(0,0,0,0);var v=f(B,t);return g.getTime()>=b.getTime()?m+1:g.getTime()>=v.getTime()?m:m-1}function E(e,t){var a,r,i,o,c,l,d,A;n(1,arguments);var u=p(),g=s(null!==(a=null!==(r=null!==(i=null!==(o=null==t?void 0:t.firstWeekContainsDate)&&void 0!==o?o:null==t||null===(c=t.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==i?i:u.firstWeekContainsDate)&&void 0!==r?r:null===(d=u.locale)||void 0===d||null===(A=d.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==a?a:1),m=C(e,t),h=new Date(0);h.setUTCFullYear(m,0,g),h.setUTCHours(0,0,0,0);var E=f(h,t);return E}var b=6048e5;function B(n,e){for(var t=n<0?"-":"",a=Math.abs(n).toString();a.length<e;)a="0"+a;return t+a}const v=function(n,e){var t=n.getUTCFullYear(),a=t>0?t:1-t;return B("yy"===e?a%100:a,e.length)},y=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):B(t+1,2)},w=function(n,e){return B(n.getUTCDate(),e.length)},x=function(n,e){return B(n.getUTCHours()%12||12,e.length)},k=function(n,e){return B(n.getUTCHours(),e.length)},T=function(n,e){return B(n.getUTCMinutes(),e.length)},S=function(n,e){return B(n.getUTCSeconds(),e.length)},M=function(n,e){var t=e.length,a=n.getUTCMilliseconds();return B(Math.floor(a*Math.pow(10,t-3)),e.length)};var I={G:function(n,e,t){var a=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(a,{width:"abbreviated"});case"GGGGG":return t.era(a,{width:"narrow"});default:return t.era(a,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var a=n.getUTCFullYear(),r=a>0?a:1-a;return t.ordinalNumber(r,{unit:"year"})}return v(n,e)},Y:function(n,e,t,a){var r=C(n,a),i=r>0?r:1-r;return"YY"===e?B(i%100,2):"Yo"===e?t.ordinalNumber(i,{unit:"year"}):B(i,e.length)},R:function(n,e){return B(u(n),e.length)},u:function(n,e){return B(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var a=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(a);case"QQ":return B(a,2);case"Qo":return t.ordinalNumber(a,{unit:"quarter"});case"QQQ":return t.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(a,{width:"narrow",context:"formatting"});default:return t.quarter(a,{width:"wide",context:"formatting"})}},q:function(n,e,t){var a=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(a);case"qq":return B(a,2);case"qo":return t.ordinalNumber(a,{unit:"quarter"});case"qqq":return t.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(a,{width:"narrow",context:"standalone"});default:return t.quarter(a,{width:"wide",context:"standalone"})}},M:function(n,e,t){var a=n.getUTCMonth();switch(e){case"M":case"MM":return y(n,e);case"Mo":return t.ordinalNumber(a+1,{unit:"month"});case"MMM":return t.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(a,{width:"narrow",context:"formatting"});default:return t.month(a,{width:"wide",context:"formatting"})}},L:function(n,e,t){var a=n.getUTCMonth();switch(e){case"L":return String(a+1);case"LL":return B(a+1,2);case"Lo":return t.ordinalNumber(a+1,{unit:"month"});case"LLL":return t.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(a,{width:"narrow",context:"standalone"});default:return t.month(a,{width:"wide",context:"standalone"})}},w:function(e,t,a,r){var o=function(e,t){n(1,arguments);var a=i(e),r=f(a,t).getTime()-E(a,t).getTime();return Math.round(r/b)+1}(e,r);return"wo"===t?a.ordinalNumber(o,{unit:"week"}):B(o,t.length)},I:function(e,t,a){var r=function(e){n(1,arguments);var t=i(e),a=A(t).getTime()-g(t).getTime();return Math.round(a/m)+1}(e);return"Io"===t?a.ordinalNumber(r,{unit:"week"}):B(r,t.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):w(n,e)},D:function(e,t,a){var r=function(e){n(1,arguments);var t=i(e),a=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime(),o=a-r;return Math.floor(o/d)+1}(e);return"Do"===t?a.ordinalNumber(r,{unit:"dayOfYear"}):B(r,t.length)},E:function(n,e,t){var a=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(a,{width:"short",context:"formatting"});default:return t.day(a,{width:"wide",context:"formatting"})}},e:function(n,e,t,a){var r=n.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return B(i,2);case"eo":return t.ordinalNumber(i,{unit:"day"});case"eee":return t.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},c:function(n,e,t,a){var r=n.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return B(i,e.length);case"co":return t.ordinalNumber(i,{unit:"day"});case"ccc":return t.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(r,{width:"narrow",context:"standalone"});case"cccccc":return t.day(r,{width:"short",context:"standalone"});default:return t.day(r,{width:"wide",context:"standalone"})}},i:function(n,e,t){var a=n.getUTCDay(),r=0===a?7:a;switch(e){case"i":return String(r);case"ii":return B(r,e.length);case"io":return t.ordinalNumber(r,{unit:"day"});case"iii":return t.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(a,{width:"short",context:"formatting"});default:return t.day(a,{width:"wide",context:"formatting"})}},a:function(n,e,t){var a=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(a,{width:"narrow",context:"formatting"});default:return t.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(n,e,t){var a,r=n.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(a,{width:"narrow",context:"formatting"});default:return t.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(n,e,t){var a,r=n.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(a,{width:"narrow",context:"formatting"});default:return t.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var a=n.getUTCHours()%12;return 0===a&&(a=12),t.ordinalNumber(a,{unit:"hour"})}return x(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):k(n,e)},K:function(n,e,t){var a=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(a,{unit:"hour"}):B(a,e.length)},k:function(n,e,t){var a=n.getUTCHours();return 0===a&&(a=24),"ko"===e?t.ordinalNumber(a,{unit:"hour"}):B(a,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):T(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):S(n,e)},S:function(n,e){return M(n,e)},X:function(n,e,t,a){var r=(a._originalDate||n).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return N(r);case"XXXX":case"XX":return U(r);default:return U(r,":")}},x:function(n,e,t,a){var r=(a._originalDate||n).getTimezoneOffset();switch(e){case"x":return N(r);case"xxxx":case"xx":return U(r);default:return U(r,":")}},O:function(n,e,t,a){var r=(a._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+D(r,":");default:return"GMT"+U(r,":")}},z:function(n,e,t,a){var r=(a._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+D(r,":");default:return"GMT"+U(r,":")}},t:function(n,e,t,a){var r=a._originalDate||n;return B(Math.floor(r.getTime()/1e3),e.length)},T:function(n,e,t,a){return B((a._originalDate||n).getTime(),e.length)}};function D(n,e){var t=n>0?"-":"+",a=Math.abs(n),r=Math.floor(a/60),i=a%60;if(0===i)return t+String(r);var o=e||"";return t+String(r)+o+B(i,2)}function N(n,e){return n%60==0?(n>0?"-":"+")+B(Math.abs(n)/60,2):U(n,e)}function U(n,e){var t=e||"",a=n>0?"-":"+",r=Math.abs(n);return a+B(Math.floor(r/60),2)+t+B(r%60,2)}const Y=I;var W=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},L=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const P={p:L,P:function(n,e){var t,a=n.match(/(P+)(p+)?/)||[],r=a[1],i=a[2];if(!i)return W(n,e);switch(r){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",W(r,e)).replace("{{time}}",L(i,e))}};function j(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var z=["D","DD"],O=["YY","YYYY"];function R(n){return-1!==z.indexOf(n)}function G(n){return-1!==O.indexOf(n)}function F(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var q={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function H(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,a=n.formats[t]||n.formats[n.defaultWidth];return a}}const Z={date:H({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:H({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:H({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var $={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function X(n){return function(e,t){var a;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var r=n.defaultFormattingWidth||n.defaultWidth,i=null!=t&&t.width?String(t.width):r;a=n.formattingValues[i]||n.formattingValues[r]}else{var o=n.defaultWidth,s=null!=t&&t.width?String(t.width):n.defaultWidth;a=n.values[s]||n.values[o]}return a[n.argumentCallback?n.argumentCallback(e):e]}}const K={ordinalNumber:function(n,e){var t=Number(n),a=t%100;if(a>20||a<10)switch(a%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:X({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:X({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:X({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:X({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:X({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Q(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=t.width,r=a&&n.matchPatterns[a]||n.matchPatterns[n.defaultMatchWidth],i=e.match(r);if(!i)return null;var o,s=i[0],c=a&&n.parsePatterns[a]||n.parsePatterns[n.defaultParseWidth],l=Array.isArray(c)?J(c,(function(n){return n.test(s)})):V(c,(function(n){return n.test(s)}));o=n.valueCallback?n.valueCallback(l):l,o=t.valueCallback?t.valueCallback(o):o;var d=e.slice(s.length);return{value:o,rest:d}}}function V(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function J(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}var _,nn={ordinalNumber:(_={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(_.matchPattern);if(!t)return null;var a=t[0],r=n.match(_.parsePattern);if(!r)return null;var i=_.valueCallback?_.valueCallback(r[0]):r[0];i=e.valueCallback?e.valueCallback(i):i;var o=n.slice(a.length);return{value:i,rest:o}}),era:Q({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Q({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:Q({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Q({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Q({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const en={code:"en-US",formatDistance:function(n,e,t){var a,r=q[n];return a="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+a:a+" ago":a},formatLong:Z,formatRelative:function(n,e,t,a){return $[n]},localize:K,match:nn,options:{weekStartsOn:0,firstWeekContainsDate:1}};var tn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,an=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,rn=/^'([^]*?)'?$/,on=/''/g,sn=/[a-zA-Z]/;function cn(e,t,a){var r,c,d,A,u,g,m,h,f,C,E,b,B,v,y,w,x,k;n(2,arguments);var T=String(t),S=p(),M=null!==(r=null!==(c=null==a?void 0:a.locale)&&void 0!==c?c:S.locale)&&void 0!==r?r:en,I=s(null!==(d=null!==(A=null!==(u=null!==(g=null==a?void 0:a.firstWeekContainsDate)&&void 0!==g?g:null==a||null===(m=a.locale)||void 0===m||null===(h=m.options)||void 0===h?void 0:h.firstWeekContainsDate)&&void 0!==u?u:S.firstWeekContainsDate)&&void 0!==A?A:null===(f=S.locale)||void 0===f||null===(C=f.options)||void 0===C?void 0:C.firstWeekContainsDate)&&void 0!==d?d:1);if(!(I>=1&&I<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var D=s(null!==(E=null!==(b=null!==(B=null!==(v=null==a?void 0:a.weekStartsOn)&&void 0!==v?v:null==a||null===(y=a.locale)||void 0===y||null===(w=y.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==B?B:S.weekStartsOn)&&void 0!==b?b:null===(x=S.locale)||void 0===x||null===(k=x.options)||void 0===k?void 0:k.weekStartsOn)&&void 0!==E?E:0);if(!(D>=0&&D<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!M.localize)throw new RangeError("locale must contain localize property");if(!M.formatLong)throw new RangeError("locale must contain formatLong property");var N=i(e);if(!o(N))throw new RangeError("Invalid time value");var U=j(N),W=l(N,U),L={firstWeekContainsDate:I,weekStartsOn:D,locale:M,_originalDate:N},z=T.match(an).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,P[e])(n,M.formatLong):n})).join("").match(tn).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return ln(n);var i=Y[r];if(i)return null!=a&&a.useAdditionalWeekYearTokens||!G(n)||F(n,t,String(e)),null!=a&&a.useAdditionalDayOfYearTokens||!R(n)||F(n,t,String(e)),i(W,n,M.localize,L);if(r.match(sn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return z}function ln(n){var e=n.match(rn);return e?e[1].replace(on,"'"):n}function dn(e){n(1,arguments);var t=s(e);return i(1e3*t)}Math.pow(10,8);var An=36e5;function un(e,t){var a;n(1,arguments);var r=s(null!==(a=null==t?void 0:t.additionalDigits)&&void 0!==a?a:2);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var i,o=fn(e);if(o.date){var c=Cn(o.date,r);i=En(c.restDateString,c.year)}if(!i||isNaN(i.getTime()))return new Date(NaN);var l,d=i.getTime(),A=0;if(o.time&&(A=Bn(o.time),isNaN(A)))return new Date(NaN);if(!o.timezone){var u=new Date(d+A),g=new Date(0);return g.setFullYear(u.getUTCFullYear(),u.getUTCMonth(),u.getUTCDate()),g.setHours(u.getUTCHours(),u.getUTCMinutes(),u.getUTCSeconds(),u.getUTCMilliseconds()),g}return l=yn(o.timezone),isNaN(l)?new Date(NaN):new Date(d+A+l)}var gn={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},mn=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,hn=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,pn=/^([+-])(\d{2})(?::?(\d{2}))?$/;function fn(n){var e,t={},a=n.split(gn.dateTimeDelimiter);if(a.length>2)return t;if(/:/.test(a[0])?e=a[0]:(t.date=a[0],e=a[1],gn.timeZoneDelimiter.test(t.date)&&(t.date=n.split(gn.timeZoneDelimiter)[0],e=n.substr(t.date.length,n.length))),e){var r=gn.timezone.exec(e);r?(t.time=e.replace(r[1],""),t.timezone=r[1]):t.time=e}return t}function Cn(n,e){var t=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),a=n.match(t);if(!a)return{year:NaN,restDateString:""};var r=a[1]?parseInt(a[1]):null,i=a[2]?parseInt(a[2]):null;return{year:null===i?r:100*i,restDateString:n.slice((a[1]||a[2]).length)}}function En(n,e){if(null===e)return new Date(NaN);var t=n.match(mn);if(!t)return new Date(NaN);var a=!!t[4],r=bn(t[1]),i=bn(t[2])-1,o=bn(t[3]),s=bn(t[4]),c=bn(t[5])-1;if(a)return function(n,e,t){return e>=1&&e<=53&&t>=0&&t<=6}(0,s,c)?function(n,e,t){var a=new Date(0);a.setUTCFullYear(n,0,4);var r=7*(e-1)+t+1-(a.getUTCDay()||7);return a.setUTCDate(a.getUTCDate()+r),a}(e,s,c):new Date(NaN);var l=new Date(0);return function(n,e,t){return e>=0&&e<=11&&t>=1&&t<=(wn[e]||(xn(n)?29:28))}(e,i,o)&&function(n,e){return e>=1&&e<=(xn(n)?366:365)}(e,r)?(l.setUTCFullYear(e,i,Math.max(r,o)),l):new Date(NaN)}function bn(n){return n?parseInt(n):1}function Bn(n){var e=n.match(hn);if(!e)return NaN;var t=vn(e[1]),a=vn(e[2]),r=vn(e[3]);return function(n,e,t){return 24===n?0===e&&0===t:t>=0&&t<60&&e>=0&&e<60&&n>=0&&n<25}(t,a,r)?t*An+6e4*a+1e3*r:NaN}function vn(n){return n&&parseFloat(n.replace(",","."))||0}function yn(n){if("Z"===n)return 0;var e=n.match(pn);if(!e)return 0;var t="+"===e[1]?-1:1,a=parseInt(e[2]),r=e[3]&&parseInt(e[3])||0;return function(n,e){return e>=0&&e<=59}(0,r)?t*(a*An+6e4*r):NaN}var wn=[31,null,31,30,31,30,31,31,30,31,30,31];function xn(n){return n%400==0||n%4==0&&n%100!=0}function kn(e){n(1,arguments);var t=i(e);return t.setHours(0,0,0,0),t}function Tn(e,t){n(2,arguments);var a=kn(e),r=kn(t);return a.getTime()===r.getTime()}function Sn(e){return n(1,arguments),Tn(e,Date.now())}function Mn(e){n(1,arguments);var t=i(e),a=t.getDay();return a}const In=document.createElement("li"),Dn=document.createElement("label"),Nn=document.createElement("input"),Un=document.createElement("datalist");Dn.setAttribute("for","country-select"),Dn.innerText="Country",Nn.setAttribute("type","text"),Nn.setAttribute("name","country-select"),Nn.setAttribute("id","country-select"),Nn.setAttribute("list","countries"),Un.setAttribute("id","countries"),In.append(Dn,Nn,Un),Nn.addEventListener("keypress",(n=>{"Enter"===n.key&&n.preventDefault()}));const Yn={AF:"Afghanistan",AL:"Albania",DZ:"Algeria",AS:"American Samoa",AD:"Andorra",AO:"Angola",AI:"Anguilla",AQ:"Antarctica",AG:"Antigua and Barbuda",AR:"Argentina",AM:"Armenia",AW:"Aruba",AU:"Australia",AT:"Austria",AZ:"Azerbaijan",BS:"Bahamas (the)",BH:"Bahrain",BD:"Bangladesh",BB:"Barbados",BY:"Belarus",BE:"Belgium",BZ:"Belize",BJ:"Benin",BM:"Bermuda",BT:"Bhutan",BO:"Bolivia (Plurinational State of)",BQ:"Bonaire, Sint Eustatius and Saba",BA:"Bosnia and Herzegovina",BW:"Botswana",BV:"Bouvet Island",BR:"Brazil",IO:"British Indian Ocean Territory (the)",BN:"Brunei Darussalam",BG:"Bulgaria",BF:"Burkina Faso",BI:"Burundi",CV:"Cabo Verde",KH:"Cambodia",CM:"Cameroon",CA:"Canada",KY:"Cayman Islands (the)",CF:"Central African Republic (the)",TD:"Chad",CL:"Chile",CN:"China",CX:"Christmas Island",CC:"Cocos (Keeling) Islands (the)",CO:"Colombia",KM:"Comoros (the)",CD:"Congo (the Democratic Republic of the)",CG:"Congo (the)",CK:"Cook Islands (the)",CR:"Costa Rica",HR:"Croatia",CU:"Cuba",CW:"Curaçao",CY:"Cyprus",CZ:"Czechia",CI:"Côte d'Ivoire",DK:"Denmark",DJ:"Djibouti",DM:"Dominica",DO:"Dominican Republic (the)",EC:"Ecuador",EG:"Egypt",SV:"El Salvador",GQ:"Equatorial Guinea",ER:"Eritrea",EE:"Estonia",SZ:"Eswatini",ET:"Ethiopia",FK:"Falkland Islands (the) [Malvinas]",FO:"Faroe Islands (the)",FJ:"Fiji",FI:"Finland",FR:"France",GF:"French Guiana",PF:"French Polynesia",TF:"French Southern Territories (the)",GA:"Gabon",GM:"Gambia (the)",GE:"Georgia",DE:"Germany",GH:"Ghana",GI:"Gibraltar",GR:"Greece",GL:"Greenland",GD:"Grenada",GP:"Guadeloupe",GU:"Guam",GT:"Guatemala",GG:"Guernsey",GN:"Guinea",GW:"Guinea-Bissau",GY:"Guyana",HT:"Haiti",HM:"Heard Island and McDonald Islands",VA:"Holy See (the)",HN:"Honduras",HK:"Hong Kong",HU:"Hungary",IS:"Iceland",IN:"India",ID:"Indonesia",IR:"Iran (Islamic Republic of)",IQ:"Iraq",IE:"Ireland",IM:"Isle of Man",IL:"Israel",IT:"Italy",JM:"Jamaica",JP:"Japan",JE:"Jersey",JO:"Jordan",KZ:"Kazakhstan",KE:"Kenya",KI:"Kiribati",KP:"Korea (the Democratic People's Republic of)",KR:"Korea (the Republic of)",KW:"Kuwait",KG:"Kyrgyzstan",LA:"Lao People's Democratic Republic (the)",LV:"Latvia",LB:"Lebanon",LS:"Lesotho",LR:"Liberia",LY:"Libya",LI:"Liechtenstein",LT:"Lithuania",LU:"Luxembourg",MO:"Macao",MG:"Madagascar",MW:"Malawi",MY:"Malaysia",MV:"Maldives",ML:"Mali",MT:"Malta",MH:"Marshall Islands (the)",MQ:"Martinique",MR:"Mauritania",MU:"Mauritius",YT:"Mayotte",MX:"Mexico",FM:"Micronesia (Federated States of)",MD:"Moldova (the Republic of)",MC:"Monaco",MN:"Mongolia",ME:"Montenegro",MS:"Montserrat",MA:"Morocco",MZ:"Mozambique",MM:"Myanmar",NA:"Namibia",NR:"Nauru",NP:"Nepal",NL:"Netherlands (the)",NC:"New Caledonia",NZ:"New Zealand",NI:"Nicaragua",NE:"Niger (the)",NG:"Nigeria",NU:"Niue",NF:"Norfolk Island",MP:"Northern Mariana Islands (the)",NO:"Norway",OM:"Oman",PK:"Pakistan",PW:"Palau",PS:"Palestine, State of",PA:"Panama",PG:"Papua New Guinea",PY:"Paraguay",PE:"Peru",PH:"Philippines (the)",PN:"Pitcairn",PL:"Poland",PT:"Portugal",PR:"Puerto Rico",QA:"Qatar",MK:"Republic of North Macedonia",RO:"Romania",RU:"Russian Federation (the)",RW:"Rwanda",RE:"Réunion",BL:"Saint Barthélemy",SH:"Saint Helena, Ascension and Tristan da Cunha",KN:"Saint Kitts and Nevis",LC:"Saint Lucia",MF:"Saint Martin (French part)",PM:"Saint Pierre and Miquelon",VC:"Saint Vincent and the Grenadines",WS:"Samoa",SM:"San Marino",ST:"Sao Tome and Principe",SA:"Saudi Arabia",SN:"Senegal",RS:"Serbia",SC:"Seychelles",SL:"Sierra Leone",SG:"Singapore",SX:"Sint Maarten (Dutch part)",SK:"Slovakia",SI:"Slovenia",SB:"Solomon Islands",SO:"Somalia",ZA:"South Africa",GS:"South Georgia and the South Sandwich Islands",SS:"South Sudan",ES:"Spain",LK:"Sri Lanka",SD:"Sudan (the)",SR:"Suriname",SJ:"Svalbard and Jan Mayen",SE:"Sweden",CH:"Switzerland",SY:"Syrian Arab Republic",TW:"Taiwan",TJ:"Tajikistan",TZ:"Tanzania, United Republic of",TH:"Thailand",TL:"Timor-Leste",TG:"Togo",TK:"Tokelau",TO:"Tonga",TT:"Trinidad and Tobago",TN:"Tunisia",TR:"Turkey",TM:"Turkmenistan",TC:"Turks and Caicos Islands (the)",TV:"Tuvalu",UG:"Uganda",UA:"Ukraine",AE:"United Arab Emirates (the)",GB:"United Kingdom of Great Britain and Northern Ireland (the)",UM:"United States Minor Outlying Islands (the)",US:"United States of America (the)",UY:"Uruguay",UZ:"Uzbekistan",VU:"Vanuatu",VE:"Venezuela (Bolivarian Republic of)",VN:"Viet Nam",VG:"Virgin Islands (British)",VI:"Virgin Islands (U.S.)",WF:"Wallis and Futuna",EH:"Western Sahara",YE:"Yemen",ZM:"Zambia",ZW:"Zimbabwe",AX:"Åland Islands"};for(const n in Yn)if(Object.prototype.hasOwnProperty.call(Yn,n)){const e=document.createElement("option");e.setAttribute("value",Yn[n]),e.innerText=n,e.dataset.value=n,Un.appendChild(e)}const Wn=In,Ln=document.createElement("li");Ln.classList.add("no-display");const Pn=document.createElement("label"),jn=document.createElement("input"),zn=document.createElement("datalist");Pn.setAttribute("for","states-select"),Pn.innerText="State",jn.setAttribute("type","text"),jn.setAttribute("name","states-select"),jn.setAttribute("id","states-select"),jn.setAttribute("list","states"),zn.setAttribute("id","states"),Ln.append(Pn,jn,zn),jn.addEventListener("keypress",(n=>{"Enter"===n.key&&n.preventDefault()}));const On={AL:"Alabama",AK:"Alaska",AZ:"Arizona",AR:"Arkansas",CA:"California",CO:"Colorado",CT:"Connecticut",DE:"Delaware",FL:"Florida",GA:"Georgia",HI:"Hawaii",ID:"Idaho",IL:"Illinois",IN:"Indiana",IA:"Iowa",KS:"Kansas",KY:"Kentucky",LA:"Louisiana",ME:"Maine",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MN:"Minnesota",MS:"Mississippi",MO:"Missouri",MT:"Montana",NE:"Nebraska",NV:"Nevada",NH:"New Hampshire",NJ:"New Jersey",NM:"New Mexico",NY:"New York",NC:"North Carolina",ND:"North Dakota",OH:"Ohio",OK:"Oklahoma",OR:"Oregon",PA:"Pennsylvania",RI:"Rhode Island",SC:"South Carolina",SD:"South Dakota",TN:"Tennessee",TX:"Texas",UT:"Utah",VT:"Vermont",VA:"Virginia",WA:"Washington",WV:"West Virginia",WI:"Wisconsin",WY:"Wyoming"};for(const n in On)if(Object.prototype.hasOwnProperty.call(On,n)){const e=document.createElement("option");e.setAttribute("value",n),e.innerText=On[n],zn.appendChild(e)}const Rn=Ln,Gn=t.p+"7bbf47780fb42aed09bf.svg",Fn=[...Wn.children][1],qn=[...Rn.children][1];function Hn(n){const e=new Image;e.src=Gn;const t=document.createElement("button");t.setAttribute("type","button"),t.classList.add("clear-button"),t.appendChild(e);const a=[...n.children][1];t.addEventListener("click",(()=>{n===Wn&&"United States of America (the)"===a.value&&(qn.value="",Rn.classList.add("no-display")),a.value=""})),n.appendChild(t)}const Zn=document.createElement("form");Zn.classList.add("settings-form");const $n=document.createElement("div");$n.classList.add("advanced-search");const Xn=document.createElement("h4");Xn.innerText="Advanced Search";const Kn=document.createElement("ul");Kn.append(Wn,Rn),Fn.addEventListener("input",(()=>{"United States of America (the)"===Fn.value?Rn.classList.remove("no-display"):(qn.value="",Rn.classList.add("no-display"))})),Hn(Wn),Hn(Rn),$n.append(Xn,Kn);const Qn=document.createElement("div");Qn.classList.add("settings-select");const Vn=document.createElement("h4");Vn.innerText="Settings";const Jn=document.createElement("ul"),_n=document.createElement("li"),ne=document.createElement("label");ne.setAttribute("for","units-toggle"),ne.innerText="Units";const ee=document.createElement("input");ee.setAttribute("type","checkbox"),ee.setAttribute("id","units-toggle"),ee.setAttribute("name","units-toggle");const te=document.createElement("span");te.classList.add("imperial"),te.innerText="Imperial";const ae=document.createElement("span");ae.classList.add("metric"),ae.innerText="Metric",_n.append(ne,te,ee,ae),ee.addEventListener("change",(()=>{ee.checked?localStorage.setItem("units","checked"):localStorage.setItem("units","unchecked")})),Jn.append(_n),Qn.append(Vn,Jn);const re=document.createElement("div");re.classList.add("reset");const ie=document.createElement("h4");ie.innerText="Reset";const oe=document.createElement("p");oe.innerText="Forget saved data for this site?";const se=document.createElement("button");se.innerText="Reset",se.addEventListener("click",(()=>{localStorage.removeItem("location"),localStorage.removeItem("units"),location.reload()})),re.append(ie,oe,se),Zn.append($n,Qn,re);const ce=Zn,le=t.p+"428ee93bd340561e9f42.svg",de=t.p+"656a744711a6351f0a8c.svg",Ae=t.p+"175b8c755aee790dd3cd.svg",ue=t.p+"373b64e00c8e97d53956.svg",ge=t.p+"c2d54ace29a241821ca2.svg",me=t.p+"5ed1cc80ba81a9103278.svg",he=t.p+"4236146a569e571de9d4.svg",pe=t.p+"8b242f83ed3d8fa5d97a.svg",fe=t.p+"2b18dbc676493a9cea59.svg",Ce=t.p+"2f874183851743b9f661.svg",Ee=t.p+"d13cb46b4a87e72d6462.svg",be=t.p+"54ff7732bb1a5ff166c6.svg",Be=t.p+"57d3ca9af2612ee72754.svg",ve=t.p+"0aa8bf835f3c27fcf21c.svg",ye=t.p+"2086aa6783259e46695e.svg",we=t.p+"6933e670b2e5a11e09c4.svg",xe=t.p+"0cac5032bf933bf10621.svg",ke=t.p+"2703d1de6de455fabeb4.svg",Te=t.p+"f86166a4f374db17b5d2.svg",Se=t.p+"d8f8023c4f4368222bc3.svg";let Me=!0;document.querySelector(".settings-container").appendChild(ce);const Ie=document.createElement("div");Ie.classList.add("gradient","day");const De=document.createElement("div");De.classList.add("gradient","cloud");const Ne=document.createElement("div");Ne.classList.add("gradient","rain");const Ue=document.createElement("div");Ue.classList.add("gradient","night");const Ye=document.createElement("div");Ye.classList.add("gradient","night-cloud");const We=document.querySelector(".site-wrapper");We.append(Ie,De,Ne,Ue,Ye);const Le=[...document.querySelectorAll(".gradient")],Pe=document.querySelector(".current-weather"),je=document.querySelector(".forecast"),ze=document.querySelector(".search-icon"),Oe=new Image;Oe.src=be,ze.appendChild(Oe);const Re=document.querySelector(".cog-icon"),Ge=new Image;Ge.src=Be,Re.appendChild(Ge);const Fe=document.querySelector(".cog-icon-container"),qe=document.querySelector(".settings");function He(n){let e;switch(n){case"01d":default:e=le;break;case"01n":e=de;break;case"02d":e=Ae;break;case"02n":e=ue;break;case"03d":case"03n":e=ge;break;case"04d":case"04n":e=me;break;case"09d":case"09n":case"10n":e=he;break;case"10d":e=pe;break;case"11d":case"11n":e=fe;break;case"13d":case"13n":e=Ce;break;case"50d":case"50n":e=Ee}return e}function Ze(n){Pe.firstChild&&Pe.removeChild(Pe.firstChild),je.firstChild&&je.removeChild(je.firstChild),Pe.appendChild(function(n){let{current:e}=n;Me&&(document.querySelector(".location-input").classList.add("post"),Me=!1);const t=document.createElement("div");t.classList.add("current-weather-display");const a=document.createElement("div");a.innerText=e.locationName,a.classList.add("current-location");const r=document.createElement("div");r.classList.add("current-temp"),r.innerText=`${Math.floor(e.main.temp)}°`;const i=function(n){const e=document.querySelector("#units-toggle"),t=document.createElement("ul"),a=document.createElement("li"),r=new Image;r.src=ye;const i=document.createElement("span");i.innerText="Feels like";const o=document.createElement("span");o.innerText=`${Math.floor(n.main.feels_like)}°`,a.append(r,i,o);const s=document.createElement("li"),c=new Image;c.src=we;const l=document.createElement("span");l.innerText="Humidity";const d=document.createElement("span");d.innerText=`${n.main.humidity}%`,s.append(c,l,d);const A=document.createElement("li"),u=new Image;u.src=Se;const g=document.createElement("span");g.innerText="Cloudiness";const m=document.createElement("span");m.innerText=`${n.clouds.all}%`,A.append(u,g,m);const h=document.createElement("li"),p=new Image;p.src=Te;const f=document.createElement("span");f.innerText="Wind";const C=document.createElement("span");C.innerText=`${Math.floor(e.checked?3.6*n.wind.speed:n.wind.speed)} ${e.checked?"km/h":"mph"}`,h.append(p,f,C);const E=document.createElement("li"),b=new Image;b.src=ke;const B=document.createElement("span");B.innerText="Sunrise";const v=document.createElement("span");v.innerText=`${n.sunrise}`,E.append(b,B,v);const y=document.createElement("li"),w=new Image;w.src=xe;const x=document.createElement("span");x.innerText="Sunset";const k=document.createElement("span");return k.innerText=`${n.sunset}`,y.append(w,x,k),t.append(a,s,A,h,E,y),t.classList.add("more-info-list"),t}(e),o=document.createElement("button");o.classList.add("more-info");const s=new Image;s.src=ve,o.appendChild(s),o.addEventListener("click",(()=>{i.style.maxHeight?i.style.maxHeight=null:i.style.maxHeight=`${i.scrollHeight}px`}));const c=document.createElement("div");c.classList.add("current-weather-icon");const l=new Image;l.classList.add("icon"),l.src=He(e.weather[0].icon),c.append(l,o);const d=document.createElement("div");d.classList.add("current-description"),d.innerText=e.weather[0].description;const A=function(n){let e;switch(n){case"01d":case"02d":e=Ie;break;case"01n":e=Ue;break;case"03d":case"04d":case"13d":case"50d":e=De;break;case"02n":case"03n":case"04n":case"13n":case"50n":e=Ye;break;case"09d":case"09n":case"10n":case"10d":case"11d":case"11n":e=Ne;break;default:e=""}return e}(e.weather[0].icon);We.className=A===De?"site-wrapper cloud":"site-wrapper";for(const n of Le)n.style.opacity=A===n?1:0;return t.append(a,r,d,c,i),t}(n)),je.appendChild(function(n){let{forecast:e}=n;const t=document.createElement("div");t.classList.add("forecast-display");for(const n in e)if(Object.prototype.hasOwnProperty.call(e,n)){const a=document.createElement("div");a.classList.add("day-display");const r=document.createElement("div");r.classList.add("day-title"),r.innerText=n,a.appendChild(r);const i=document.createElement("div");i.classList.add("day-icon");const o=new Image;o.classList.add("icon"),o.src=He(e[n].icon),i.appendChild(o);const s=document.createElement("div");s.classList.add("low-high");const c=document.createElement("span"),l=document.createElement("span");c.innerText=`L: ${e[n].low}°`,l.innerText=`H: ${e[n].high}°`,s.append(c,l),a.append(r,i,s),t.appendChild(a)}return t}(n))}function $e(n){let e,t=0;for(const a of n){let r=0;for(const e of n)a===e&&(r+=1);r>t&&(t=r,e=a)}return e}function Xe(n){let e;switch(n){case 0:e="Sunday";break;case 1:e="Monday";break;case 2:e="Tuesday";break;case 3:e="Wednesday";break;case 4:e="Thursday";break;case 5:e="Friday";break;case 6:e="Saturday";break;default:e="no day"}return e}Fe.addEventListener("click",(()=>{qe.classList.toggle("hidden")}));const Ke=async function(n){const e=await async function(n){let{lat:e,lon:t}=n;const a={},r="https://api.openweathermap.org/data/2.5/",i=`lat=${e}&lon=${t}`,o="&appid=921cfd876fc7bdd1768497c18dc1bf81&units="+(document.querySelector("#units-toggle").checked?"metric":"imperial"),s=await fetch(`${r}/weather?${i}${o}`),c=await fetch(`${r}/forecast?${i}${o}`);return a.current=await s.json(),a.fiveDay=await c.json(),a.current.sunrise=cn(dn(a.current.sys.sunrise),"p"),a.current.sunset=cn(dn(a.current.sys.sunset),"p"),a.forecast=function(n){const e=n.list.reduce(((n,e)=>(n.length&&Tn(un(n[n.length-1][0].dt_txt),un(e.dt_txt))?n[n.length-1].push(e):n.push([e]),n)),[]),t={};for(const n of e){if(Sn(un(n[0].dt_txt)))continue;let e,a,r;const i=[],o=[];for(const t of n)e||(e=Xe(Mn(un(t.dt_txt)))),(!a||t.main.temp_min<a)&&(a=Math.floor(t.main.temp_min)),(!r||t.main.temp_max>r)&&(r=Math.floor(t.main.temp_max)),t.weather[0].icon.includes("d")&&(i.push(t.weather[0].description),o.push(t.weather[0].icon));t[e]={high:r,low:a,description:$e(i),icon:$e(o)}}return t}(a.fiveDay),a}(n);e.current.locationName=n.name,Ze(e)},Qe=document.querySelector("#loc"),Ve=document.querySelector(".suggestion-box-container");async function Je(n,e){var t;if(await(t=e,new Promise((n=>setTimeout(n,t)))),n===Qe.value){const n=await async function(){const n=document.getElementById("country-select"),e=document.getElementById("states-select"),t=Qe.value;let a,r;if(n.value){const e=n.value;r=document.querySelector(`#countries option[value='${e}']`).dataset.value}a=Number(t)?n.value?`zip?zip=${t},${r}`:`zip?zip=${t}`:e.value?`direct?q=${t},${e.value},${r}&limit=7`:n.value?`direct?q=${t},${r}&limit=7`:`direct?q=${t}&limit=7`;const i=await fetch(`https://api.openweathermap.org/geo/1.0/${a}&appid=921cfd876fc7bdd1768497c18dc1bf81`);return await i.json()}(Qe.value),e=function(n){Ve.firstChild&&Ve.removeChild(Ve.firstChild);const e=document.createElement("div");if(e.classList.add("suggestion-box"),Array.isArray(n)||(n=[n]),n.length)n.forEach((n=>{const t=document.createElement("button");t.setAttribute("type","button"),t.classList.add("loc-suggestion"),t.innerText=`${n.name}, ${n.state??Yn[n.country]}`,t.addEventListener("click",(async()=>{Ve.removeChild(Ve.firstChild),Qe.value="",localStorage.setItem("location",JSON.stringify(n)),Ke(n)})),e.appendChild(t)}));else{const n=document.createElement("div");n.classList.add("loc-suggestion"),n.innerText="No results",e.appendChild(n)}return e}(n);Ve.appendChild(e)}}const _e=document.querySelector("#loc");var nt=t(379),et=t.n(nt),tt=t(795),at=t.n(tt),rt=t(777),it=t.n(rt),ot=t(565),st=t.n(ot),ct=t(216),lt=t.n(ct),dt=t(589),At=t.n(dt),ut=t(426),gt={};gt.styleTagTransform=At(),gt.setAttributes=st(),gt.insert=it().bind(null,"head"),gt.domAPI=at(),gt.insertStyleElement=lt(),et()(ut.Z,gt),ut.Z&&ut.Z.locals&&ut.Z.locals,function(){if(localStorage.getItem("location")){const n=JSON.parse(localStorage.getItem("location"));"checked"===localStorage.getItem("units")&&(ee.checked=!0),Ke(n)}_e.addEventListener("input",(()=>{Qe.value?Qe.value.length>4?Je(Qe.value,400):Je(Qe.value,2e3):Ve.firstChild&&Ve.removeChild(Ve.firstChild)})),_e.addEventListener("keypress",(n=>{"Enter"===n.key&&n.preventDefault()})),window.addEventListener("resize",(()=>{const n=document.querySelector(".more-info-list");n&&n.style.maxHeight&&(n.style.maxHeight=`${n.scrollHeight}px`)}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,