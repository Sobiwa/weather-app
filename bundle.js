(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>s});var a=t(537),i=t.n(a),r=t(645),o=t.n(r)()(i());o.push([n.id,":root {\n  --settings-width: 300px;\n\n  --background: #282a36;\n  --start-screen-bg: #6273a4f8;\n  --subtle: #6272a4;\n  --pink: #ff79c6;\n  --green: #50fa7b;\n  --yellow: #f1fa8c;\n  --blue: #8be9fd;\n  --plain: #f8f8f2;\n\n  --day-sky1: #4687d8;\n  --day-sky2: #7fafde;\n\n  --cloud1: #f5f5f7;\n  --cloud2: #a1b5c7;\n  --cloud-font: #3b3b3b;\n\n  --rain1: #51606b;\n  --rain2: #97999d;\n\n  --night1: #0b192b;\n  --night2: #013a60;\n  --night-cloud: hsl(204, 24%, 30%);\n}\n\n* {\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  height: 100%;\n}\n\nbody {\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  margin: 0;\n  padding: 0;\n  min-height: 100%;\n  width: 100%;\n  background-color: #013a6000;\n  color: var(--plain);\n}\n\n.site-wrapper {\n  position: relative;\n  min-height: 100vh;\n  width: 100%;\n  display: grid;\n  grid-template-rows: min(75px, 8%) auto 1fr;\n  align-items: center;\n  justify-items: center;\n  overflow-x: hidden;\n}\n\n.gradient {\n  position: absolute;\n  content: '';\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: -1;\n  opacity: 0;\n  transition: opacity 0.5s;\n}\n\n.gradient.day {\n  opacity: 1;\n  background-image: linear-gradient(var(--day-sky1), var(--day-sky2));\n}\n\n.gradient.cloud {\n  background-image: linear-gradient(var(--cloud1), var(--cloud2));\n}\n\n.site-wrapper.cloud {\n  color: var(--cloud-font);\n}\n\n.gradient.rain {\n  background-image: linear-gradient(var(--rain1), var(--rain2));\n}\n\n.gradient.night {\n  background-image: linear-gradient(var(--night1), var(--night2));\n}\n\n.gradient.night-cloud {\n  background-image: linear-gradient(var(--night1), var(--night-cloud), var(--night2));\n\n}\n\n.location-input {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  margin: auto;\n  height: min-content;\n  width: max-content;\n}\n\n.location-input.post {\n  top: 8px;\n  left: 8px;\n  bottom: auto;\n  right: auto;\n  display: flex;\n  justify-content: center;\n  z-index: 1;\n}\n\nul {\n  list-style: none;\n}\n\n#loc {\n  box-sizing: border-box;\n  appearance: none;\n  border: none;\n  line-height: 1.2rem;\n  width: 100%;\n  border-radius: 20px;\n  padding: 4px 8px;\n  font-size: 90%;\n  background-color: rgb(232, 240, 254);\n}\n\n#loc:focus {\n  outline: 1px solid lightblue;\n}\n\n.loc-input-field {\n  min-width: 150px;\n  position: relative;\n  transition: all 0.3s;\n}\n\n.location-input.post .loc-input-field {\n  min-width: 30px;\n  container-type: inline-size;\n  opacity: 0.3;\n}\n\n.location-input.post .loc-input-field:hover,\n.location-input.post .loc-input-field:has(#loc:focus) {\n  min-width: 150px;\n  opacity: 1;\n}\n\n.loc-input-field:hover .suggestion-box-container,\n.loc-input-field:has(#loc:focus) .suggestion-box-container {\n  display: block;\n}\n\n\n.search-icon {\n  background-color: rgba(232, 240, 254, 0);\n  position: absolute;\n  height: 18px;\n  right: 5px;\n  top: 4px;\n}\n\n.search-icon img {\n  height: 100%;\n  width: 100%;\n}\n\n@container (max-width: 50px) {\n  .search-icon {\n    position: absolute;\n    width: 30px;\n    height: 1.2rem;\n    top:0;\n    right:0;\n    left:0;\n    bottom: 0;\n    margin: auto;\n    border-radius: 20px;\n  }\n  #loc::placeholder {\n    opacity: 0;\n  }\n  \n  .loc-input-field #loc {\n      color: rgba(0, 0, 0, 0);\n    }\n}\n\n.suggestion-box-container {\n  position: relative;\n  display: none;\n}\n\n.suggestion-box {\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  width:200px;\n  border-radius: 10px;\n  overflow: hidden;\n}\n\n.loc-suggestion {\n  width: 100%;\n  background-color: white;\n  color: black;\n  padding: 5px 8px;\n  appearance: none;\n  border: none;\n  text-align: left;\n}\n\n.loc-suggestion:focus {\n  outline: none;\n  background-color: hsl(210, 59%, 90%);\n  border-left: 3px solid var(--day-sky2);\n}\n\n.loc-suggestion:hover {\n  background-color: hsl(210, 59%, 90%);\n}\n\n.current-weather {\n  margin-right: calc(100% - 100vw);\n  grid-row: 2 / 3;\n}\n\n.current-weather .current-weather-display {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  position: relative;\n}\n\n.current-location {\n  font-size: 1.5rem;\n  font-weight: 200;\n  padding: 0;\n  margin: 0;\n}\n\n.current-temp {\n  font-size: 4rem;\n  font-weight: 100;\n  margin-right: -10px;\n}\n\n.current-description {\n  font-size: 1rem;\n  font-weight: 200;\n}\n\n.current-weather-icon {\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 16px;\n  height: 200px;\n}\n\n.icon {\n  height: 95%;\n}\n\n.forecast {\n  margin-right: calc(100% - 100vw);\n  grid-row: 3 / 4;\n  align-self: baseline;\n}\n\n.forecast-display {\n  display: flex;\n  gap: 10px;\n}\n\n.day-display {\n  font-weight: 300;\n  display: flex;\n  flex-direction: column;\n  width: 15vw;\n  align-items: center;\n}\n\n.day-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 60px;\n}\n\n.low-high {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  font-size: 0.9rem;\n  font-weight: 200;\n}\n\n.settings {\n  position: absolute;\n  right: 0;\n  top: 0;\n  background-color: rgba(232, 240, 254, 0.95);\n  width: var(--settings-width);\n  height: 100%;\n  transition: 0.3s;\n  color: var(--cloud-font);\n  z-index: 1;\n}\n\n.settings.hidden {\n  translate: var(--settings-width);\n}\n\n.cog-icon-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  position: relative;\n  margin-top: 8px;\n  width: 25px;\n  height: 30px;\n  background-color: rgb(232, 240, 254);\n  opacity: 0.3;\n  border-radius: 20px 0px 0px 20px;\n  transition: 0.3s;\n  cursor: pointer;\n}\n\n.settings.hidden .cog-icon-container {\n  translate: -25px;\n}\n\n.cog-icon {\n  width: 18px;\n  height: 18px;\n}\n\n.settings-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.settings-container li {\n  display: grid;\n  grid-template: 1fr auto / 1fr 20px;\n}\n\n.settings-container li label {\n  grid-area: 1 / 1 / 2 / 2;\n}\n\n.advanced-search input {\n  grid-area: 2 / 1 / 3 / 2;\n  box-sizing: border-box;\n  appearance: none;\n  border: none;\n  line-height: 1.2rem;\n  border-radius: 10px;\n  width: 100%;\n  padding: 4px 6px;\n  cursor: pointer;\n}\n\n.settings-container li input:focus {\n  outline: 1px solid lightblue;\n}\n\n.settings-container li button {\n  grid-area: 2 / 2 / 3 / 4;\n  appearance: none;\n  border: none;\n  background-color: #ffffff00;\n  cursor: pointer;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: 8px;\n  opacity: 0.5;\n}\n\n.settings-container li button:hover {\n  opacity: 1;\n}\n\n.settings-container .no-display {\n  display: none;\n}\n\n.settings-container h4 {\n  margin: 15px 0 6px;\n}\n\n.reset {\n  display: flex;\n  flex-direction: column;\n}\n.reset button {\n  cursor: pointer;\n  box-sizing: border-box;\n  width: 100px;\n  appearance: none;\n  border: none;\n  padding: 6px 8px;\n  border-radius: 20px;\n  background-color: rgb(170, 37, 37);\n  color: var(--plain);\n  margin: 5px 0;\n  align-self: flex-end;\n  line-height: 1.2rem;\n}\n\n.more-info {\n  position: absolute;\n  bottom: 20px;\n  right: -20px;\n  width: 20px;\n  height: 20px;\n  appearance: none;\n  border: none;\n  background-color: rgba(255, 255, 255, 0);\n  border-radius: 50%;\n  opacity: 0.1;\n  cursor: pointer;\n}\n\n.current-weather:hover .more-info {\n  opacity: 0.5;\n}\n\n.more-info-list {\n  color: var(--plain);\n  font-size: 1rem;\n  font-weight: 200;\n  display: grid;\n  margin: 30px;\n  grid-template-columns: repeat(6, 1fr);\n  border-radius: 20px;\n  max-height: 0;\n  transition: max-height 0.3s;\n  overflow: hidden;\n  gap: 1vw;\n}\n\n.more-info-list li {\n  display: grid;\n  grid-template: 1fr 1fr / 20px 2fr;\n  align-items: center;\n  justify-items: center;\n  background-color: #0b192b2d;\n  border-radius: 20px;\n  padding: 8px;\n}\n\n.more-info-list li img {\n  grid-area: 1 / 1 / 2 / 2;\n  height: 20px;\n  justify-self: left;\n}\n\n.more-info-list li span:nth-child(2) {\n  grid-area: 1 / 2 / 2 / 3;\n  justify-self: left;\n  margin-left: 4px;\n}\n\n.more-info-list li span:nth-child(3) {\n  grid-area: 2 / 1 / 3 / 3;\n  font-weight: 300;\n}\n\n.site-wrapper.cloud .more-info {\n  opacity: 1;\n}\n\n.collapse {\n  max-height: 0;\n}\n\n@media only screen and (max-width: 600px) {\n  :root {\n    --settings-width: 100vw;\n  }\n  .site-wrapper {\n    grid-template-rows: 30px auto 1fr;\n  }\n\n  .forecast-display {\n    flex-direction: column;\n    width: 80vw;\n    gap: 0;\n  }\n\n  .day-display {\n    width: 100%;\n    display: grid;\n    grid-template-columns: 20% 45% 35%;\n    border-bottom: 0.5px solid var(--day-sky1);\n    padding: 8px 0px;\n  }\n\n  .day-icon {\n    height: 30px;\n  }\n\n  .low-high {\n    flex-direction: row;\n    gap: 16px;\n  }\n\n  .more-info-list {\n    width: min(70vw, 300px);\n    grid-template: repeat(6, 40px) / 1fr;\n    gap: 0px;\n    margin-bottom: 16px;\n  }\n  \n  .more-info-list li {\n    width: 100%;\n    display: grid;\n    grid-template: 1fr / 1fr 2fr 2fr;\n    align-items: center;\n    justify-items: center;\n    background-color: #0b192b00;\n    padding: 0;\n  }\n  \n  .more-info-list li img {\n    height: 20px;\n    justify-self: right;\n  }\n  \n  .more-info-list li span:nth-child(2) {\n    justify-self: left;\n    margin-left: 30px;\n  }\n  \n  .more-info-list li span:nth-child(3) {\n    grid-area: 1 / 3 / 2 / 4;\n  }\n\n  .site-wrapper.cloud .more-info-list {\n    background-color: #0b192b2d;\n  }\n\n}\n\n.settings-select li:first-child {\n  display: grid;\n  grid-template: 1fr 2fr / 1fr 1fr;\n  align-items: center;\n  justify-items: center;\n}\n\n.settings-select li label {\n  grid-area: 1 / 1 / 2 / -1;\n}\n\n.settings-select .imperial {\n  grid-area: 2 / 1 / 3 / 2;\n  font-size: 0.8rem;\n  z-index: 1;\n  pointer-events: none;\n  color: var(--plain);\n}\n\n.settings-select:has(#units-toggle:checked) .metric {\n  color: var(--plain);\n}\n\n.settings-select:has(#units-toggle:checked) .imperial {\n  color: var(--cloud-font);\n}\n\n#units-toggle {\n  width: 100%;\n  height: 30px;\n  background-color: white;\n  border-radius: 30px;\n  grid-area: 2 / 1 / 3 / -1;\n  position: relative;\n  appearance: none;\n  cursor: pointer;\n}\n\n#units-toggle:before {\n  content: '';\n  box-sizing: border-box;\n  background-color: var(--day-sky1);\n  width: 50%;\n  height: 26px;\n  position: absolute;\n  border-radius: 30px;\n  top:2px;\n  left: 2px;\n  transition: 0.3s;\n}\n\n#units-toggle:checked:before {\n  translate: 95%;\n}\n\n.settings-select .metric {\n  grid-area: 2 / 2 / 3 / 3;\n  font-size: 0.8rem;\n  z-index: 1;\n  pointer-events: none;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:[":root {\n  --settings-width: 300px;\n\n  --background: #282a36;\n  --start-screen-bg: #6273a4f8;\n  --subtle: #6272a4;\n  --pink: #ff79c6;\n  --green: #50fa7b;\n  --yellow: #f1fa8c;\n  --blue: #8be9fd;\n  --plain: #f8f8f2;\n\n  --day-sky1: #4687d8;\n  --day-sky2: #7fafde;\n\n  --cloud1: #f5f5f7;\n  --cloud2: #a1b5c7;\n  --cloud-font: #3b3b3b;\n\n  --rain1: #51606b;\n  --rain2: #97999d;\n\n  --night1: #0b192b;\n  --night2: #013a60;\n  --night-cloud: hsl(204, 24%, 30%);\n}\n\n* {\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  height: 100%;\n}\n\nbody {\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  margin: 0;\n  padding: 0;\n  min-height: 100%;\n  width: 100%;\n  background-color: #013a6000;\n  color: var(--plain);\n}\n\n.site-wrapper {\n  position: relative;\n  min-height: 100vh;\n  width: 100%;\n  display: grid;\n  grid-template-rows: min(75px, 8%) auto 1fr;\n  align-items: center;\n  justify-items: center;\n  overflow-x: hidden;\n}\n\n.gradient {\n  position: absolute;\n  content: '';\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: -1;\n  opacity: 0;\n  transition: opacity 0.5s;\n}\n\n.gradient.day {\n  opacity: 1;\n  background-image: linear-gradient(var(--day-sky1), var(--day-sky2));\n}\n\n.gradient.cloud {\n  background-image: linear-gradient(var(--cloud1), var(--cloud2));\n}\n\n.site-wrapper.cloud {\n  color: var(--cloud-font);\n}\n\n.gradient.rain {\n  background-image: linear-gradient(var(--rain1), var(--rain2));\n}\n\n.gradient.night {\n  background-image: linear-gradient(var(--night1), var(--night2));\n}\n\n.gradient.night-cloud {\n  background-image: linear-gradient(var(--night1), var(--night-cloud), var(--night2));\n\n}\n\n.location-input {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  margin: auto;\n  height: min-content;\n  width: max-content;\n}\n\n.location-input.post {\n  top: 8px;\n  left: 8px;\n  bottom: auto;\n  right: auto;\n  display: flex;\n  justify-content: center;\n  z-index: 1;\n}\n\nul {\n  list-style: none;\n}\n\n#loc {\n  box-sizing: border-box;\n  appearance: none;\n  border: none;\n  line-height: 1.2rem;\n  width: 100%;\n  border-radius: 20px;\n  padding: 4px 8px;\n  font-size: 90%;\n  background-color: rgb(232, 240, 254);\n}\n\n#loc:focus {\n  outline: 1px solid lightblue;\n}\n\n.loc-input-field {\n  min-width: 150px;\n  position: relative;\n  transition: all 0.3s;\n}\n\n.location-input.post .loc-input-field {\n  min-width: 30px;\n  container-type: inline-size;\n  opacity: 0.3;\n}\n\n.location-input.post .loc-input-field:hover,\n.location-input.post .loc-input-field:has(#loc:focus) {\n  min-width: 150px;\n  opacity: 1;\n}\n\n.loc-input-field:hover .suggestion-box-container,\n.loc-input-field:has(#loc:focus) .suggestion-box-container {\n  display: block;\n}\n\n\n.search-icon {\n  background-color: rgba(232, 240, 254, 0);\n  position: absolute;\n  height: 18px;\n  right: 5px;\n  top: 4px;\n}\n\n.search-icon img {\n  height: 100%;\n  width: 100%;\n}\n\n@container (max-width: 50px) {\n  .search-icon {\n    position: absolute;\n    width: 30px;\n    height: 1.2rem;\n    top:0;\n    right:0;\n    left:0;\n    bottom: 0;\n    margin: auto;\n    border-radius: 20px;\n  }\n  #loc::placeholder {\n    opacity: 0;\n  }\n  \n  .loc-input-field #loc {\n      color: rgba(0, 0, 0, 0);\n    }\n}\n\n.suggestion-box-container {\n  position: relative;\n  display: none;\n}\n\n.suggestion-box {\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  width:200px;\n  border-radius: 10px;\n  overflow: hidden;\n}\n\n.loc-suggestion {\n  width: 100%;\n  background-color: white;\n  color: black;\n  padding: 5px 8px;\n  appearance: none;\n  border: none;\n  text-align: left;\n}\n\n.loc-suggestion:focus {\n  outline: none;\n  background-color: hsl(210, 59%, 90%);\n  border-left: 3px solid var(--day-sky2);\n}\n\n.loc-suggestion:hover {\n  background-color: hsl(210, 59%, 90%);\n}\n\n.current-weather {\n  margin-right: calc(100% - 100vw);\n  grid-row: 2 / 3;\n}\n\n.current-weather .current-weather-display {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  position: relative;\n}\n\n.current-location {\n  font-size: 1.5rem;\n  font-weight: 200;\n  padding: 0;\n  margin: 0;\n}\n\n.current-temp {\n  font-size: 4rem;\n  font-weight: 100;\n  margin-right: -10px;\n}\n\n.current-description {\n  font-size: 1rem;\n  font-weight: 200;\n}\n\n.current-weather-icon {\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 16px;\n  height: 200px;\n}\n\n.icon {\n  height: 95%;\n}\n\n.forecast {\n  margin-right: calc(100% - 100vw);\n  grid-row: 3 / 4;\n  align-self: baseline;\n}\n\n.forecast-display {\n  display: flex;\n  gap: 10px;\n}\n\n.day-display {\n  font-weight: 300;\n  display: flex;\n  flex-direction: column;\n  width: 15vw;\n  align-items: center;\n}\n\n.day-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 60px;\n}\n\n.low-high {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  font-size: 0.9rem;\n  font-weight: 200;\n}\n\n.settings {\n  position: absolute;\n  right: 0;\n  top: 0;\n  background-color: rgba(232, 240, 254, 0.95);\n  width: var(--settings-width);\n  height: 100%;\n  transition: 0.3s;\n  color: var(--cloud-font);\n  z-index: 1;\n}\n\n.settings.hidden {\n  translate: var(--settings-width);\n}\n\n.cog-icon-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  position: relative;\n  margin-top: 8px;\n  width: 25px;\n  height: 30px;\n  background-color: rgb(232, 240, 254);\n  opacity: 0.3;\n  border-radius: 20px 0px 0px 20px;\n  transition: 0.3s;\n  cursor: pointer;\n}\n\n.settings.hidden .cog-icon-container {\n  translate: -25px;\n}\n\n.cog-icon {\n  width: 18px;\n  height: 18px;\n}\n\n.settings-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.settings-container li {\n  display: grid;\n  grid-template: 1fr auto / 1fr 20px;\n}\n\n.settings-container li label {\n  grid-area: 1 / 1 / 2 / 2;\n}\n\n.advanced-search input {\n  grid-area: 2 / 1 / 3 / 2;\n  box-sizing: border-box;\n  appearance: none;\n  border: none;\n  line-height: 1.2rem;\n  border-radius: 10px;\n  width: 100%;\n  padding: 4px 6px;\n  cursor: pointer;\n}\n\n.settings-container li input:focus {\n  outline: 1px solid lightblue;\n}\n\n.settings-container li button {\n  grid-area: 2 / 2 / 3 / 4;\n  appearance: none;\n  border: none;\n  background-color: #ffffff00;\n  cursor: pointer;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: 8px;\n  opacity: 0.5;\n}\n\n.settings-container li button:hover {\n  opacity: 1;\n}\n\n.settings-container .no-display {\n  display: none;\n}\n\n.settings-container h4 {\n  margin: 15px 0 6px;\n}\n\n.reset {\n  display: flex;\n  flex-direction: column;\n}\n.reset button {\n  cursor: pointer;\n  box-sizing: border-box;\n  width: 100px;\n  appearance: none;\n  border: none;\n  padding: 6px 8px;\n  border-radius: 20px;\n  background-color: rgb(170, 37, 37);\n  color: var(--plain);\n  margin: 5px 0;\n  align-self: flex-end;\n  line-height: 1.2rem;\n}\n\n.more-info {\n  position: absolute;\n  bottom: 20px;\n  right: -20px;\n  width: 20px;\n  height: 20px;\n  appearance: none;\n  border: none;\n  background-color: rgba(255, 255, 255, 0);\n  border-radius: 50%;\n  opacity: 0.1;\n  cursor: pointer;\n}\n\n.current-weather:hover .more-info {\n  opacity: 0.5;\n}\n\n.more-info-list {\n  color: var(--plain);\n  font-size: 1rem;\n  font-weight: 200;\n  display: grid;\n  margin: 30px;\n  grid-template-columns: repeat(6, 1fr);\n  border-radius: 20px;\n  max-height: 0;\n  transition: max-height 0.3s;\n  overflow: hidden;\n  gap: 1vw;\n}\n\n.more-info-list li {\n  display: grid;\n  grid-template: 1fr 1fr / 20px 2fr;\n  align-items: center;\n  justify-items: center;\n  background-color: #0b192b2d;\n  border-radius: 20px;\n  padding: 8px;\n}\n\n.more-info-list li img {\n  grid-area: 1 / 1 / 2 / 2;\n  height: 20px;\n  justify-self: left;\n}\n\n.more-info-list li span:nth-child(2) {\n  grid-area: 1 / 2 / 2 / 3;\n  justify-self: left;\n  margin-left: 4px;\n}\n\n.more-info-list li span:nth-child(3) {\n  grid-area: 2 / 1 / 3 / 3;\n  font-weight: 300;\n}\n\n.site-wrapper.cloud .more-info {\n  opacity: 1;\n}\n\n.collapse {\n  max-height: 0;\n}\n\n@media only screen and (max-width: 600px) {\n  :root {\n    --settings-width: 100vw;\n  }\n  .site-wrapper {\n    grid-template-rows: 30px auto 1fr;\n  }\n\n  .forecast-display {\n    flex-direction: column;\n    width: 80vw;\n    gap: 0;\n  }\n\n  .day-display {\n    width: 100%;\n    display: grid;\n    grid-template-columns: 20% 45% 35%;\n    border-bottom: 0.5px solid var(--day-sky1);\n    padding: 8px 0px;\n  }\n\n  .day-icon {\n    height: 30px;\n  }\n\n  .low-high {\n    flex-direction: row;\n    gap: 16px;\n  }\n\n  .more-info-list {\n    width: min(70vw, 300px);\n    grid-template: repeat(6, 40px) / 1fr;\n    gap: 0px;\n    margin-bottom: 16px;\n  }\n  \n  .more-info-list li {\n    width: 100%;\n    display: grid;\n    grid-template: 1fr / 1fr 2fr 2fr;\n    align-items: center;\n    justify-items: center;\n    background-color: #0b192b00;\n    padding: 0;\n  }\n  \n  .more-info-list li img {\n    height: 20px;\n    justify-self: right;\n  }\n  \n  .more-info-list li span:nth-child(2) {\n    justify-self: left;\n    margin-left: 30px;\n  }\n  \n  .more-info-list li span:nth-child(3) {\n    grid-area: 1 / 3 / 2 / 4;\n  }\n\n  .site-wrapper.cloud .more-info-list {\n    background-color: #0b192b2d;\n  }\n\n}\n\n.settings-select li:first-child {\n  display: grid;\n  grid-template: 1fr 2fr / 1fr 1fr;\n  align-items: center;\n  justify-items: center;\n}\n\n.settings-select li label {\n  grid-area: 1 / 1 / 2 / -1;\n}\n\n.settings-select .imperial {\n  grid-area: 2 / 1 / 3 / 2;\n  font-size: 0.8rem;\n  z-index: 1;\n  pointer-events: none;\n  color: var(--plain);\n}\n\n.settings-select:has(#units-toggle:checked) .metric {\n  color: var(--plain);\n}\n\n.settings-select:has(#units-toggle:checked) .imperial {\n  color: var(--cloud-font);\n}\n\n#units-toggle {\n  width: 100%;\n  height: 30px;\n  background-color: white;\n  border-radius: 30px;\n  grid-area: 2 / 1 / 3 / -1;\n  position: relative;\n  appearance: none;\n  cursor: pointer;\n}\n\n#units-toggle:before {\n  content: '';\n  box-sizing: border-box;\n  background-color: var(--day-sky1);\n  width: 50%;\n  height: 26px;\n  position: absolute;\n  border-radius: 30px;\n  top:2px;\n  left: 2px;\n  transition: 0.3s;\n}\n\n#units-toggle:checked:before {\n  translate: 95%;\n}\n\n.settings-select .metric {\n  grid-area: 2 / 2 / 3 / 3;\n  font-size: 0.8rem;\n  z-index: 1;\n  pointer-events: none;\n}"],sourceRoot:""}]);const s=o},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",a=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),a&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),a&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,a,i,r){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(a)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(o[c]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);a&&o[d[0]]||(void 0!==r&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=r),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),r="/*# ".concat(i," */"),o=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(o).concat([r]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,a=0;a<e.length;a++)if(e[a].identifier===n){t=a;break}return t}function a(n,a){for(var r={},o=[],s=0;s<n.length;s++){var c=n[s],l=a.base?c[0]+a.base:c[0],d=r[l]||0,A="".concat(l," ").concat(d);r[l]=d+1;var u=t(A),g={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(g);else{var m=i(g,a);a.byIndex=s,e.splice(s,0,{identifier:A,updater:m,references:1})}o.push(A)}return o}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var r=a(n=n||[],i=i||{});return function(n){n=n||[];for(var o=0;o<r.length;o++){var s=t(r[o]);e[s].references--}for(var c=a(n,i),l=0;l<r.length;l++){var d=t(r[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}r=c}}},777:n=>{var e={};n.exports=function(n,t){var a=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,i&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(a,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(a){var i=e[a];if(void 0!==i)return i.exports;var r=e[a]={id:a,exports:{}};return n[a](r,r.exports,t),r.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var a in e)t.o(e,a)&&!t.o(n,a)&&Object.defineProperty(n,a,{enumerable:!0,get:e[a]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var a=e.getElementsByTagName("script");a.length&&(n=a[a.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.nc=void 0,(()=>{function n(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function e(n){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},e(n)}function a(t){return n(1,arguments),t instanceof Date||"object"===e(t)&&"[object Date]"===Object.prototype.toString.call(t)}function i(n){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},i(n)}function r(e){n(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===i(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function o(e){if(n(1,arguments),!a(e)&&"number"!=typeof e)return!1;var t=r(e);return!isNaN(Number(t))}function s(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function c(e,t){n(2,arguments);var a=r(e).getTime(),i=s(t);return new Date(a+i)}function l(e,t){n(2,arguments);var a=s(t);return c(e,-a)}var d=864e5;function A(e){n(1,arguments);var t=1,a=r(e),i=a.getUTCDay(),o=(i<t?7:0)+i-t;return a.setUTCDate(a.getUTCDate()-o),a.setUTCHours(0,0,0,0),a}function u(e){n(1,arguments);var t=r(e),a=t.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(a+1,0,4),i.setUTCHours(0,0,0,0);var o=A(i),s=new Date(0);s.setUTCFullYear(a,0,4),s.setUTCHours(0,0,0,0);var c=A(s);return t.getTime()>=o.getTime()?a+1:t.getTime()>=c.getTime()?a:a-1}function g(e){n(1,arguments);var t=u(e),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var i=A(a);return i}var m=6048e5,h={};function p(){return h}function f(e,t){var a,i,o,c,l,d,A,u;n(1,arguments);var g=p(),m=s(null!==(a=null!==(i=null!==(o=null!==(c=null==t?void 0:t.weekStartsOn)&&void 0!==c?c:null==t||null===(l=t.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==o?o:g.weekStartsOn)&&void 0!==i?i:null===(A=g.locale)||void 0===A||null===(u=A.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==a?a:0);if(!(m>=0&&m<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var h=r(e),f=h.getUTCDay(),C=(f<m?7:0)+f-m;return h.setUTCDate(h.getUTCDate()-C),h.setUTCHours(0,0,0,0),h}function C(e,t){var a,i,o,c,l,d,A,u;n(1,arguments);var g=r(e),m=g.getUTCFullYear(),h=p(),C=s(null!==(a=null!==(i=null!==(o=null!==(c=null==t?void 0:t.firstWeekContainsDate)&&void 0!==c?c:null==t||null===(l=t.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:h.firstWeekContainsDate)&&void 0!==i?i:null===(A=h.locale)||void 0===A||null===(u=A.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:1);if(!(C>=1&&C<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var E=new Date(0);E.setUTCFullYear(m+1,0,C),E.setUTCHours(0,0,0,0);var b=f(E,t),B=new Date(0);B.setUTCFullYear(m,0,C),B.setUTCHours(0,0,0,0);var v=f(B,t);return g.getTime()>=b.getTime()?m+1:g.getTime()>=v.getTime()?m:m-1}function E(e,t){var a,i,r,o,c,l,d,A;n(1,arguments);var u=p(),g=s(null!==(a=null!==(i=null!==(r=null!==(o=null==t?void 0:t.firstWeekContainsDate)&&void 0!==o?o:null==t||null===(c=t.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==r?r:u.firstWeekContainsDate)&&void 0!==i?i:null===(d=u.locale)||void 0===d||null===(A=d.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==a?a:1),m=C(e,t),h=new Date(0);h.setUTCFullYear(m,0,g),h.setUTCHours(0,0,0,0);var E=f(h,t);return E}var b=6048e5;function B(n,e){for(var t=n<0?"-":"",a=Math.abs(n).toString();a.length<e;)a="0"+a;return t+a}const v=function(n,e){var t=n.getUTCFullYear(),a=t>0?t:1-t;return B("yy"===e?a%100:a,e.length)},w=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):B(t+1,2)},y=function(n,e){return B(n.getUTCDate(),e.length)},x=function(n,e){return B(n.getUTCHours()%12||12,e.length)},k=function(n,e){return B(n.getUTCHours(),e.length)},T=function(n,e){return B(n.getUTCMinutes(),e.length)},S=function(n,e){return B(n.getUTCSeconds(),e.length)},M=function(n,e){var t=e.length,a=n.getUTCMilliseconds();return B(Math.floor(a*Math.pow(10,t-3)),e.length)};var I={G:function(n,e,t){var a=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(a,{width:"abbreviated"});case"GGGGG":return t.era(a,{width:"narrow"});default:return t.era(a,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var a=n.getUTCFullYear(),i=a>0?a:1-a;return t.ordinalNumber(i,{unit:"year"})}return v(n,e)},Y:function(n,e,t,a){var i=C(n,a),r=i>0?i:1-i;return"YY"===e?B(r%100,2):"Yo"===e?t.ordinalNumber(r,{unit:"year"}):B(r,e.length)},R:function(n,e){return B(u(n),e.length)},u:function(n,e){return B(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var a=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(a);case"QQ":return B(a,2);case"Qo":return t.ordinalNumber(a,{unit:"quarter"});case"QQQ":return t.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(a,{width:"narrow",context:"formatting"});default:return t.quarter(a,{width:"wide",context:"formatting"})}},q:function(n,e,t){var a=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(a);case"qq":return B(a,2);case"qo":return t.ordinalNumber(a,{unit:"quarter"});case"qqq":return t.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(a,{width:"narrow",context:"standalone"});default:return t.quarter(a,{width:"wide",context:"standalone"})}},M:function(n,e,t){var a=n.getUTCMonth();switch(e){case"M":case"MM":return w(n,e);case"Mo":return t.ordinalNumber(a+1,{unit:"month"});case"MMM":return t.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(a,{width:"narrow",context:"formatting"});default:return t.month(a,{width:"wide",context:"formatting"})}},L:function(n,e,t){var a=n.getUTCMonth();switch(e){case"L":return String(a+1);case"LL":return B(a+1,2);case"Lo":return t.ordinalNumber(a+1,{unit:"month"});case"LLL":return t.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(a,{width:"narrow",context:"standalone"});default:return t.month(a,{width:"wide",context:"standalone"})}},w:function(e,t,a,i){var o=function(e,t){n(1,arguments);var a=r(e),i=f(a,t).getTime()-E(a,t).getTime();return Math.round(i/b)+1}(e,i);return"wo"===t?a.ordinalNumber(o,{unit:"week"}):B(o,t.length)},I:function(e,t,a){var i=function(e){n(1,arguments);var t=r(e),a=A(t).getTime()-g(t).getTime();return Math.round(a/m)+1}(e);return"Io"===t?a.ordinalNumber(i,{unit:"week"}):B(i,t.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):y(n,e)},D:function(e,t,a){var i=function(e){n(1,arguments);var t=r(e),a=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var i=t.getTime(),o=a-i;return Math.floor(o/d)+1}(e);return"Do"===t?a.ordinalNumber(i,{unit:"dayOfYear"}):B(i,t.length)},E:function(n,e,t){var a=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(a,{width:"short",context:"formatting"});default:return t.day(a,{width:"wide",context:"formatting"})}},e:function(n,e,t,a){var i=n.getUTCDay(),r=(i-a.weekStartsOn+8)%7||7;switch(e){case"e":return String(r);case"ee":return B(r,2);case"eo":return t.ordinalNumber(r,{unit:"day"});case"eee":return t.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(i,{width:"short",context:"formatting"});default:return t.day(i,{width:"wide",context:"formatting"})}},c:function(n,e,t,a){var i=n.getUTCDay(),r=(i-a.weekStartsOn+8)%7||7;switch(e){case"c":return String(r);case"cc":return B(r,e.length);case"co":return t.ordinalNumber(r,{unit:"day"});case"ccc":return t.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(i,{width:"narrow",context:"standalone"});case"cccccc":return t.day(i,{width:"short",context:"standalone"});default:return t.day(i,{width:"wide",context:"standalone"})}},i:function(n,e,t){var a=n.getUTCDay(),i=0===a?7:a;switch(e){case"i":return String(i);case"ii":return B(i,e.length);case"io":return t.ordinalNumber(i,{unit:"day"});case"iii":return t.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(a,{width:"short",context:"formatting"});default:return t.day(a,{width:"wide",context:"formatting"})}},a:function(n,e,t){var a=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(a,{width:"narrow",context:"formatting"});default:return t.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(n,e,t){var a,i=n.getUTCHours();switch(a=12===i?"noon":0===i?"midnight":i/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(a,{width:"narrow",context:"formatting"});default:return t.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(n,e,t){var a,i=n.getUTCHours();switch(a=i>=17?"evening":i>=12?"afternoon":i>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(a,{width:"narrow",context:"formatting"});default:return t.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var a=n.getUTCHours()%12;return 0===a&&(a=12),t.ordinalNumber(a,{unit:"hour"})}return x(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):k(n,e)},K:function(n,e,t){var a=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(a,{unit:"hour"}):B(a,e.length)},k:function(n,e,t){var a=n.getUTCHours();return 0===a&&(a=24),"ko"===e?t.ordinalNumber(a,{unit:"hour"}):B(a,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):T(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):S(n,e)},S:function(n,e){return M(n,e)},X:function(n,e,t,a){var i=(a._originalDate||n).getTimezoneOffset();if(0===i)return"Z";switch(e){case"X":return D(i);case"XXXX":case"XX":return U(i);default:return U(i,":")}},x:function(n,e,t,a){var i=(a._originalDate||n).getTimezoneOffset();switch(e){case"x":return D(i);case"xxxx":case"xx":return U(i);default:return U(i,":")}},O:function(n,e,t,a){var i=(a._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+N(i,":");default:return"GMT"+U(i,":")}},z:function(n,e,t,a){var i=(a._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+N(i,":");default:return"GMT"+U(i,":")}},t:function(n,e,t,a){var i=a._originalDate||n;return B(Math.floor(i.getTime()/1e3),e.length)},T:function(n,e,t,a){return B((a._originalDate||n).getTime(),e.length)}};function N(n,e){var t=n>0?"-":"+",a=Math.abs(n),i=Math.floor(a/60),r=a%60;if(0===r)return t+String(i);var o=e||"";return t+String(i)+o+B(r,2)}function D(n,e){return n%60==0?(n>0?"-":"+")+B(Math.abs(n)/60,2):U(n,e)}function U(n,e){var t=e||"",a=n>0?"-":"+",i=Math.abs(n);return a+B(Math.floor(i/60),2)+t+B(i%60,2)}const Y=I;var W=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},L=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const P={p:L,P:function(n,e){var t,a=n.match(/(P+)(p+)?/)||[],i=a[1],r=a[2];if(!r)return W(n,e);switch(i){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",W(i,e)).replace("{{time}}",L(r,e))}};function j(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var z=["D","DD"],O=["YY","YYYY"];function R(n){return-1!==z.indexOf(n)}function G(n){return-1!==O.indexOf(n)}function F(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var q={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function H(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,a=n.formats[t]||n.formats[n.defaultWidth];return a}}const Z={date:H({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:H({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:H({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var $={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function X(n){return function(e,t){var a;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var i=n.defaultFormattingWidth||n.defaultWidth,r=null!=t&&t.width?String(t.width):i;a=n.formattingValues[r]||n.formattingValues[i]}else{var o=n.defaultWidth,s=null!=t&&t.width?String(t.width):n.defaultWidth;a=n.values[s]||n.values[o]}return a[n.argumentCallback?n.argumentCallback(e):e]}}const K={ordinalNumber:function(n,e){var t=Number(n),a=t%100;if(a>20||a<10)switch(a%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:X({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:X({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:X({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:X({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:X({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Q(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=t.width,i=a&&n.matchPatterns[a]||n.matchPatterns[n.defaultMatchWidth],r=e.match(i);if(!r)return null;var o,s=r[0],c=a&&n.parsePatterns[a]||n.parsePatterns[n.defaultParseWidth],l=Array.isArray(c)?J(c,(function(n){return n.test(s)})):V(c,(function(n){return n.test(s)}));o=n.valueCallback?n.valueCallback(l):l,o=t.valueCallback?t.valueCallback(o):o;var d=e.slice(s.length);return{value:o,rest:d}}}function V(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function J(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}var _,nn={ordinalNumber:(_={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(_.matchPattern);if(!t)return null;var a=t[0],i=n.match(_.parsePattern);if(!i)return null;var r=_.valueCallback?_.valueCallback(i[0]):i[0];r=e.valueCallback?e.valueCallback(r):r;var o=n.slice(a.length);return{value:r,rest:o}}),era:Q({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Q({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:Q({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Q({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Q({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const en={code:"en-US",formatDistance:function(n,e,t){var a,i=q[n];return a="string"==typeof i?i:1===e?i.one:i.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+a:a+" ago":a},formatLong:Z,formatRelative:function(n,e,t,a){return $[n]},localize:K,match:nn,options:{weekStartsOn:0,firstWeekContainsDate:1}};var tn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,an=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,rn=/^'([^]*?)'?$/,on=/''/g,sn=/[a-zA-Z]/;function cn(e,t,a){var i,c,d,A,u,g,m,h,f,C,E,b,B,v,w,y,x,k;n(2,arguments);var T=String(t),S=p(),M=null!==(i=null!==(c=null==a?void 0:a.locale)&&void 0!==c?c:S.locale)&&void 0!==i?i:en,I=s(null!==(d=null!==(A=null!==(u=null!==(g=null==a?void 0:a.firstWeekContainsDate)&&void 0!==g?g:null==a||null===(m=a.locale)||void 0===m||null===(h=m.options)||void 0===h?void 0:h.firstWeekContainsDate)&&void 0!==u?u:S.firstWeekContainsDate)&&void 0!==A?A:null===(f=S.locale)||void 0===f||null===(C=f.options)||void 0===C?void 0:C.firstWeekContainsDate)&&void 0!==d?d:1);if(!(I>=1&&I<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var N=s(null!==(E=null!==(b=null!==(B=null!==(v=null==a?void 0:a.weekStartsOn)&&void 0!==v?v:null==a||null===(w=a.locale)||void 0===w||null===(y=w.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==B?B:S.weekStartsOn)&&void 0!==b?b:null===(x=S.locale)||void 0===x||null===(k=x.options)||void 0===k?void 0:k.weekStartsOn)&&void 0!==E?E:0);if(!(N>=0&&N<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!M.localize)throw new RangeError("locale must contain localize property");if(!M.formatLong)throw new RangeError("locale must contain formatLong property");var D=r(e);if(!o(D))throw new RangeError("Invalid time value");var U=j(D),W=l(D,U),L={firstWeekContainsDate:I,weekStartsOn:N,locale:M,_originalDate:D},z=T.match(an).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,P[e])(n,M.formatLong):n})).join("").match(tn).map((function(n){if("''"===n)return"'";var i=n[0];if("'"===i)return ln(n);var r=Y[i];if(r)return null!=a&&a.useAdditionalWeekYearTokens||!G(n)||F(n,t,String(e)),null!=a&&a.useAdditionalDayOfYearTokens||!R(n)||F(n,t,String(e)),r(W,n,M.localize,L);if(i.match(sn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return n})).join("");return z}function ln(n){var e=n.match(rn);return e?e[1].replace(on,"'"):n}function dn(e){n(1,arguments);var t=s(e);return r(1e3*t)}Math.pow(10,8);var An=36e5;function un(e,t){var a;n(1,arguments);var i=s(null!==(a=null==t?void 0:t.additionalDigits)&&void 0!==a?a:2);if(2!==i&&1!==i&&0!==i)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var r,o=fn(e);if(o.date){var c=Cn(o.date,i);r=En(c.restDateString,c.year)}if(!r||isNaN(r.getTime()))return new Date(NaN);var l,d=r.getTime(),A=0;if(o.time&&(A=Bn(o.time),isNaN(A)))return new Date(NaN);if(!o.timezone){var u=new Date(d+A),g=new Date(0);return g.setFullYear(u.getUTCFullYear(),u.getUTCMonth(),u.getUTCDate()),g.setHours(u.getUTCHours(),u.getUTCMinutes(),u.getUTCSeconds(),u.getUTCMilliseconds()),g}return l=wn(o.timezone),isNaN(l)?new Date(NaN):new Date(d+A+l)}var gn={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},mn=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,hn=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,pn=/^([+-])(\d{2})(?::?(\d{2}))?$/;function fn(n){var e,t={},a=n.split(gn.dateTimeDelimiter);if(a.length>2)return t;if(/:/.test(a[0])?e=a[0]:(t.date=a[0],e=a[1],gn.timeZoneDelimiter.test(t.date)&&(t.date=n.split(gn.timeZoneDelimiter)[0],e=n.substr(t.date.length,n.length))),e){var i=gn.timezone.exec(e);i?(t.time=e.replace(i[1],""),t.timezone=i[1]):t.time=e}return t}function Cn(n,e){var t=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),a=n.match(t);if(!a)return{year:NaN,restDateString:""};var i=a[1]?parseInt(a[1]):null,r=a[2]?parseInt(a[2]):null;return{year:null===r?i:100*r,restDateString:n.slice((a[1]||a[2]).length)}}function En(n,e){if(null===e)return new Date(NaN);var t=n.match(mn);if(!t)return new Date(NaN);var a=!!t[4],i=bn(t[1]),r=bn(t[2])-1,o=bn(t[3]),s=bn(t[4]),c=bn(t[5])-1;if(a)return function(n,e,t){return e>=1&&e<=53&&t>=0&&t<=6}(0,s,c)?function(n,e,t){var a=new Date(0);a.setUTCFullYear(n,0,4);var i=7*(e-1)+t+1-(a.getUTCDay()||7);return a.setUTCDate(a.getUTCDate()+i),a}(e,s,c):new Date(NaN);var l=new Date(0);return function(n,e,t){return e>=0&&e<=11&&t>=1&&t<=(yn[e]||(xn(n)?29:28))}(e,r,o)&&function(n,e){return e>=1&&e<=(xn(n)?366:365)}(e,i)?(l.setUTCFullYear(e,r,Math.max(i,o)),l):new Date(NaN)}function bn(n){return n?parseInt(n):1}function Bn(n){var e=n.match(hn);if(!e)return NaN;var t=vn(e[1]),a=vn(e[2]),i=vn(e[3]);return function(n,e,t){return 24===n?0===e&&0===t:t>=0&&t<60&&e>=0&&e<60&&n>=0&&n<25}(t,a,i)?t*An+6e4*a+1e3*i:NaN}function vn(n){return n&&parseFloat(n.replace(",","."))||0}function wn(n){if("Z"===n)return 0;var e=n.match(pn);if(!e)return 0;var t="+"===e[1]?-1:1,a=parseInt(e[2]),i=e[3]&&parseInt(e[3])||0;return function(n,e){return e>=0&&e<=59}(0,i)?t*(a*An+6e4*i):NaN}var yn=[31,null,31,30,31,30,31,31,30,31,30,31];function xn(n){return n%400==0||n%4==0&&n%100!=0}function kn(e){n(1,arguments);var t=r(e);return t.setHours(0,0,0,0),t}function Tn(e,t){n(2,arguments);var a=kn(e),i=kn(t);return a.getTime()===i.getTime()}function Sn(e){return n(1,arguments),Tn(e,Date.now())}function Mn(e){n(1,arguments);var t=r(e),a=t.getDay();return a}const In=document.createElement("li"),Nn=document.createElement("label"),Dn=document.createElement("input"),Un=document.createElement("datalist");Nn.setAttribute("for","country-select"),Nn.innerText="Country",Dn.setAttribute("type","text"),Dn.setAttribute("name","country-select"),Dn.setAttribute("id","country-select"),Dn.setAttribute("list","countries"),Un.setAttribute("id","countries"),In.append(Nn,Dn,Un);const Yn={AF:"Afghanistan",AL:"Albania",DZ:"Algeria",AS:"American Samoa",AD:"Andorra",AO:"Angola",AI:"Anguilla",AQ:"Antarctica",AG:"Antigua and Barbuda",AR:"Argentina",AM:"Armenia",AW:"Aruba",AU:"Australia",AT:"Austria",AZ:"Azerbaijan",BS:"Bahamas (the)",BH:"Bahrain",BD:"Bangladesh",BB:"Barbados",BY:"Belarus",BE:"Belgium",BZ:"Belize",BJ:"Benin",BM:"Bermuda",BT:"Bhutan",BO:"Bolivia (Plurinational State of)",BQ:"Bonaire, Sint Eustatius and Saba",BA:"Bosnia and Herzegovina",BW:"Botswana",BV:"Bouvet Island",BR:"Brazil",IO:"British Indian Ocean Territory (the)",BN:"Brunei Darussalam",BG:"Bulgaria",BF:"Burkina Faso",BI:"Burundi",CV:"Cabo Verde",KH:"Cambodia",CM:"Cameroon",CA:"Canada",KY:"Cayman Islands (the)",CF:"Central African Republic (the)",TD:"Chad",CL:"Chile",CN:"China",CX:"Christmas Island",CC:"Cocos (Keeling) Islands (the)",CO:"Colombia",KM:"Comoros (the)",CD:"Congo (the Democratic Republic of the)",CG:"Congo (the)",CK:"Cook Islands (the)",CR:"Costa Rica",HR:"Croatia",CU:"Cuba",CW:"Curaçao",CY:"Cyprus",CZ:"Czechia",CI:"Côte d'Ivoire",DK:"Denmark",DJ:"Djibouti",DM:"Dominica",DO:"Dominican Republic (the)",EC:"Ecuador",EG:"Egypt",SV:"El Salvador",GQ:"Equatorial Guinea",ER:"Eritrea",EE:"Estonia",SZ:"Eswatini",ET:"Ethiopia",FK:"Falkland Islands (the) [Malvinas]",FO:"Faroe Islands (the)",FJ:"Fiji",FI:"Finland",FR:"France",GF:"French Guiana",PF:"French Polynesia",TF:"French Southern Territories (the)",GA:"Gabon",GM:"Gambia (the)",GE:"Georgia",DE:"Germany",GH:"Ghana",GI:"Gibraltar",GR:"Greece",GL:"Greenland",GD:"Grenada",GP:"Guadeloupe",GU:"Guam",GT:"Guatemala",GG:"Guernsey",GN:"Guinea",GW:"Guinea-Bissau",GY:"Guyana",HT:"Haiti",HM:"Heard Island and McDonald Islands",VA:"Holy See (the)",HN:"Honduras",HK:"Hong Kong",HU:"Hungary",IS:"Iceland",IN:"India",ID:"Indonesia",IR:"Iran (Islamic Republic of)",IQ:"Iraq",IE:"Ireland",IM:"Isle of Man",IL:"Israel",IT:"Italy",JM:"Jamaica",JP:"Japan",JE:"Jersey",JO:"Jordan",KZ:"Kazakhstan",KE:"Kenya",KI:"Kiribati",KP:"Korea (the Democratic People's Republic of)",KR:"Korea (the Republic of)",KW:"Kuwait",KG:"Kyrgyzstan",LA:"Lao People's Democratic Republic (the)",LV:"Latvia",LB:"Lebanon",LS:"Lesotho",LR:"Liberia",LY:"Libya",LI:"Liechtenstein",LT:"Lithuania",LU:"Luxembourg",MO:"Macao",MG:"Madagascar",MW:"Malawi",MY:"Malaysia",MV:"Maldives",ML:"Mali",MT:"Malta",MH:"Marshall Islands (the)",MQ:"Martinique",MR:"Mauritania",MU:"Mauritius",YT:"Mayotte",MX:"Mexico",FM:"Micronesia (Federated States of)",MD:"Moldova (the Republic of)",MC:"Monaco",MN:"Mongolia",ME:"Montenegro",MS:"Montserrat",MA:"Morocco",MZ:"Mozambique",MM:"Myanmar",NA:"Namibia",NR:"Nauru",NP:"Nepal",NL:"Netherlands (the)",NC:"New Caledonia",NZ:"New Zealand",NI:"Nicaragua",NE:"Niger (the)",NG:"Nigeria",NU:"Niue",NF:"Norfolk Island",MP:"Northern Mariana Islands (the)",NO:"Norway",OM:"Oman",PK:"Pakistan",PW:"Palau",PS:"Palestine, State of",PA:"Panama",PG:"Papua New Guinea",PY:"Paraguay",PE:"Peru",PH:"Philippines (the)",PN:"Pitcairn",PL:"Poland",PT:"Portugal",PR:"Puerto Rico",QA:"Qatar",MK:"Republic of North Macedonia",RO:"Romania",RU:"Russian Federation (the)",RW:"Rwanda",RE:"Réunion",BL:"Saint Barthélemy",SH:"Saint Helena, Ascension and Tristan da Cunha",KN:"Saint Kitts and Nevis",LC:"Saint Lucia",MF:"Saint Martin (French part)",PM:"Saint Pierre and Miquelon",VC:"Saint Vincent and the Grenadines",WS:"Samoa",SM:"San Marino",ST:"Sao Tome and Principe",SA:"Saudi Arabia",SN:"Senegal",RS:"Serbia",SC:"Seychelles",SL:"Sierra Leone",SG:"Singapore",SX:"Sint Maarten (Dutch part)",SK:"Slovakia",SI:"Slovenia",SB:"Solomon Islands",SO:"Somalia",ZA:"South Africa",GS:"South Georgia and the South Sandwich Islands",SS:"South Sudan",ES:"Spain",LK:"Sri Lanka",SD:"Sudan (the)",SR:"Suriname",SJ:"Svalbard and Jan Mayen",SE:"Sweden",CH:"Switzerland",SY:"Syrian Arab Republic",TW:"Taiwan",TJ:"Tajikistan",TZ:"Tanzania, United Republic of",TH:"Thailand",TL:"Timor-Leste",TG:"Togo",TK:"Tokelau",TO:"Tonga",TT:"Trinidad and Tobago",TN:"Tunisia",TR:"Turkey",TM:"Turkmenistan",TC:"Turks and Caicos Islands (the)",TV:"Tuvalu",UG:"Uganda",UA:"Ukraine",AE:"United Arab Emirates (the)",GB:"United Kingdom of Great Britain and Northern Ireland (the)",UM:"United States Minor Outlying Islands (the)",US:"United States of America (the)",UY:"Uruguay",UZ:"Uzbekistan",VU:"Vanuatu",VE:"Venezuela (Bolivarian Republic of)",VN:"Viet Nam",VG:"Virgin Islands (British)",VI:"Virgin Islands (U.S.)",WF:"Wallis and Futuna",EH:"Western Sahara",YE:"Yemen",ZM:"Zambia",ZW:"Zimbabwe",AX:"Åland Islands"};for(const n in Yn)if(Object.prototype.hasOwnProperty.call(Yn,n)){const e=document.createElement("option");e.setAttribute("value",Yn[n]),e.innerText=n,e.dataset.value=n,Un.appendChild(e)}const Wn=In,Ln=document.createElement("li");Ln.classList.add("no-display");const Pn=document.createElement("label"),jn=document.createElement("input"),zn=document.createElement("datalist");Pn.setAttribute("for","states-select"),Pn.innerText="State",jn.setAttribute("type","text"),jn.setAttribute("name","states-select"),jn.setAttribute("id","states-select"),jn.setAttribute("list","states"),zn.setAttribute("id","states"),Ln.append(Pn,jn,zn);const On={AL:"Alabama",AK:"Alaska",AZ:"Arizona",AR:"Arkansas",CA:"California",CO:"Colorado",CT:"Connecticut",DE:"Delaware",FL:"Florida",GA:"Georgia",HI:"Hawaii",ID:"Idaho",IL:"Illinois",IN:"Indiana",IA:"Iowa",KS:"Kansas",KY:"Kentucky",LA:"Louisiana",ME:"Maine",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MN:"Minnesota",MS:"Mississippi",MO:"Missouri",MT:"Montana",NE:"Nebraska",NV:"Nevada",NH:"New Hampshire",NJ:"New Jersey",NM:"New Mexico",NY:"New York",NC:"North Carolina",ND:"North Dakota",OH:"Ohio",OK:"Oklahoma",OR:"Oregon",PA:"Pennsylvania",RI:"Rhode Island",SC:"South Carolina",SD:"South Dakota",TN:"Tennessee",TX:"Texas",UT:"Utah",VT:"Vermont",VA:"Virginia",WA:"Washington",WV:"West Virginia",WI:"Wisconsin",WY:"Wyoming"};for(const n in On)if(Object.prototype.hasOwnProperty.call(On,n)){const e=document.createElement("option");e.setAttribute("value",n),e.innerText=On[n],zn.appendChild(e)}const Rn=Ln,Gn=t.p+"7bbf47780fb42aed09bf.svg",Fn=[...Wn.children][1],qn=[...Rn.children][1];function Hn(n){const e=new Image;e.src=Gn;const t=document.createElement("button");t.setAttribute("type","button"),t.classList.add("clear-button"),t.appendChild(e);const a=[...n.children][1];t.addEventListener("click",(()=>{n===Wn&&"United States of America (the)"===a.value&&(qn.value="",Rn.classList.add("no-display")),a.value=""})),n.appendChild(t)}const Zn=document.createElement("form");Zn.classList.add("settings-form");const $n=document.createElement("div");$n.classList.add("advanced-search");const Xn=document.createElement("h4");Xn.innerText="Advanced Search";const Kn=document.createElement("ul");Kn.append(Wn,Rn),Fn.addEventListener("input",(()=>{"United States of America (the)"===Fn.value?Rn.classList.remove("no-display"):(qn.value="",Rn.classList.add("no-display"))})),Hn(Wn),Hn(Rn),$n.append(Xn,Kn);const Qn=document.createElement("div");Qn.classList.add("settings-select");const Vn=document.createElement("h4");Vn.innerText="Settings";const Jn=document.createElement("ul"),_n=document.createElement("li"),ne=document.createElement("label");ne.setAttribute("for","units-toggle"),ne.innerText="Units";const ee=document.createElement("input");ee.setAttribute("type","checkbox"),ee.setAttribute("id","units-toggle"),ee.setAttribute("name","units-toggle");const te=document.createElement("span");te.classList.add("imperial"),te.innerText="Imperial";const ae=document.createElement("span");ae.classList.add("metric"),ae.innerText="Metric",_n.append(ne,te,ee,ae),ee.addEventListener("change",(()=>{ee.checked?localStorage.setItem("units","checked"):localStorage.setItem("units","unchecked")})),Jn.append(_n),Qn.append(Vn,Jn);const ie=document.createElement("div");ie.classList.add("reset");const re=document.createElement("h4");re.innerText="Reset";const oe=document.createElement("p");oe.innerText="Forget saved data for this site?";const se=document.createElement("button");se.innerText="Reset",se.addEventListener("click",(()=>{localStorage.removeItem("location"),localStorage.removeItem("units"),location.reload()})),ie.append(re,oe,se),Zn.append($n,Qn,ie);const ce=Zn,le=t.p+"428ee93bd340561e9f42.svg",de=t.p+"656a744711a6351f0a8c.svg",Ae=t.p+"175b8c755aee790dd3cd.svg",ue=t.p+"373b64e00c8e97d53956.svg",ge=t.p+"c2d54ace29a241821ca2.svg",me=t.p+"5ed1cc80ba81a9103278.svg",he=t.p+"4236146a569e571de9d4.svg",pe=t.p+"8b242f83ed3d8fa5d97a.svg",fe=t.p+"2b18dbc676493a9cea59.svg",Ce=t.p+"2f874183851743b9f661.svg",Ee=t.p+"d13cb46b4a87e72d6462.svg",be=t.p+"54ff7732bb1a5ff166c6.svg",Be=t.p+"57d3ca9af2612ee72754.svg",ve=t.p+"0aa8bf835f3c27fcf21c.svg",we=t.p+"2086aa6783259e46695e.svg",ye=t.p+"6933e670b2e5a11e09c4.svg",xe=t.p+"0cac5032bf933bf10621.svg",ke=t.p+"2703d1de6de455fabeb4.svg",Te=t.p+"f86166a4f374db17b5d2.svg",Se=t.p+"d8f8023c4f4368222bc3.svg";let Me=!0;document.querySelector(".settings-container").appendChild(ce);const Ie=document.createElement("div");Ie.classList.add("gradient","day");const Ne=document.createElement("div");Ne.classList.add("gradient","cloud");const De=document.createElement("div");De.classList.add("gradient","rain");const Ue=document.createElement("div");Ue.classList.add("gradient","night");const Ye=document.createElement("div");Ye.classList.add("gradient","night-cloud");const We=document.querySelector(".site-wrapper");We.append(Ie,Ne,De,Ue,Ye);const Le=[...document.querySelectorAll(".gradient")],Pe=document.querySelector(".current-weather"),je=document.querySelector(".forecast"),ze=document.querySelector(".search-icon"),Oe=new Image;Oe.src=be,ze.appendChild(Oe);const Re=document.querySelector(".cog-icon"),Ge=new Image;Ge.src=Be,Re.appendChild(Ge);const Fe=document.querySelector(".cog-icon-container"),qe=document.querySelector(".settings");function He(n){let e;switch(n){case"01d":default:e=le;break;case"01n":e=de;break;case"02d":e=Ae;break;case"02n":e=ue;break;case"03d":case"03n":e=ge;break;case"04d":case"04n":e=me;break;case"09d":case"09n":case"10n":e=he;break;case"10d":e=pe;break;case"11d":case"11n":e=fe;break;case"13d":case"13n":e=Ce;break;case"50d":case"50n":e=Ee}return e}function Ze(n){Pe.firstChild&&Pe.removeChild(Pe.firstChild),je.firstChild&&je.removeChild(je.firstChild),Pe.appendChild(function(n){let{current:e}=n;Me&&(document.querySelector(".location-input").classList.add("post"),Me=!1);const t=document.createElement("div");t.classList.add("current-weather-display");const a=document.createElement("div");a.innerText=e.locationName,a.classList.add("current-location");const i=document.createElement("div");i.classList.add("current-temp"),i.innerText=`${Math.floor(e.main.temp)}°`;const r=function(n){const e=document.querySelector("#units-toggle"),t=document.createElement("ul"),a=document.createElement("li"),i=new Image;i.src=we;const r=document.createElement("span");r.innerText="Feels like";const o=document.createElement("span");o.innerText=`${Math.floor(n.main.feels_like)}°`,a.append(i,r,o);const s=document.createElement("li"),c=new Image;c.src=ye;const l=document.createElement("span");l.innerText="Humidity";const d=document.createElement("span");d.innerText=`${n.main.humidity}%`,s.append(c,l,d);const A=document.createElement("li"),u=new Image;u.src=Se;const g=document.createElement("span");g.innerText="Cloudiness";const m=document.createElement("span");m.innerText=`${n.clouds.all}%`,A.append(u,g,m);const h=document.createElement("li"),p=new Image;p.src=Te;const f=document.createElement("span");f.innerText="Wind";const C=document.createElement("span");C.innerText=`${Math.floor(e.checked?3.6*n.wind.speed:n.wind.speed)} ${e.checked?"km/h":"mph"}`,h.append(p,f,C);const E=document.createElement("li"),b=new Image;b.src=ke;const B=document.createElement("span");B.innerText="Sunrise";const v=document.createElement("span");v.innerText=`${n.sunrise}`,E.append(b,B,v);const w=document.createElement("li"),y=new Image;y.src=xe;const x=document.createElement("span");x.innerText="Sunset";const k=document.createElement("span");return k.innerText=`${n.sunset}`,w.append(y,x,k),t.append(a,s,A,h,E,w),t.classList.add("more-info-list"),t}(e),o=document.createElement("button");o.classList.add("more-info");const s=new Image;s.src=ve,o.appendChild(s),o.addEventListener("click",(()=>{r.style.maxHeight?r.style.maxHeight=null:r.style.maxHeight=`${r.scrollHeight}px`}));const c=document.createElement("div");c.classList.add("current-weather-icon");const l=new Image;l.classList.add("icon"),l.src=He(e.weather[0].icon),c.append(l,o);const d=document.createElement("div");d.classList.add("current-description"),d.innerText=e.weather[0].description;const A=function(n){let e;switch(n){case"01d":case"02d":e=Ie;break;case"01n":e=Ue;break;case"03d":case"04d":case"13d":case"50d":e=Ne;break;case"02n":case"03n":case"04n":case"13n":case"50n":e=Ye;break;case"09d":case"09n":case"10n":case"10d":case"11d":case"11n":e=De;break;default:e=""}return e}(e.weather[0].icon);We.className=A===Ne?"site-wrapper cloud":"site-wrapper";for(const n of Le)n.style.opacity=A===n?1:0;return t.append(a,i,d,c,r),t}(n)),je.appendChild(function(n){let{forecast:e}=n;const t=document.createElement("div");t.classList.add("forecast-display");for(const n in e)if(Object.prototype.hasOwnProperty.call(e,n)){const a=document.createElement("div");a.classList.add("day-display");const i=document.createElement("div");i.classList.add("day-title"),i.innerText=n,a.appendChild(i);const r=document.createElement("div");r.classList.add("day-icon");const o=new Image;o.classList.add("icon"),o.src=He(e[n].icon),r.appendChild(o);const s=document.createElement("div");s.classList.add("low-high");const c=document.createElement("span"),l=document.createElement("span");c.innerText=`L: ${e[n].low}°`,l.innerText=`H: ${e[n].high}°`,s.append(c,l),a.append(i,r,s),t.appendChild(a)}return t}(n))}function $e(n){let e,t=0;for(const a of n){let i=0;for(const e of n)a===e&&(i+=1);i>t&&(t=i,e=a)}return e}function Xe(n){let e;switch(n){case 0:e="Sunday";break;case 1:e="Monday";break;case 2:e="Tuesday";break;case 3:e="Wednesday";break;case 4:e="Thursday";break;case 5:e="Friday";break;case 6:e="Saturday";break;default:e="no day"}return e}Fe.addEventListener("click",(()=>{qe.classList.toggle("hidden")}));const Ke=async function(n){const e=await async function(n){let{lat:e,lon:t}=n;const a={},i="https://api.openweathermap.org/data/2.5/",r=`lat=${e}&lon=${t}`,o="&appid=921cfd876fc7bdd1768497c18dc1bf81&units="+(document.querySelector("#units-toggle").checked?"metric":"imperial"),s=await fetch(`${i}/weather?${r}${o}`),c=await fetch(`${i}/forecast?${r}${o}`);return a.current=await s.json(),a.fiveDay=await c.json(),a.current.sunrise=cn(dn(a.current.sys.sunrise),"p"),a.current.sunset=cn(dn(a.current.sys.sunset),"p"),a.forecast=function(n){const e=n.list.reduce(((n,e)=>(n.length&&Tn(un(n[n.length-1][0].dt_txt),un(e.dt_txt))?n[n.length-1].push(e):n.push([e]),n)),[]),t={};for(const n of e){if(Sn(un(n[0].dt_txt)))continue;let e,a,i;const r=[],o=[];for(const t of n)e||(e=Xe(Mn(un(t.dt_txt)))),(!a||t.main.temp_min<a)&&(a=Math.floor(t.main.temp_min)),(!i||t.main.temp_max>i)&&(i=Math.floor(t.main.temp_max)),t.weather[0].icon.includes("d")&&(r.push(t.weather[0].description),o.push(t.weather[0].icon));t[e]={high:i,low:a,description:$e(r),icon:$e(o)}}return t}(a.fiveDay),a}(n);e.current.locationName=n.name,Ze(e)},Qe=document.querySelector("#loc"),Ve=document.querySelector(".suggestion-box-container");async function Je(n,e){var t;if(await(t=e,new Promise((n=>setTimeout(n,t)))),n===Qe.value){const n=await async function(){const n=document.getElementById("country-select"),e=document.getElementById("states-select"),t=Qe.value;let a,i;if(n.value){const e=n.value;i=document.querySelector(`#countries option[value='${e}']`).dataset.value}a=Number(t)?n.value?`zip?zip=${t},${i}`:`zip?zip=${t}`:e.value?`direct?q=${t},${e.value},${i}&limit=7`:n.value?`direct?q=${t},${i}&limit=7`:`direct?q=${t}&limit=7`;const r=await fetch(`https://api.openweathermap.org/geo/1.0/${a}&appid=921cfd876fc7bdd1768497c18dc1bf81`);return await r.json()}(Qe.value),e=function(n){Ve.firstChild&&Ve.removeChild(Ve.firstChild);const e=document.createElement("div");if(e.classList.add("suggestion-box"),Array.isArray(n)||(n=[n]),n.length)n.forEach((n=>{const t=document.createElement("button");t.setAttribute("type","button"),t.classList.add("loc-suggestion"),t.innerText=`${n.name}, ${n.state??Yn[n.country]}`,t.addEventListener("click",(async()=>{Ve.removeChild(Ve.firstChild),Qe.value="",localStorage.setItem("location",JSON.stringify(n)),Ke(n)})),e.appendChild(t)}));else{const n=document.createElement("div");n.classList.add("loc-suggestion"),n.innerText="No results",e.appendChild(n)}return e}(n);Ve.appendChild(e)}}const _e=document.querySelector("#loc");var nt=t(379),et=t.n(nt),tt=t(795),at=t.n(tt),it=t(777),rt=t.n(it),ot=t(565),st=t.n(ot),ct=t(216),lt=t.n(ct),dt=t(589),At=t.n(dt),ut=t(426),gt={};gt.styleTagTransform=At(),gt.setAttributes=st(),gt.insert=rt().bind(null,"head"),gt.domAPI=at(),gt.insertStyleElement=lt(),et()(ut.Z,gt),ut.Z&&ut.Z.locals&&ut.Z.locals,function(){if(localStorage.getItem("location")){const n=JSON.parse(localStorage.getItem("location"));"checked"===localStorage.getItem("units")&&(ee.checked=!0),Ke(n)}_e.addEventListener("input",(()=>{Qe.value?Qe.value.length>4?Je(Qe.value,400):Je(Qe.value,2e3):Ve.firstChild&&Ve.removeChild(Ve.firstChild)})),_e.addEventListener("keypress",(n=>{13===n.keyCode&&n.preventDefault()})),window.addEventListener("resize",(()=>{const n=document.querySelector(".more-info-list");n&&n.style.maxHeight&&(n.style.maxHeight=`${n.scrollHeight}px`)}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QnZDLEVBQWFweEIsTUFBTTJ6QixVQUFhLEdBQUV2QyxFQUFhd0MsaUJBRW5ELEdBRUosQ0UvQkFpRixFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3dlYXRoZXItYXBwL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3RvRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNWYWxpZC9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi90b0ludGVnZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2FkZE1pbGxpc2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0RheU9mWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDSVNPV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZm9ybWF0L2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0TG9uZy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbG9jYWxpemUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbWF0Y2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9kZWZhdWx0TG9jYWxlL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9mb3JtYXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2Zyb21Vbml4VGltZS9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vY29uc3RhbnRzL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9wYXJzZUlTTy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3RhcnRPZkRheS9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNTYW1lRGF5L2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1RvZGF5L2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9nZXREYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9zcmMvY291bnRyeS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL3NyYy9zdGF0ZXMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9zcmMvc2V0dGluZ3MuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9zcmMvRE9NLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vc3JjL2ZldGNoV2VhdGhlci5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL3NyYy9sb2NhdGlvblNlbGVjdC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL3NyYy9pbml0LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiOnJvb3Qge1xcbiAgLS1zZXR0aW5ncy13aWR0aDogMzAwcHg7XFxuXFxuICAtLWJhY2tncm91bmQ6ICMyODJhMzY7XFxuICAtLXN0YXJ0LXNjcmVlbi1iZzogIzYyNzNhNGY4O1xcbiAgLS1zdWJ0bGU6ICM2MjcyYTQ7XFxuICAtLXBpbms6ICNmZjc5YzY7XFxuICAtLWdyZWVuOiAjNTBmYTdiO1xcbiAgLS15ZWxsb3c6ICNmMWZhOGM7XFxuICAtLWJsdWU6ICM4YmU5ZmQ7XFxuICAtLXBsYWluOiAjZjhmOGYyO1xcblxcbiAgLS1kYXktc2t5MTogIzQ2ODdkODtcXG4gIC0tZGF5LXNreTI6ICM3ZmFmZGU7XFxuXFxuICAtLWNsb3VkMTogI2Y1ZjVmNztcXG4gIC0tY2xvdWQyOiAjYTFiNWM3O1xcbiAgLS1jbG91ZC1mb250OiAjM2IzYjNiO1xcblxcbiAgLS1yYWluMTogIzUxNjA2YjtcXG4gIC0tcmFpbjI6ICM5Nzk5OWQ7XFxuXFxuICAtLW5pZ2h0MTogIzBiMTkyYjtcXG4gIC0tbmlnaHQyOiAjMDEzYTYwO1xcbiAgLS1uaWdodC1jbG91ZDogaHNsKDIwNCwgMjQlLCAzMCUpO1xcbn1cXG5cXG4qIHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxufVxcblxcbmh0bWwge1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cXG5ib2R5IHtcXG4gIGZvbnQtZmFtaWx5OiBzeXN0ZW0tdWksIC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgJ1NlZ29lIFVJJywgUm9ib3RvLCBPeHlnZW4sIFVidW50dSwgQ2FudGFyZWxsLCAnT3BlbiBTYW5zJywgJ0hlbHZldGljYSBOZXVlJywgc2Fucy1zZXJpZjtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBtaW4taGVpZ2h0OiAxMDAlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDEzYTYwMDA7XFxuICBjb2xvcjogdmFyKC0tcGxhaW4pO1xcbn1cXG5cXG4uc2l0ZS13cmFwcGVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBtaW4oNzVweCwgOCUpIGF1dG8gMWZyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcXG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcXG59XFxuXFxuLmdyYWRpZW50IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGNvbnRlbnQ6ICcnO1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgei1pbmRleDogLTE7XFxuICBvcGFjaXR5OiAwO1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjVzO1xcbn1cXG5cXG4uZ3JhZGllbnQuZGF5IHtcXG4gIG9wYWNpdHk6IDE7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodmFyKC0tZGF5LXNreTEpLCB2YXIoLS1kYXktc2t5MikpO1xcbn1cXG5cXG4uZ3JhZGllbnQuY2xvdWQge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHZhcigtLWNsb3VkMSksIHZhcigtLWNsb3VkMikpO1xcbn1cXG5cXG4uc2l0ZS13cmFwcGVyLmNsb3VkIHtcXG4gIGNvbG9yOiB2YXIoLS1jbG91ZC1mb250KTtcXG59XFxuXFxuLmdyYWRpZW50LnJhaW4ge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHZhcigtLXJhaW4xKSwgdmFyKC0tcmFpbjIpKTtcXG59XFxuXFxuLmdyYWRpZW50Lm5pZ2h0IHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh2YXIoLS1uaWdodDEpLCB2YXIoLS1uaWdodDIpKTtcXG59XFxuXFxuLmdyYWRpZW50Lm5pZ2h0LWNsb3VkIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh2YXIoLS1uaWdodDEpLCB2YXIoLS1uaWdodC1jbG91ZCksIHZhcigtLW5pZ2h0MikpO1xcblxcbn1cXG5cXG4ubG9jYXRpb24taW5wdXQge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgbWFyZ2luOiBhdXRvO1xcbiAgaGVpZ2h0OiBtaW4tY29udGVudDtcXG4gIHdpZHRoOiBtYXgtY29udGVudDtcXG59XFxuXFxuLmxvY2F0aW9uLWlucHV0LnBvc3Qge1xcbiAgdG9wOiA4cHg7XFxuICBsZWZ0OiA4cHg7XFxuICBib3R0b206IGF1dG87XFxuICByaWdodDogYXV0bztcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIHotaW5kZXg6IDE7XFxufVxcblxcbnVsIHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcbiNsb2Mge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGFwcGVhcmFuY2U6IG5vbmU7XFxuICBib3JkZXI6IG5vbmU7XFxuICBsaW5lLWhlaWdodDogMS4ycmVtO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBib3JkZXItcmFkaXVzOiAyMHB4O1xcbiAgcGFkZGluZzogNHB4IDhweDtcXG4gIGZvbnQtc2l6ZTogOTAlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIzMiwgMjQwLCAyNTQpO1xcbn1cXG5cXG4jbG9jOmZvY3VzIHtcXG4gIG91dGxpbmU6IDFweCBzb2xpZCBsaWdodGJsdWU7XFxufVxcblxcbi5sb2MtaW5wdXQtZmllbGQge1xcbiAgbWluLXdpZHRoOiAxNTBweDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHRyYW5zaXRpb246IGFsbCAwLjNzO1xcbn1cXG5cXG4ubG9jYXRpb24taW5wdXQucG9zdCAubG9jLWlucHV0LWZpZWxkIHtcXG4gIG1pbi13aWR0aDogMzBweDtcXG4gIGNvbnRhaW5lci10eXBlOiBpbmxpbmUtc2l6ZTtcXG4gIG9wYWNpdHk6IDAuMztcXG59XFxuXFxuLmxvY2F0aW9uLWlucHV0LnBvc3QgLmxvYy1pbnB1dC1maWVsZDpob3ZlcixcXG4ubG9jYXRpb24taW5wdXQucG9zdCAubG9jLWlucHV0LWZpZWxkOmhhcygjbG9jOmZvY3VzKSB7XFxuICBtaW4td2lkdGg6IDE1MHB4O1xcbiAgb3BhY2l0eTogMTtcXG59XFxuXFxuLmxvYy1pbnB1dC1maWVsZDpob3ZlciAuc3VnZ2VzdGlvbi1ib3gtY29udGFpbmVyLFxcbi5sb2MtaW5wdXQtZmllbGQ6aGFzKCNsb2M6Zm9jdXMpIC5zdWdnZXN0aW9uLWJveC1jb250YWluZXIge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcblxcbi5zZWFyY2gtaWNvbiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDIzMiwgMjQwLCAyNTQsIDApO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgaGVpZ2h0OiAxOHB4O1xcbiAgcmlnaHQ6IDVweDtcXG4gIHRvcDogNHB4O1xcbn1cXG5cXG4uc2VhcmNoLWljb24gaW1nIHtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG5AY29udGFpbmVyIChtYXgtd2lkdGg6IDUwcHgpIHtcXG4gIC5zZWFyY2gtaWNvbiB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgd2lkdGg6IDMwcHg7XFxuICAgIGhlaWdodDogMS4ycmVtO1xcbiAgICB0b3A6MDtcXG4gICAgcmlnaHQ6MDtcXG4gICAgbGVmdDowO1xcbiAgICBib3R0b206IDA7XFxuICAgIG1hcmdpbjogYXV0bztcXG4gICAgYm9yZGVyLXJhZGl1czogMjBweDtcXG4gIH1cXG4gICNsb2M6OnBsYWNlaG9sZGVyIHtcXG4gICAgb3BhY2l0eTogMDtcXG4gIH1cXG4gIFxcbiAgLmxvYy1pbnB1dC1maWVsZCAjbG9jIHtcXG4gICAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwKTtcXG4gICAgfVxcbn1cXG5cXG4uc3VnZ2VzdGlvbi1ib3gtY29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5zdWdnZXN0aW9uLWJveCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHdpZHRoOjIwMHB4O1xcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbi5sb2Mtc3VnZ2VzdGlvbiB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgY29sb3I6IGJsYWNrO1xcbiAgcGFkZGluZzogNXB4IDhweDtcXG4gIGFwcGVhcmFuY2U6IG5vbmU7XFxuICBib3JkZXI6IG5vbmU7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbn1cXG5cXG4ubG9jLXN1Z2dlc3Rpb246Zm9jdXMge1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgyMTAsIDU5JSwgOTAlKTtcXG4gIGJvcmRlci1sZWZ0OiAzcHggc29saWQgdmFyKC0tZGF5LXNreTIpO1xcbn1cXG5cXG4ubG9jLXN1Z2dlc3Rpb246aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDIxMCwgNTklLCA5MCUpO1xcbn1cXG5cXG4uY3VycmVudC13ZWF0aGVyIHtcXG4gIG1hcmdpbi1yaWdodDogY2FsYygxMDAlIC0gMTAwdncpO1xcbiAgZ3JpZC1yb3c6IDIgLyAzO1xcbn1cXG5cXG4uY3VycmVudC13ZWF0aGVyIC5jdXJyZW50LXdlYXRoZXItZGlzcGxheSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGZvbnQtc2l6ZTogMnJlbTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLmN1cnJlbnQtbG9jYXRpb24ge1xcbiAgZm9udC1zaXplOiAxLjVyZW07XFxuICBmb250LXdlaWdodDogMjAwO1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuLmN1cnJlbnQtdGVtcCB7XFxuICBmb250LXNpemU6IDRyZW07XFxuICBmb250LXdlaWdodDogMTAwO1xcbiAgbWFyZ2luLXJpZ2h0OiAtMTBweDtcXG59XFxuXFxuLmN1cnJlbnQtZGVzY3JpcHRpb24ge1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgZm9udC13ZWlnaHQ6IDIwMDtcXG59XFxuXFxuLmN1cnJlbnQtd2VhdGhlci1pY29uIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBtYXJnaW4tdG9wOiAxNnB4O1xcbiAgaGVpZ2h0OiAyMDBweDtcXG59XFxuXFxuLmljb24ge1xcbiAgaGVpZ2h0OiA5NSU7XFxufVxcblxcbi5mb3JlY2FzdCB7XFxuICBtYXJnaW4tcmlnaHQ6IGNhbGMoMTAwJSAtIDEwMHZ3KTtcXG4gIGdyaWQtcm93OiAzIC8gNDtcXG4gIGFsaWduLXNlbGY6IGJhc2VsaW5lO1xcbn1cXG5cXG4uZm9yZWNhc3QtZGlzcGxheSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZ2FwOiAxMHB4O1xcbn1cXG5cXG4uZGF5LWRpc3BsYXkge1xcbiAgZm9udC13ZWlnaHQ6IDMwMDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgd2lkdGg6IDE1dnc7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uZGF5LWljb24ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGhlaWdodDogNjBweDtcXG59XFxuXFxuLmxvdy1oaWdoIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZ2FwOiA1cHg7XFxuICBmb250LXNpemU6IDAuOXJlbTtcXG4gIGZvbnQtd2VpZ2h0OiAyMDA7XFxufVxcblxcbi5zZXR0aW5ncyB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogMDtcXG4gIHRvcDogMDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjMyLCAyNDAsIDI1NCwgMC45NSk7XFxuICB3aWR0aDogdmFyKC0tc2V0dGluZ3Mtd2lkdGgpO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgdHJhbnNpdGlvbjogMC4zcztcXG4gIGNvbG9yOiB2YXIoLS1jbG91ZC1mb250KTtcXG4gIHotaW5kZXg6IDE7XFxufVxcblxcbi5zZXR0aW5ncy5oaWRkZW4ge1xcbiAgdHJhbnNsYXRlOiB2YXIoLS1zZXR0aW5ncy13aWR0aCk7XFxufVxcblxcbi5jb2ctaWNvbi1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBtYXJnaW4tdG9wOiA4cHg7XFxuICB3aWR0aDogMjVweDtcXG4gIGhlaWdodDogMzBweDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyMzIsIDI0MCwgMjU0KTtcXG4gIG9wYWNpdHk6IDAuMztcXG4gIGJvcmRlci1yYWRpdXM6IDIwcHggMHB4IDBweCAyMHB4O1xcbiAgdHJhbnNpdGlvbjogMC4zcztcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnNldHRpbmdzLmhpZGRlbiAuY29nLWljb24tY29udGFpbmVyIHtcXG4gIHRyYW5zbGF0ZTogLTI1cHg7XFxufVxcblxcbi5jb2ctaWNvbiB7XFxuICB3aWR0aDogMThweDtcXG4gIGhlaWdodDogMThweDtcXG59XFxuXFxuLnNldHRpbmdzLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG5cXG4uc2V0dGluZ3MtY29udGFpbmVyIGxpIHtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlOiAxZnIgYXV0byAvIDFmciAyMHB4O1xcbn1cXG5cXG4uc2V0dGluZ3MtY29udGFpbmVyIGxpIGxhYmVsIHtcXG4gIGdyaWQtYXJlYTogMSAvIDEgLyAyIC8gMjtcXG59XFxuXFxuLmFkdmFuY2VkLXNlYXJjaCBpbnB1dCB7XFxuICBncmlkLWFyZWE6IDIgLyAxIC8gMyAvIDI7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgYXBwZWFyYW5jZTogbm9uZTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjJyZW07XFxuICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiA0cHggNnB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uc2V0dGluZ3MtY29udGFpbmVyIGxpIGlucHV0OmZvY3VzIHtcXG4gIG91dGxpbmU6IDFweCBzb2xpZCBsaWdodGJsdWU7XFxufVxcblxcbi5zZXR0aW5ncy1jb250YWluZXIgbGkgYnV0dG9uIHtcXG4gIGdyaWQtYXJlYTogMiAvIDIgLyAzIC8gNDtcXG4gIGFwcGVhcmFuY2U6IG5vbmU7XFxuICBib3JkZXI6IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmMDA7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgbWFyZ2luLWxlZnQ6IDhweDtcXG4gIG9wYWNpdHk6IDAuNTtcXG59XFxuXFxuLnNldHRpbmdzLWNvbnRhaW5lciBsaSBidXR0b246aG92ZXIge1xcbiAgb3BhY2l0eTogMTtcXG59XFxuXFxuLnNldHRpbmdzLWNvbnRhaW5lciAubm8tZGlzcGxheSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4uc2V0dGluZ3MtY29udGFpbmVyIGg0IHtcXG4gIG1hcmdpbjogMTVweCAwIDZweDtcXG59XFxuXFxuLnJlc2V0IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG4ucmVzZXQgYnV0dG9uIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICB3aWR0aDogMTAwcHg7XFxuICBhcHBlYXJhbmNlOiBub25lO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgcGFkZGluZzogNnB4IDhweDtcXG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTcwLCAzNywgMzcpO1xcbiAgY29sb3I6IHZhcigtLXBsYWluKTtcXG4gIG1hcmdpbjogNXB4IDA7XFxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjJyZW07XFxufVxcblxcbi5tb3JlLWluZm8ge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm90dG9tOiAyMHB4O1xcbiAgcmlnaHQ6IC0yMHB4O1xcbiAgd2lkdGg6IDIwcHg7XFxuICBoZWlnaHQ6IDIwcHg7XFxuICBhcHBlYXJhbmNlOiBub25lO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwKTtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIG9wYWNpdHk6IDAuMTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmN1cnJlbnQtd2VhdGhlcjpob3ZlciAubW9yZS1pbmZvIHtcXG4gIG9wYWNpdHk6IDAuNTtcXG59XFxuXFxuLm1vcmUtaW5mby1saXN0IHtcXG4gIGNvbG9yOiB2YXIoLS1wbGFpbik7XFxuICBmb250LXNpemU6IDFyZW07XFxuICBmb250LXdlaWdodDogMjAwO1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIG1hcmdpbjogMzBweDtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDYsIDFmcik7XFxuICBib3JkZXItcmFkaXVzOiAyMHB4O1xcbiAgbWF4LWhlaWdodDogMDtcXG4gIHRyYW5zaXRpb246IG1heC1oZWlnaHQgMC4zcztcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBnYXA6IDF2dztcXG59XFxuXFxuLm1vcmUtaW5mby1saXN0IGxpIHtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlOiAxZnIgMWZyIC8gMjBweCAyZnI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1pdGVtczogY2VudGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzBiMTkyYjJkO1xcbiAgYm9yZGVyLXJhZGl1czogMjBweDtcXG4gIHBhZGRpbmc6IDhweDtcXG59XFxuXFxuLm1vcmUtaW5mby1saXN0IGxpIGltZyB7XFxuICBncmlkLWFyZWE6IDEgLyAxIC8gMiAvIDI7XFxuICBoZWlnaHQ6IDIwcHg7XFxuICBqdXN0aWZ5LXNlbGY6IGxlZnQ7XFxufVxcblxcbi5tb3JlLWluZm8tbGlzdCBsaSBzcGFuOm50aC1jaGlsZCgyKSB7XFxuICBncmlkLWFyZWE6IDEgLyAyIC8gMiAvIDM7XFxuICBqdXN0aWZ5LXNlbGY6IGxlZnQ7XFxuICBtYXJnaW4tbGVmdDogNHB4O1xcbn1cXG5cXG4ubW9yZS1pbmZvLWxpc3QgbGkgc3BhbjpudGgtY2hpbGQoMykge1xcbiAgZ3JpZC1hcmVhOiAyIC8gMSAvIDMgLyAzO1xcbiAgZm9udC13ZWlnaHQ6IDMwMDtcXG59XFxuXFxuLnNpdGUtd3JhcHBlci5jbG91ZCAubW9yZS1pbmZvIHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblxcbi5jb2xsYXBzZSB7XFxuICBtYXgtaGVpZ2h0OiAwO1xcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDYwMHB4KSB7XFxuICA6cm9vdCB7XFxuICAgIC0tc2V0dGluZ3Mtd2lkdGg6IDEwMHZ3O1xcbiAgfVxcbiAgLnNpdGUtd3JhcHBlciB7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMzBweCBhdXRvIDFmcjtcXG4gIH1cXG5cXG4gIC5mb3JlY2FzdC1kaXNwbGF5IHtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgd2lkdGg6IDgwdnc7XFxuICAgIGdhcDogMDtcXG4gIH1cXG5cXG4gIC5kYXktZGlzcGxheSB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDIwJSA0NSUgMzUlO1xcbiAgICBib3JkZXItYm90dG9tOiAwLjVweCBzb2xpZCB2YXIoLS1kYXktc2t5MSk7XFxuICAgIHBhZGRpbmc6IDhweCAwcHg7XFxuICB9XFxuXFxuICAuZGF5LWljb24ge1xcbiAgICBoZWlnaHQ6IDMwcHg7XFxuICB9XFxuXFxuICAubG93LWhpZ2gge1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICBnYXA6IDE2cHg7XFxuICB9XFxuXFxuICAubW9yZS1pbmZvLWxpc3Qge1xcbiAgICB3aWR0aDogbWluKDcwdncsIDMwMHB4KTtcXG4gICAgZ3JpZC10ZW1wbGF0ZTogcmVwZWF0KDYsIDQwcHgpIC8gMWZyO1xcbiAgICBnYXA6IDBweDtcXG4gICAgbWFyZ2luLWJvdHRvbTogMTZweDtcXG4gIH1cXG4gIFxcbiAgLm1vcmUtaW5mby1saXN0IGxpIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGU6IDFmciAvIDFmciAyZnIgMmZyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwYjE5MmIwMDtcXG4gICAgcGFkZGluZzogMDtcXG4gIH1cXG4gIFxcbiAgLm1vcmUtaW5mby1saXN0IGxpIGltZyB7XFxuICAgIGhlaWdodDogMjBweDtcXG4gICAganVzdGlmeS1zZWxmOiByaWdodDtcXG4gIH1cXG4gIFxcbiAgLm1vcmUtaW5mby1saXN0IGxpIHNwYW46bnRoLWNoaWxkKDIpIHtcXG4gICAganVzdGlmeS1zZWxmOiBsZWZ0O1xcbiAgICBtYXJnaW4tbGVmdDogMzBweDtcXG4gIH1cXG4gIFxcbiAgLm1vcmUtaW5mby1saXN0IGxpIHNwYW46bnRoLWNoaWxkKDMpIHtcXG4gICAgZ3JpZC1hcmVhOiAxIC8gMyAvIDIgLyA0O1xcbiAgfVxcblxcbiAgLnNpdGUtd3JhcHBlci5jbG91ZCAubW9yZS1pbmZvLWxpc3Qge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGIxOTJiMmQ7XFxuICB9XFxuXFxufVxcblxcbi5zZXR0aW5ncy1zZWxlY3QgbGk6Zmlyc3QtY2hpbGQge1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGU6IDFmciAyZnIgLyAxZnIgMWZyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLnNldHRpbmdzLXNlbGVjdCBsaSBsYWJlbCB7XFxuICBncmlkLWFyZWE6IDEgLyAxIC8gMiAvIC0xO1xcbn1cXG5cXG4uc2V0dGluZ3Mtc2VsZWN0IC5pbXBlcmlhbCB7XFxuICBncmlkLWFyZWE6IDIgLyAxIC8gMyAvIDI7XFxuICBmb250LXNpemU6IDAuOHJlbTtcXG4gIHotaW5kZXg6IDE7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gIGNvbG9yOiB2YXIoLS1wbGFpbik7XFxufVxcblxcbi5zZXR0aW5ncy1zZWxlY3Q6aGFzKCN1bml0cy10b2dnbGU6Y2hlY2tlZCkgLm1ldHJpYyB7XFxuICBjb2xvcjogdmFyKC0tcGxhaW4pO1xcbn1cXG5cXG4uc2V0dGluZ3Mtc2VsZWN0OmhhcygjdW5pdHMtdG9nZ2xlOmNoZWNrZWQpIC5pbXBlcmlhbCB7XFxuICBjb2xvcjogdmFyKC0tY2xvdWQtZm9udCk7XFxufVxcblxcbiN1bml0cy10b2dnbGUge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDMwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGJvcmRlci1yYWRpdXM6IDMwcHg7XFxuICBncmlkLWFyZWE6IDIgLyAxIC8gMyAvIC0xO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYXBwZWFyYW5jZTogbm9uZTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuI3VuaXRzLXRvZ2dsZTpiZWZvcmUge1xcbiAgY29udGVudDogJyc7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZGF5LXNreTEpO1xcbiAgd2lkdGg6IDUwJTtcXG4gIGhlaWdodDogMjZweDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvcmRlci1yYWRpdXM6IDMwcHg7XFxuICB0b3A6MnB4O1xcbiAgbGVmdDogMnB4O1xcbiAgdHJhbnNpdGlvbjogMC4zcztcXG59XFxuXFxuI3VuaXRzLXRvZ2dsZTpjaGVja2VkOmJlZm9yZSB7XFxuICB0cmFuc2xhdGU6IDk1JTtcXG59XFxuXFxuLnNldHRpbmdzLXNlbGVjdCAubWV0cmljIHtcXG4gIGdyaWQtYXJlYTogMiAvIDIgLyAzIC8gMztcXG4gIGZvbnQtc2l6ZTogMC44cmVtO1xcbiAgei1pbmRleDogMTtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsdUJBQXVCOztFQUV2QixxQkFBcUI7RUFDckIsNEJBQTRCO0VBQzVCLGlCQUFpQjtFQUNqQixlQUFlO0VBQ2YsZ0JBQWdCO0VBQ2hCLGlCQUFpQjtFQUNqQixlQUFlO0VBQ2YsZ0JBQWdCOztFQUVoQixtQkFB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QWlCO0VBQ2pCLFVBQVU7RUFDVixvQkFBb0I7RUFDcEIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0Usd0JBQXdCO0FBQzFCOztBQUVBO0VBQ0UsV0FBVztFQUNYLFlBQVk7RUFDWix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLHlCQUF5QjtFQUN6QixrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsc0JBQXNCO0VBQ3RCLGlDQUFpQztFQUNqQyxVQUFVO0VBQ1YsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQixtQkFBbUI7RUFDbkIsT0FBTztFQUNQLFNBQVM7RUFDVCxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxjQUFjO0FBQ2hCOztBQUVBO0VBQ0Usd0JBQXdCO0VBQ3hCLGlCQUFpQjtFQUNqQixVQUFVO0VBQ1Ysb0JBQW9CO0FBQ3RCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjpyb290IHtcXG4gIC0tc2V0dGluZ3Mtd2lkdGg6IDMwMHB4O1xcblxcbiAgLS1iYWNrZ3JvdW5kOiAjMjgyYTM2O1xcbiAgLS1zdGFydC1zY3JlZW4tYmc6ICM2MjczYTRmODtcXG4gIC0tc3VidGxlOiAjNjI3MmE0O1xcbiAgLS1waW5rOiAjZmY3OWM2O1xcbiAgLS1ncmVlbjogIzUwZmE3YjtcXG4gIC0teWVsbG93OiAjZjFmYThjO1xcbiAgLS1ibHVlOiAjOGJlOWZkO1xcbiAgLS1wbGFpbjogI2Y4ZjhmMjtcXG5cXG4gIC0tZGF5LXNreTE6ICM0Njg3ZDg7XFxuICAtLWRheS1za3kyOiAjN2ZhZmRlO1xcblxcbiAgLS1jbG91ZDE6ICNmNWY1Zjc7XFxuICAtLWNsb3VkMjogI2ExYjVjNztcXG4gIC0tY2xvdWQtZm9udDogIzNiM2IzYjtcXG5cXG4gIC0tcmFpbjE6ICM1MTYwNmI7XFxuICAtLXJhaW4yOiAjOTc5OTlkO1xcblxcbiAgLS1uaWdodDE6ICMwYjE5MmI7XFxuICAtLW5pZ2h0MjogIzAxM2E2MDtcXG4gIC0tbmlnaHQtY2xvdWQ6IGhzbCgyMDQsIDI0JSwgMzAlKTtcXG59XFxuXFxuKiB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG5odG1sIHtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuXFxuYm9keSB7XFxuICBmb250LWZhbWlseTogc3lzdGVtLXVpLCAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsICdTZWdvZSBVSScsIFJvYm90bywgT3h5Z2VuLCBVYnVudHUsIENhbnRhcmVsbCwgJ09wZW4gU2FucycsICdIZWx2ZXRpY2EgTmV1ZScsIHNhbnMtc2VyaWY7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWluLWhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAxM2E2MDAwO1xcbiAgY29sb3I6IHZhcigtLXBsYWluKTtcXG59XFxuXFxuLnNpdGUtd3JhcHBlciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBtaW4taGVpZ2h0OiAxMDB2aDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtcm93czogbWluKDc1cHgsIDglKSBhdXRvIDFmcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XFxuICBvdmVyZmxvdy14OiBoaWRkZW47XFxufVxcblxcbi5ncmFkaWVudCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBjb250ZW50OiAnJztcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIHotaW5kZXg6IC0xO1xcbiAgb3BhY2l0eTogMDtcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC41cztcXG59XFxuXFxuLmdyYWRpZW50LmRheSB7XFxuICBvcGFjaXR5OiAxO1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHZhcigtLWRheS1za3kxKSwgdmFyKC0tZGF5LXNreTIpKTtcXG59XFxuXFxuLmdyYWRpZW50LmNsb3VkIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh2YXIoLS1jbG91ZDEpLCB2YXIoLS1jbG91ZDIpKTtcXG59XFxuXFxuLnNpdGUtd3JhcHBlci5jbG91ZCB7XFxuICBjb2xvcjogdmFyKC0tY2xvdWQtZm9udCk7XFxufVxcblxcbi5ncmFkaWVudC5yYWluIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh2YXIoLS1yYWluMSksIHZhcigtLXJhaW4yKSk7XFxufVxcblxcbi5ncmFkaWVudC5uaWdodCB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodmFyKC0tbmlnaHQxKSwgdmFyKC0tbmlnaHQyKSk7XFxufVxcblxcbi5ncmFkaWVudC5uaWdodC1jbG91ZCB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodmFyKC0tbmlnaHQxKSwgdmFyKC0tbmlnaHQtY2xvdWQpLCB2YXIoLS1uaWdodDIpKTtcXG5cXG59XFxuXFxuLmxvY2F0aW9uLWlucHV0IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICBib3R0b206IDA7XFxuICByaWdodDogMDtcXG4gIG1hcmdpbjogYXV0bztcXG4gIGhlaWdodDogbWluLWNvbnRlbnQ7XFxuICB3aWR0aDogbWF4LWNvbnRlbnQ7XFxufVxcblxcbi5sb2NhdGlvbi1pbnB1dC5wb3N0IHtcXG4gIHRvcDogOHB4O1xcbiAgbGVmdDogOHB4O1xcbiAgYm90dG9tOiBhdXRvO1xcbiAgcmlnaHQ6IGF1dG87XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICB6LWluZGV4OiAxO1xcbn1cXG5cXG51bCB7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5cXG4jbG9jIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBhcHBlYXJhbmNlOiBub25lO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgbGluZS1oZWlnaHQ6IDEuMnJlbTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYm9yZGVyLXJhZGl1czogMjBweDtcXG4gIHBhZGRpbmc6IDRweCA4cHg7XFxuICBmb250LXNpemU6IDkwJTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyMzIsIDI0MCwgMjU0KTtcXG59XFxuXFxuI2xvYzpmb2N1cyB7XFxuICBvdXRsaW5lOiAxcHggc29saWQgbGlnaHRibHVlO1xcbn1cXG5cXG4ubG9jLWlucHV0LWZpZWxkIHtcXG4gIG1pbi13aWR0aDogMTUwcHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0cmFuc2l0aW9uOiBhbGwgMC4zcztcXG59XFxuXFxuLmxvY2F0aW9uLWlucHV0LnBvc3QgLmxvYy1pbnB1dC1maWVsZCB7XFxuICBtaW4td2lkdGg6IDMwcHg7XFxuICBjb250YWluZXItdHlwZTogaW5saW5lLXNpemU7XFxuICBvcGFjaXR5OiAwLjM7XFxufVxcblxcbi5sb2NhdGlvbi1pbnB1dC5wb3N0IC5sb2MtaW5wdXQtZmllbGQ6aG92ZXIsXFxuLmxvY2F0aW9uLWlucHV0LnBvc3QgLmxvYy1pbnB1dC1maWVsZDpoYXMoI2xvYzpmb2N1cykge1xcbiAgbWluLXdpZHRoOiAxNTBweDtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblxcbi5sb2MtaW5wdXQtZmllbGQ6aG92ZXIgLnN1Z2dlc3Rpb24tYm94LWNvbnRhaW5lcixcXG4ubG9jLWlucHV0LWZpZWxkOmhhcygjbG9jOmZvY3VzKSAuc3VnZ2VzdGlvbi1ib3gtY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG5cXG4uc2VhcmNoLWljb24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMzIsIDI0MCwgMjU0LCAwKTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGhlaWdodDogMThweDtcXG4gIHJpZ2h0OiA1cHg7XFxuICB0b3A6IDRweDtcXG59XFxuXFxuLnNlYXJjaC1pY29uIGltZyB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuQGNvbnRhaW5lciAobWF4LXdpZHRoOiA1MHB4KSB7XFxuICAuc2VhcmNoLWljb24ge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHdpZHRoOiAzMHB4O1xcbiAgICBoZWlnaHQ6IDEuMnJlbTtcXG4gICAgdG9wOjA7XFxuICAgIHJpZ2h0OjA7XFxuICAgIGxlZnQ6MDtcXG4gICAgYm90dG9tOiAwO1xcbiAgICBtYXJnaW46IGF1dG87XFxuICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7XFxuICB9XFxuICAjbG9jOjpwbGFjZWhvbGRlciB7XFxuICAgIG9wYWNpdHk6IDA7XFxuICB9XFxuICBcXG4gIC5sb2MtaW5wdXQtZmllbGQgI2xvYyB7XFxuICAgICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XFxuICAgIH1cXG59XFxuXFxuLnN1Z2dlc3Rpb24tYm94LWNvbnRhaW5lciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4uc3VnZ2VzdGlvbi1ib3gge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICB3aWR0aDoyMDBweDtcXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG4ubG9jLXN1Z2dlc3Rpb24ge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGNvbG9yOiBibGFjaztcXG4gIHBhZGRpbmc6IDVweCA4cHg7XFxuICBhcHBlYXJhbmNlOiBub25lO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG59XFxuXFxuLmxvYy1zdWdnZXN0aW9uOmZvY3VzIHtcXG4gIG91dGxpbmU6IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMjEwLCA1OSUsIDkwJSk7XFxuICBib3JkZXItbGVmdDogM3B4IHNvbGlkIHZhcigtLWRheS1za3kyKTtcXG59XFxuXFxuLmxvYy1zdWdnZXN0aW9uOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgyMTAsIDU5JSwgOTAlKTtcXG59XFxuXFxuLmN1cnJlbnQtd2VhdGhlciB7XFxuICBtYXJnaW4tcmlnaHQ6IGNhbGMoMTAwJSAtIDEwMHZ3KTtcXG4gIGdyaWQtcm93OiAyIC8gMztcXG59XFxuXFxuLmN1cnJlbnQtd2VhdGhlciAuY3VycmVudC13ZWF0aGVyLWRpc3BsYXkge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBmb250LXNpemU6IDJyZW07XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5jdXJyZW50LWxvY2F0aW9uIHtcXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xcbiAgZm9udC13ZWlnaHQ6IDIwMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbi5jdXJyZW50LXRlbXAge1xcbiAgZm9udC1zaXplOiA0cmVtO1xcbiAgZm9udC13ZWlnaHQ6IDEwMDtcXG4gIG1hcmdpbi1yaWdodDogLTEwcHg7XFxufVxcblxcbi5jdXJyZW50LWRlc2NyaXB0aW9uIHtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIGZvbnQtd2VpZ2h0OiAyMDA7XFxufVxcblxcbi5jdXJyZW50LXdlYXRoZXItaWNvbiB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgbWFyZ2luLXRvcDogMTZweDtcXG4gIGhlaWdodDogMjAwcHg7XFxufVxcblxcbi5pY29uIHtcXG4gIGhlaWdodDogOTUlO1xcbn1cXG5cXG4uZm9yZWNhc3Qge1xcbiAgbWFyZ2luLXJpZ2h0OiBjYWxjKDEwMCUgLSAxMDB2dyk7XFxuICBncmlkLXJvdzogMyAvIDQ7XFxuICBhbGlnbi1zZWxmOiBiYXNlbGluZTtcXG59XFxuXFxuLmZvcmVjYXN0LWRpc3BsYXkge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGdhcDogMTBweDtcXG59XFxuXFxuLmRheS1kaXNwbGF5IHtcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHdpZHRoOiAxNXZ3O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLmRheS1pY29uIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBoZWlnaHQ6IDYwcHg7XFxufVxcblxcbi5sb3ctaGlnaCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGdhcDogNXB4O1xcbiAgZm9udC1zaXplOiAwLjlyZW07XFxuICBmb250LXdlaWdodDogMjAwO1xcbn1cXG5cXG4uc2V0dGluZ3Mge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDA7XFxuICB0b3A6IDA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDIzMiwgMjQwLCAyNTQsIDAuOTUpO1xcbiAgd2lkdGg6IHZhcigtLXNldHRpbmdzLXdpZHRoKTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHRyYW5zaXRpb246IDAuM3M7XFxuICBjb2xvcjogdmFyKC0tY2xvdWQtZm9udCk7XFxuICB6LWluZGV4OiAxO1xcbn1cXG5cXG4uc2V0dGluZ3MuaGlkZGVuIHtcXG4gIHRyYW5zbGF0ZTogdmFyKC0tc2V0dGluZ3Mtd2lkdGgpO1xcbn1cXG5cXG4uY29nLWljb24tY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgbWFyZ2luLXRvcDogOHB4O1xcbiAgd2lkdGg6IDI1cHg7XFxuICBoZWlnaHQ6IDMwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjMyLCAyNDAsIDI1NCk7XFxuICBvcGFjaXR5OiAwLjM7XFxuICBib3JkZXItcmFkaXVzOiAyMHB4IDBweCAwcHggMjBweDtcXG4gIHRyYW5zaXRpb246IDAuM3M7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5zZXR0aW5ncy5oaWRkZW4gLmNvZy1pY29uLWNvbnRhaW5lciB7XFxuICB0cmFuc2xhdGU6IC0yNXB4O1xcbn1cXG5cXG4uY29nLWljb24ge1xcbiAgd2lkdGg6IDE4cHg7XFxuICBoZWlnaHQ6IDE4cHg7XFxufVxcblxcbi5zZXR0aW5ncy1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG59XFxuXFxuLnNldHRpbmdzLWNvbnRhaW5lciBsaSB7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZTogMWZyIGF1dG8gLyAxZnIgMjBweDtcXG59XFxuXFxuLnNldHRpbmdzLWNvbnRhaW5lciBsaSBsYWJlbCB7XFxuICBncmlkLWFyZWE6IDEgLyAxIC8gMiAvIDI7XFxufVxcblxcbi5hZHZhbmNlZC1zZWFyY2ggaW5wdXQge1xcbiAgZ3JpZC1hcmVhOiAyIC8gMSAvIDMgLyAyO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGFwcGVhcmFuY2U6IG5vbmU7XFxuICBib3JkZXI6IG5vbmU7XFxuICBsaW5lLWhlaWdodDogMS4ycmVtO1xcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogNHB4IDZweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnNldHRpbmdzLWNvbnRhaW5lciBsaSBpbnB1dDpmb2N1cyB7XFxuICBvdXRsaW5lOiAxcHggc29saWQgbGlnaHRibHVlO1xcbn1cXG5cXG4uc2V0dGluZ3MtY29udGFpbmVyIGxpIGJ1dHRvbiB7XFxuICBncmlkLWFyZWE6IDIgLyAyIC8gMyAvIDQ7XFxuICBhcHBlYXJhbmNlOiBub25lO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjAwO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIG1hcmdpbi1sZWZ0OiA4cHg7XFxuICBvcGFjaXR5OiAwLjU7XFxufVxcblxcbi5zZXR0aW5ncy1jb250YWluZXIgbGkgYnV0dG9uOmhvdmVyIHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblxcbi5zZXR0aW5ncy1jb250YWluZXIgLm5vLWRpc3BsYXkge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLnNldHRpbmdzLWNvbnRhaW5lciBoNCB7XFxuICBtYXJnaW46IDE1cHggMCA2cHg7XFxufVxcblxcbi5yZXNldCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuLnJlc2V0IGJ1dHRvbiB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgd2lkdGg6IDEwMHB4O1xcbiAgYXBwZWFyYW5jZTogbm9uZTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIHBhZGRpbmc6IDZweCA4cHg7XFxuICBib3JkZXItcmFkaXVzOiAyMHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE3MCwgMzcsIDM3KTtcXG4gIGNvbG9yOiB2YXIoLS1wbGFpbik7XFxuICBtYXJnaW46IDVweCAwO1xcbiAgYWxpZ24tc2VsZjogZmxleC1lbmQ7XFxuICBsaW5lLWhlaWdodDogMS4ycmVtO1xcbn1cXG5cXG4ubW9yZS1pbmZvIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvdHRvbTogMjBweDtcXG4gIHJpZ2h0OiAtMjBweDtcXG4gIHdpZHRoOiAyMHB4O1xcbiAgaGVpZ2h0OiAyMHB4O1xcbiAgYXBwZWFyYW5jZTogbm9uZTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMCk7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBvcGFjaXR5OiAwLjE7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5jdXJyZW50LXdlYXRoZXI6aG92ZXIgLm1vcmUtaW5mbyB7XFxuICBvcGFjaXR5OiAwLjU7XFxufVxcblxcbi5tb3JlLWluZm8tbGlzdCB7XFxuICBjb2xvcjogdmFyKC0tcGxhaW4pO1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgZm9udC13ZWlnaHQ6IDIwMDtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBtYXJnaW46IDMwcHg7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCg2LCAxZnIpO1xcbiAgYm9yZGVyLXJhZGl1czogMjBweDtcXG4gIG1heC1oZWlnaHQ6IDA7XFxuICB0cmFuc2l0aW9uOiBtYXgtaGVpZ2h0IDAuM3M7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgZ2FwOiAxdnc7XFxufVxcblxcbi5tb3JlLWluZm8tbGlzdCBsaSB7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZTogMWZyIDFmciAvIDIwcHggMmZyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwYjE5MmIyZDtcXG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XFxuICBwYWRkaW5nOiA4cHg7XFxufVxcblxcbi5tb3JlLWluZm8tbGlzdCBsaSBpbWcge1xcbiAgZ3JpZC1hcmVhOiAxIC8gMSAvIDIgLyAyO1xcbiAgaGVpZ2h0OiAyMHB4O1xcbiAganVzdGlmeS1zZWxmOiBsZWZ0O1xcbn1cXG5cXG4ubW9yZS1pbmZvLWxpc3QgbGkgc3BhbjpudGgtY2hpbGQoMikge1xcbiAgZ3JpZC1hcmVhOiAxIC8gMiAvIDIgLyAzO1xcbiAganVzdGlmeS1zZWxmOiBsZWZ0O1xcbiAgbWFyZ2luLWxlZnQ6IDRweDtcXG59XFxuXFxuLm1vcmUtaW5mby1saXN0IGxpIHNwYW46bnRoLWNoaWxkKDMpIHtcXG4gIGdyaWQtYXJlYTogMiAvIDEgLyAzIC8gMztcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxufVxcblxcbi5zaXRlLXdyYXBwZXIuY2xvdWQgLm1vcmUtaW5mbyB7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cXG4uY29sbGFwc2Uge1xcbiAgbWF4LWhlaWdodDogMDtcXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2MDBweCkge1xcbiAgOnJvb3Qge1xcbiAgICAtLXNldHRpbmdzLXdpZHRoOiAxMDB2dztcXG4gIH1cXG4gIC5zaXRlLXdyYXBwZXIge1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDMwcHggYXV0byAxZnI7XFxuICB9XFxuXFxuICAuZm9yZWNhc3QtZGlzcGxheSB7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIHdpZHRoOiA4MHZ3O1xcbiAgICBnYXA6IDA7XFxuICB9XFxuXFxuICAuZGF5LWRpc3BsYXkge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAyMCUgNDUlIDM1JTtcXG4gICAgYm9yZGVyLWJvdHRvbTogMC41cHggc29saWQgdmFyKC0tZGF5LXNreTEpO1xcbiAgICBwYWRkaW5nOiA4cHggMHB4O1xcbiAgfVxcblxcbiAgLmRheS1pY29uIHtcXG4gICAgaGVpZ2h0OiAzMHB4O1xcbiAgfVxcblxcbiAgLmxvdy1oaWdoIHtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgZ2FwOiAxNnB4O1xcbiAgfVxcblxcbiAgLm1vcmUtaW5mby1saXN0IHtcXG4gICAgd2lkdGg6IG1pbig3MHZ3LCAzMDBweCk7XFxuICAgIGdyaWQtdGVtcGxhdGU6IHJlcGVhdCg2LCA0MHB4KSAvIDFmcjtcXG4gICAgZ2FwOiAwcHg7XFxuICAgIG1hcmdpbi1ib3R0b206IDE2cHg7XFxuICB9XFxuICBcXG4gIC5tb3JlLWluZm8tbGlzdCBsaSB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlOiAxZnIgLyAxZnIgMmZyIDJmcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAganVzdGlmeS1pdGVtczogY2VudGVyO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGIxOTJiMDA7XFxuICAgIHBhZGRpbmc6IDA7XFxuICB9XFxuICBcXG4gIC5tb3JlLWluZm8tbGlzdCBsaSBpbWcge1xcbiAgICBoZWlnaHQ6IDIwcHg7XFxuICAgIGp1c3RpZnktc2VsZjogcmlnaHQ7XFxuICB9XFxuICBcXG4gIC5tb3JlLWluZm8tbGlzdCBsaSBzcGFuOm50aC1jaGlsZCgyKSB7XFxuICAgIGp1c3RpZnktc2VsZjogbGVmdDtcXG4gICAgbWFyZ2luLWxlZnQ6IDMwcHg7XFxuICB9XFxuICBcXG4gIC5tb3JlLWluZm8tbGlzdCBsaSBzcGFuOm50aC1jaGlsZCgzKSB7XFxuICAgIGdyaWQtYXJlYTogMSAvIDMgLyAyIC8gNDtcXG4gIH1cXG5cXG4gIC5zaXRlLXdyYXBwZXIuY2xvdWQgLm1vcmUtaW5mby1saXN0IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzBiMTkyYjJkO1xcbiAgfVxcblxcbn1cXG5cXG4uc2V0dGluZ3Mtc2VsZWN0IGxpOmZpcnN0LWNoaWxkIHtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlOiAxZnIgMmZyIC8gMWZyIDFmcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5zZXR0aW5ncy1zZWxlY3QgbGkgbGFiZWwge1xcbiAgZ3JpZC1hcmVhOiAxIC8gMSAvIDIgLyAtMTtcXG59XFxuXFxuLnNldHRpbmdzLXNlbGVjdCAuaW1wZXJpYWwge1xcbiAgZ3JpZC1hcmVhOiAyIC8gMSAvIDMgLyAyO1xcbiAgZm9udC1zaXplOiAwLjhyZW07XFxuICB6LWluZGV4OiAxO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICBjb2xvcjogdmFyKC0tcGxhaW4pO1xcbn1cXG5cXG4uc2V0dGluZ3Mtc2VsZWN0OmhhcygjdW5pdHMtdG9nZ2xlOmNoZWNrZWQpIC5tZXRyaWMge1xcbiAgY29sb3I6IHZhcigtLXBsYWluKTtcXG59XFxuXFxuLnNldHRpbmdzLXNlbGVjdDpoYXMoI3VuaXRzLXRvZ2dsZTpjaGVja2VkKSAuaW1wZXJpYWwge1xcbiAgY29sb3I6IHZhcigtLWNsb3VkLWZvbnQpO1xcbn1cXG5cXG4jdW5pdHMtdG9nZ2xlIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAzMHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBib3JkZXItcmFkaXVzOiAzMHB4O1xcbiAgZ3JpZC1hcmVhOiAyIC8gMSAvIDMgLyAtMTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGFwcGVhcmFuY2U6IG5vbmU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbiN1bml0cy10b2dnbGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6ICcnO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWRheS1za3kxKTtcXG4gIHdpZHRoOiA1MCU7XFxuICBoZWlnaHQ6IDI2cHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBib3JkZXItcmFkaXVzOiAzMHB4O1xcbiAgdG9wOjJweDtcXG4gIGxlZnQ6IDJweDtcXG4gIHRyYW5zaXRpb246IDAuM3M7XFxufVxcblxcbiN1bml0cy10b2dnbGU6Y2hlY2tlZDpiZWZvcmUge1xcbiAgdHJhbnNsYXRlOiA5NSU7XFxufVxcblxcbi5zZXR0aW5ncy1zZWxlY3QgLm1ldHJpYyB7XFxuICBncmlkLWFyZWE6IDIgLyAyIC8gMyAvIDM7XFxuICBmb250LXNpemU6IDAuOHJlbTtcXG4gIHotaW5kZXg6IDE7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZWRBcmdzKHJlcXVpcmVkLCBhcmdzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA8IHJlcXVpcmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihyZXF1aXJlZCArICcgYXJndW1lbnQnICsgKHJlcXVpcmVkID4gMSA/ICdzJyA6ICcnKSArICcgcmVxdWlyZWQsIGJ1dCBvbmx5ICcgKyBhcmdzLmxlbmd0aCArICcgcHJlc2VudCcpO1xuICB9XG59IiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIHZhbHVlIGEgZGF0ZT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZS4gVGhlIGZ1bmN0aW9uIHdvcmtzIGZvciBkYXRlcyB0cmFuc2ZlcnJlZCBhY3Jvc3MgaWZyYW1lcy5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gdGhlIHZhbHVlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBkYXRlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gaW52YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKE5hTikpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHNvbWUgdmFsdWU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoJzIwMTQtMDItMzEnKVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gb2JqZWN0OlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKHt9KVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSB8fCBfdHlwZW9mKHZhbHVlKSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufSIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgdGhlIHRpbWVzdGFtcCB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7IC8vIENsb25lIHRoZSBkYXRlXG5cbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCBfdHlwZW9mKGFyZ3VtZW50KSA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI3N0cmluZy1hcmd1bWVudHNcIik7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn0iLCJpbXBvcnQgaXNEYXRlIGZyb20gXCIuLi9pc0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNWYWxpZFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB2YWxpZD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgZmFsc2UgaWYgYXJndW1lbnQgaXMgSW52YWxpZCBEYXRlIGFuZCB0cnVlIG90aGVyd2lzZS5cbiAqIEFyZ3VtZW50IGlzIGNvbnZlcnRlZCB0byBEYXRlIHVzaW5nIGB0b0RhdGVgLiBTZWUgW3RvRGF0ZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy90b0RhdGV9XG4gKiBJbnZhbGlkIERhdGUgaXMgYSBEYXRlLCB3aG9zZSB0aW1lIHZhbHVlIGlzIE5hTi5cbiAqXG4gKiBUaW1lIHZhbHVlIG9mIERhdGU6IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuOS4xLjFcbiAqXG4gKiBAcGFyYW0geyp9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIHZhbGlkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgyMDE0LCAxLCAzMSkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWx1ZSwgY29udmVydGFibGUgaW50byBhIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKDEzOTM4MDQ4MDAwMDApXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKCcnKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1ZhbGlkKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcblxuICBpZiAoIWlzRGF0ZShkaXJ0eURhdGUpICYmIHR5cGVvZiBkaXJ0eURhdGUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgcmV0dXJuICFpc05hTihOdW1iZXIoZGF0ZSkpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvSW50ZWdlcihkaXJ0eU51bWJlcikge1xuICBpZiAoZGlydHlOdW1iZXIgPT09IG51bGwgfHwgZGlydHlOdW1iZXIgPT09IHRydWUgfHwgZGlydHlOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuXG4gIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuXG4gIHJldHVybiBudW1iZXIgPCAwID8gTWF0aC5jZWlsKG51bWJlcikgOiBNYXRoLmZsb29yKG51bWJlcik7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgYWRkTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDc1MCBtaWxsaXNlY29uZHMgdG8gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZE1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjMwLjc1MFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgdGltZXN0YW1wID0gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0VGltZSgpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIGFtb3VudCk7XG59IiwiaW1wb3J0IGFkZE1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3ViTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIHN1YnRyYWN0ZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIHN1YnRyYWN0ZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgNzUwIG1pbGxpc2Vjb25kcyBmcm9tIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdWJNaWxsaXNlY29uZHMobmV3IERhdGUoMjAxNCwgNiwgMTAsIDEyLCA0NSwgMzAsIDApLCA3NTApXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAxMjo0NToyOS4yNTBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWJNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCAtYW1vdW50KTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9EQVkgPSA4NjQwMDAwMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0RheU9mWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZZZWFyVGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIHZhciBkaWZmZXJlbmNlID0gdGltZXN0YW1wIC0gc3RhcnRPZlllYXJUaW1lc3RhbXA7XG4gIHJldHVybiBNYXRoLmZsb29yKGRpZmZlcmVuY2UgLyBNSUxMSVNFQ09ORFNfSU5fREFZKSArIDE7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IDE7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJpbXBvcnQgZ2V0VVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB5ZWFyID0gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeSA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnkpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENJU09XZWVrKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDSVNPV2VlayhkYXRlKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGF0ZSkuZ2V0VGltZSgpOyAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsInZhciBkZWZhdWx0T3B0aW9ucyA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRPcHRpb25zKCkge1xuICByZXR1cm4gZGVmYXVsdE9wdGlvbnM7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0RGVmYXVsdE9wdGlvbnMobmV3T3B0aW9ucykge1xuICBkZWZhdWx0T3B0aW9ucyA9IG5ld09wdGlvbnM7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX3JlZjIsIF9yZWYzLCBfb3B0aW9ucyR3ZWVrU3RhcnRzT24sIF9vcHRpb25zJGxvY2FsZSwgX29wdGlvbnMkbG9jYWxlJG9wdGlvLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDI7XG5cbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSB0b0ludGVnZXIoKF9yZWYgPSAoX3JlZjIgPSAoX3JlZjMgPSAoX29wdGlvbnMkd2Vla1N0YXJ0c09uID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX29wdGlvbnMkd2Vla1N0YXJ0c09uICE9PSB2b2lkIDAgPyBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlJG9wdGlvID0gX29wdGlvbnMkbG9jYWxlLm9wdGlvbnMpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkbG9jYWxlJG9wdGlvLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogZGVmYXVsdE9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmMiAhPT0gdm9pZCAwID8gX3JlZjIgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsID0gZGVmYXVsdE9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsLm9wdGlvbnMpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogMCk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4uL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuXG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyRmaXJzdFdlZWtDb24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRmaXJzdFdlZWtDb24gIT09IHZvaWQgMCA/IF9vcHRpb25zJGZpcnN0V2Vla0NvbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8uZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAxKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoIShmaXJzdFdlZWtDb250YWluc0RhdGUgPj0gMSAmJiBmaXJzdFdlZWtDb250YWluc0RhdGUgPD0gNykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZmlyc3RXZWVrQ29udGFpbnNEYXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgZmlyc3RXZWVrT2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZOZXh0WWVhciwgb3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWtPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vla09mVGhpc1llYXIsIG9wdGlvbnMpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJpbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrWWVhcihkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuXG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmID0gKF9yZWYyID0gKF9yZWYzID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9IF9vcHRpb25zJGxvY2FsZS5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZSRvcHRpby5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IDEpO1xuICB2YXIgeWVhciA9IGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgb3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWsgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vlay5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWssIG9wdGlvbnMpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2Vla1llYXIgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDV2VlayhkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpOyAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZExlYWRpbmdaZXJvcyhudW1iZXIsIHRhcmdldExlbmd0aCkge1xuICB2YXIgc2lnbiA9IG51bWJlciA8IDAgPyAnLScgOiAnJztcbiAgdmFyIG91dHB1dCA9IE1hdGguYWJzKG51bWJlcikudG9TdHJpbmcoKTtcblxuICB3aGlsZSAob3V0cHV0Lmxlbmd0aCA8IHRhcmdldExlbmd0aCkge1xuICAgIG91dHB1dCA9ICcwJyArIG91dHB1dDtcbiAgfVxuXG4gIHJldHVybiBzaWduICsgb3V0cHV0O1xufSIsImltcG9ydCBhZGRMZWFkaW5nWmVyb3MgZnJvbSBcIi4uLy4uL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qc1wiO1xuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKi9cblxudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24geShkYXRlLCB0b2tlbikge1xuICAgIC8vIEZyb20gaHR0cDovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS0zMS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9Gb3JtYXRfdG9rZW5zXG4gICAgLy8gfCBZZWFyICAgICB8ICAgICB5IHwgeXkgfCAgIHl5eSB8ICB5eXl5IHwgeXl5eXkgfFxuICAgIC8vIHwtLS0tLS0tLS0tfC0tLS0tLS18LS0tLXwtLS0tLS0tfC0tLS0tLS18LS0tLS0tLXxcbiAgICAvLyB8IEFEIDEgICAgIHwgICAgIDEgfCAwMSB8ICAgMDAxIHwgIDAwMDEgfCAwMDAwMSB8XG4gICAgLy8gfCBBRCAxMiAgICB8ICAgIDEyIHwgMTIgfCAgIDAxMiB8ICAwMDEyIHwgMDAwMTIgfFxuICAgIC8vIHwgQUQgMTIzICAgfCAgIDEyMyB8IDIzIHwgICAxMjMgfCAgMDEyMyB8IDAwMTIzIHxcbiAgICAvLyB8IEFEIDEyMzQgIHwgIDEyMzQgfCAzNCB8ICAxMjM0IHwgIDEyMzQgfCAwMTIzNCB8XG4gICAgLy8gfCBBRCAxMjM0NSB8IDEyMzQ1IHwgNDUgfCAxMjM0NSB8IDEyMzQ1IHwgMTIzNDUgfFxuICAgIHZhciBzaWduZWRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgdmFyIHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRva2VuID09PSAneXknID8geWVhciAlIDEwMCA6IHllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1vbnRoXG4gIE06IGZ1bmN0aW9uIE0oZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgcmV0dXJuIHRva2VuID09PSAnTScgPyBTdHJpbmcobW9udGggKyAxKSA6IGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIGQoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDRGF0ZSgpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiBhKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRhdGUuZ2V0VVRDSG91cnMoKSAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWU7XG5cbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZVswXTtcblxuICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlID09PSAnYW0nID8gJ2EubS4nIDogJ3AubS4nO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gaChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIEgoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDSG91cnMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIG0oZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDTWludXRlcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gcyhkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiBTKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG51bWJlck9mRGlnaXRzID0gdG9rZW4ubGVuZ3RoO1xuICAgIHZhciBtaWxsaXNlY29uZHMgPSBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgIHZhciBmcmFjdGlvbmFsU2Vjb25kcyA9IE1hdGguZmxvb3IobWlsbGlzZWNvbmRzICogTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzIC0gMykpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZnJhY3Rpb25hbFNlY29uZHMsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsImltcG9ydCBnZXRVVENEYXlPZlllYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDSVNPV2VlayBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENXZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENXZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG5pbXBvcnQgbGlnaHRGb3JtYXR0ZXJzIGZyb20gXCIuLi9saWdodEZvcm1hdHRlcnMvaW5kZXguanNcIjtcbnZhciBkYXlQZXJpb2RFbnVtID0ge1xuICBhbTogJ2FtJyxcbiAgcG06ICdwbScsXG4gIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICBub29uOiAnbm9vbicsXG4gIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICBuaWdodDogJ25pZ2h0J1xufTtcblxuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgTWlsbGlzZWNvbmRzIGluIGRheSAgICAgICAgICAgIHxcbiAqIHwgIGIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgIHwgIEIgIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgIHxcbiAqIHwgIGMgIHwgU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWsgIHwgIEMqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGUgIHwgTG9jYWwgZGF5IG9mIHdlZWsgICAgICAgICAgICAgIHwgIEUgIHwgRGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGYgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEYqIHwgRGF5IG9mIHdlZWsgaW4gbW9udGggICAgICAgICAgIHxcbiAqIHwgIGcqIHwgTW9kaWZpZWQgSnVsaWFuIGRheSAgICAgICAgICAgIHwgIEcgIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGkhIHwgSVNPIGRheSBvZiB3ZWVrICAgICAgICAgICAgICAgIHwgIEkhIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgIHxcbiAqIHwgIGoqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHwgIEoqIHwgTG9jYWxpemVkIGhvdXIgdy9vIGRheSBwZXJpb2QgIHxcbiAqIHwgIGsgIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgIHwgIEsgIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGwqIHwgKGRlcHJlY2F0ZWQpICAgICAgICAgICAgICAgICAgIHwgIEwgIHwgU3RhbmQtYWxvbmUgbW9udGggICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG8hIHwgT3JkaW5hbCBudW1iZXIgbW9kaWZpZXIgICAgICAgIHwgIE8gIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHAhIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgIHwgIFAhIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgIHxcbiAqIHwgIHEgIHwgU3RhbmQtYWxvbmUgcXVhcnRlciAgICAgICAgICAgIHwgIFEgIHwgUXVhcnRlciAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHIqIHwgUmVsYXRlZCBHcmVnb3JpYW4geWVhciAgICAgICAgIHwgIFIhIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHQhIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgIHwgIFQhIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgIHxcbiAqIHwgIHUgIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgIHwgIFUqIHwgQ3ljbGljIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHYqIHwgVGltZXpvbmUgKGdlbmVyaWMgbm9uLWxvY2F0LikgIHwgIFYqIHwgVGltZXpvbmUgKGxvY2F0aW9uKSAgICAgICAgICAgIHxcbiAqIHwgIHcgIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgIHwgIFcqIHwgV2VlayBvZiBtb250aCAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHggIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgIHwgIFggIHwgVGltZXpvbmUgKElTTy04NjAxKSAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgIHxcbiAqIHwgIHogIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pIHwgIFoqIHwgVGltZXpvbmUgKGFsaWFzZXMpICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgISBhcmUgbm9uLXN0YW5kYXJkLCBidXQgaW1wbGVtZW50ZWQgYnkgZGF0ZS1mbnM6XG4gKiAtIGBvYCBtb2RpZmllcyB0aGUgcHJldmlvdXMgdG9rZW4gdG8gdHVybiBpdCBpbnRvIGFuIG9yZGluYWwgKHNlZSBgZm9ybWF0YCBkb2NzKVxuICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICogICBpLmUuIDcgZm9yIFN1bmRheSwgMSBmb3IgTW9uZGF5LCBldGMuXG4gKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAqICAgYFJgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgSWAgYW5kIGBpYFxuICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAqICAgZm9yIHdlZWstbnVtYmVyaW5nIGRhdGUgc3BlY2lmaWMgdG8gdGhlIGxvY2FsZS5cbiAqIC0gYFBgIGlzIGxvbmcgbG9jYWxpemVkIGRhdGUgZm9ybWF0XG4gKiAtIGBwYCBpcyBsb25nIGxvY2FsaXplZCB0aW1lIGZvcm1hdFxuICovXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gRXJhXG4gIEc6IGZ1bmN0aW9uIEcoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGVyYSA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKSA+IDAgPyAxIDogMDtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEFELCBCQ1xuICAgICAgY2FzZSAnRyc6XG4gICAgICBjYXNlICdHRyc6XG4gICAgICBjYXNlICdHR0cnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnXG4gICAgICAgIH0pO1xuICAgICAgLy8gQSwgQlxuXG4gICAgICBjYXNlICdHR0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnXG4gICAgICAgIH0pO1xuICAgICAgLy8gQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3RcblxuICAgICAgY2FzZSAnR0dHRyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBZZWFyXG4gIHk6IGZ1bmN0aW9uIHkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgLy8gT3JkaW5hbCBudW1iZXJcbiAgICBpZiAodG9rZW4gPT09ICd5bycpIHtcbiAgICAgIHZhciBzaWduZWRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoeWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMueShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgWTogZnVuY3Rpb24gWShkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgc2lnbmVkV2Vla1llYXIgPSBnZXRVVENXZWVrWWVhcihkYXRlLCBvcHRpb25zKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB3ZWVrWWVhciA9IHNpZ25lZFdlZWtZZWFyID4gMCA/IHNpZ25lZFdlZWtZZWFyIDogMSAtIHNpZ25lZFdlZWtZZWFyOyAvLyBUd28gZGlnaXQgeWVhclxuXG4gICAgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgICB2YXIgdHdvRGlnaXRZZWFyID0gd2Vla1llYXIgJSAxMDA7XG4gICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHR3b0RpZ2l0WWVhciwgMik7XG4gICAgfSAvLyBPcmRpbmFsIG51bWJlclxuXG5cbiAgICBpZiAodG9rZW4gPT09ICdZbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWtZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfSAvLyBQYWRkaW5nXG5cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFI6IGZ1bmN0aW9uIFIoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgaXNvV2Vla1llYXIgPSBnZXRVVENJU09XZWVrWWVhcihkYXRlKTsgLy8gUGFkZGluZ1xuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRXh0ZW5kZWQgeWVhci4gVGhpcyBpcyBhIHNpbmdsZSBudW1iZXIgZGVzaWduYXRpbmcgdGhlIHllYXIgb2YgdGhpcyBjYWxlbmRhciBzeXN0ZW0uXG4gIC8vIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBsb2NhbGl6ZXJzIGFyZSBCLkMuIHllYXJzOlxuICAvLyB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICAvLyB8LS0tLS0tfC0tLS0tfC0tLS0tfFxuICAvLyB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICAvLyB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICAvLyB8IEJDIDIgfCAgIDIgfCAgLTEgfFxuICAvLyBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gIC8vIHdoaWxlIGB1dWAgcGFkcyBzaW5nbGUgZGlnaXQgeWVhcnMgdG8gMiBjaGFyYWN0ZXJzIGFuZCByZXR1cm5zIG90aGVyIHllYXJzIHVuY2hhbmdlZC5cbiAgdTogZnVuY3Rpb24gdShkYXRlLCB0b2tlbikge1xuICAgIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gUXVhcnRlclxuICBROiBmdW5jdGlvbiBRKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAnUSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuXG4gICAgICBjYXNlICdRUSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgY2FzZSAnUW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgY2FzZSAnUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICBjYXNlICdRUVFRUSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cblxuICAgICAgY2FzZSAnUVFRUSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBxdWFydGVyXG4gIHE6IGZ1bmN0aW9uIHEoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdxJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG5cbiAgICAgIGNhc2UgJ3FxJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuXG4gICAgICBjYXNlICdxbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuXG4gICAgICBjYXNlICdxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG5cbiAgICAgIGNhc2UgJ3FxcXFxJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuXG4gICAgICBjYXNlICdxcXFxJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIE1vbnRoXG4gIE06IGZ1bmN0aW9uIE0oZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnTSc6XG4gICAgICBjYXNlICdNTSc6XG4gICAgICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuTShkYXRlLCB0b2tlbik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG5cbiAgICAgIGNhc2UgJ01vJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuXG4gICAgICBjYXNlICdNTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcblxuICAgICAgY2FzZSAnTU1NTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcblxuICAgICAgY2FzZSAnTU1NTSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIG1vbnRoXG4gIEw6IGZ1bmN0aW9uIEwoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgLi4uLCAxMlxuICAgICAgY2FzZSAnTCc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobW9udGggKyAxKTtcbiAgICAgIC8vIDAxLCAwMiwgLi4uLCAxMlxuXG4gICAgICBjYXNlICdMTCc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcblxuICAgICAgY2FzZSAnTG8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHtcbiAgICAgICAgICB1bml0OiAnbW9udGgnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG5cbiAgICAgIGNhc2UgJ0xMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuXG4gICAgICBjYXNlICdMTExMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuXG4gICAgICBjYXNlICdMTExMJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgd2VlayBvZiB5ZWFyXG4gIHc6IGZ1bmN0aW9uIHcoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIHdlZWsgPSBnZXRVVENXZWVrKGRhdGUsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHRva2VuID09PSAnd28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih3ZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBJU08gd2VlayBvZiB5ZWFyXG4gIEk6IGZ1bmN0aW9uIEkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGlzb1dlZWsgPSBnZXRVVENJU09XZWVrKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnSW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29XZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIGQoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnZG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0RhdGUoKSwge1xuICAgICAgICB1bml0OiAnZGF0ZSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuZChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIERheSBvZiB5ZWFyXG4gIEQ6IGZ1bmN0aW9uIEQoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mWWVhciA9IGdldFVUQ0RheU9mWWVhcihkYXRlKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0RvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF5T2ZZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICdkYXlPZlllYXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRheU9mWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHdlZWtcbiAgRTogZnVuY3Rpb24gRShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSAnRSc6XG4gICAgICBjYXNlICdFRSc6XG4gICAgICBjYXNlICdFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdFRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnRUVFRSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgZGF5IG9mIHdlZWtcbiAgZTogZnVuY3Rpb24gZShkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoTnRoIGRheSBvZiB3ZWVrIHdpdGggY3VycmVudCBsb2NhbGUgb3Igd2Vla1N0YXJ0c09uKVxuICAgICAgY2FzZSAnZSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuXG4gICAgICBjYXNlICdlZSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG5cbiAgICAgIGNhc2UgJ2VvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2VlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnZWVlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2VlZWUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrXG4gIGM6IGZ1bmN0aW9uIGMoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGxvY2FsRGF5T2ZXZWVrID0gKGRheU9mV2VlayAtIG9wdGlvbnMud2Vla1N0YXJ0c09uICsgOCkgJSA3IHx8IDc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKHNhbWUgYXMgaW4gYGVgKVxuICAgICAgY2FzZSAnYyc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuXG4gICAgICBjYXNlICdjYyc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcblxuICAgICAgY2FzZSAnY28nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihsb2NhbERheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnY2NjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdjY2NjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnY2NjYyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gSVNPIGRheSBvZiB3ZWVrXG4gIGk6IGZ1bmN0aW9uIGkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGlzb0RheU9mV2VlayA9IGRheU9mV2VlayA9PT0gMCA/IDcgOiBkYXlPZldlZWs7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAyXG4gICAgICBjYXNlICdpJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpc29EYXlPZldlZWspO1xuICAgICAgLy8gMDJcblxuICAgICAgY2FzZSAnaWknOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb0RheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDJuZFxuXG4gICAgICBjYXNlICdpbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb0RheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlXG5cbiAgICAgIGNhc2UgJ2lpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2lpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdpaWlpJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiBhKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSwgUE0sIG1pZG5pZ2h0LCBub29uXG4gIGI6IGZ1bmN0aW9uIGIoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWU7XG5cbiAgICBpZiAoaG91cnMgPT09IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA9PT0gMCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5taWRuaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYic6XG4gICAgICBjYXNlICdiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdiYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBjYXNlICdiYmJiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYmJiYic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gaW4gdGhlIG1vcm5pbmcsIGluIHRoZSBhZnRlcm5vb24sIGluIHRoZSBldmVuaW5nLCBhdCBuaWdodFxuICBCOiBmdW5jdGlvbiBCKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgaWYgKGhvdXJzID49IDE3KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmV2ZW5pbmc7XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5hZnRlcm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSA0KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1vcm5pbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubmlnaHQ7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnQic6XG4gICAgICBjYXNlICdCQic6XG4gICAgICBjYXNlICdCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnQkJCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ0JCQkInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIGgoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnaG8nKSB7XG4gICAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMjtcbiAgICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAxMjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5oKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gSChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdIbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDSG91cnMoKSwge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuSChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMTFdXG4gIEs6IGZ1bmN0aW9uIEsoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG5cbiAgICBpZiAodG9rZW4gPT09ICdLbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSG91ciBbMS0yNF1cbiAgazogZnVuY3Rpb24gayhkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDI0O1xuXG4gICAgaWYgKHRva2VuID09PSAna28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiBtKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ21vJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENNaW51dGVzKCksIHtcbiAgICAgICAgdW5pdDogJ21pbnV0ZSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMubShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIFNlY29uZFxuICBzOiBmdW5jdGlvbiBzKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ3NvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHtcbiAgICAgICAgdW5pdDogJ3NlY29uZCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMucyhkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiBTKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5TKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGFsd2F5cyBgJ1onYClcbiAgWDogZnVuY3Rpb24gWChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgaWYgKHRpbWV6b25lT2Zmc2V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gJ1onO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICdYJzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWGBcblxuICAgICAgY2FzZSAnWFhYWCc6XG4gICAgICBjYXNlICdYWCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhYYFxuXG4gICAgICBjYXNlICdYWFhYWCc6XG4gICAgICBjYXNlICdYWFgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGAnKzAwOjAwJ2Agb3IgZXF1aXZhbGVudClcbiAgeDogZnVuY3Rpb24geChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ3gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4YFxuXG4gICAgICBjYXNlICd4eHh4JzpcbiAgICAgIGNhc2UgJ3h4JzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eHhgXG5cbiAgICAgIGNhc2UgJ3h4eHh4JzpcbiAgICAgIGNhc2UgJ3h4eCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoR01UKVxuICBPOiBmdW5jdGlvbiBPKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAnTyc6XG4gICAgICBjYXNlICdPTyc6XG4gICAgICBjYXNlICdPT08nOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICdPT09PJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdGlvbilcbiAgejogZnVuY3Rpb24geihkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gU2hvcnRcbiAgICAgIGNhc2UgJ3onOlxuICAgICAgY2FzZSAnenonOlxuICAgICAgY2FzZSAnenp6JzpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICAgIC8vIExvbmdcblxuICAgICAgY2FzZSAnenp6eic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFNlY29uZHMgdGltZXN0YW1wXG4gIHQ6IGZ1bmN0aW9uIHQoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXN0YW1wID0gTWF0aC5mbG9vcihvcmlnaW5hbERhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAgVDogZnVuY3Rpb24gVChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBvcmlnaW5hbERhdGUuZ2V0VGltZSgpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVNob3J0KG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCk7XG4gIHZhciBtaW51dGVzID0gYWJzT2Zmc2V0ICUgNjA7XG5cbiAgaWYgKG1pbnV0ZXMgPT09IDApIHtcbiAgICByZXR1cm4gc2lnbiArIFN0cmluZyhob3Vycyk7XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKSArIGRlbGltaXRlciArIGFkZExlYWRpbmdaZXJvcyhtaW51dGVzLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgaWYgKG9mZnNldCAlIDYwID09PSAwKSB7XG4gICAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICAgIHJldHVybiBzaWduICsgYWRkTGVhZGluZ1plcm9zKE1hdGguYWJzKG9mZnNldCkgLyA2MCwgMik7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBhZGRMZWFkaW5nWmVyb3MoTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCksIDIpO1xuICB2YXIgbWludXRlcyA9IGFkZExlYWRpbmdaZXJvcyhhYnNPZmZzZXQgJSA2MCwgMik7XG4gIHJldHVybiBzaWduICsgaG91cnMgKyBkZWxpbWl0ZXIgKyBtaW51dGVzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsInZhciBkYXRlTG9uZ0Zvcm1hdHRlciA9IGZ1bmN0aW9uIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufTtcblxudmFyIHRpbWVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gdGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcHBwJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59O1xuXG52YXIgZGF0ZVRpbWVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gZGF0ZVRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgdmFyIG1hdGNoUmVzdWx0ID0gcGF0dGVybi5tYXRjaCgvKFArKShwKyk/LykgfHwgW107XG4gIHZhciBkYXRlUGF0dGVybiA9IG1hdGNoUmVzdWx0WzFdO1xuICB2YXIgdGltZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsyXTtcblxuICBpZiAoIXRpbWVQYXR0ZXJuKSB7XG4gICAgcmV0dXJuIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpO1xuICB9XG5cbiAgdmFyIGRhdGVUaW1lRm9ybWF0O1xuXG4gIHN3aXRjaCAoZGF0ZVBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBkYXRlVGltZUZvcm1hdC5yZXBsYWNlKCd7e2RhdGV9fScsIGRhdGVMb25nRm9ybWF0dGVyKGRhdGVQYXR0ZXJuLCBmb3JtYXRMb25nKSkucmVwbGFjZSgne3t0aW1lfX0nLCB0aW1lTG9uZ0Zvcm1hdHRlcih0aW1lUGF0dGVybiwgZm9ybWF0TG9uZykpO1xufTtcblxudmFyIGxvbmdGb3JtYXR0ZXJzID0ge1xuICBwOiB0aW1lTG9uZ0Zvcm1hdHRlcixcbiAgUDogZGF0ZVRpbWVMb25nRm9ybWF0dGVyXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9uZ0Zvcm1hdHRlcnM7IiwiLyoqXG4gKiBHb29nbGUgQ2hyb21lIGFzIG9mIDY3LjAuMzM5Ni44NyBpbnRyb2R1Y2VkIHRpbWV6b25lcyB3aXRoIG9mZnNldCB0aGF0IGluY2x1ZGVzIHNlY29uZHMuXG4gKiBUaGV5IHVzdWFsbHkgYXBwZWFyIGZvciBkYXRlcyB0aGF0IGRlbm90ZSB0aW1lIGJlZm9yZSB0aGUgdGltZXpvbmVzIHdlcmUgaW50cm9kdWNlZFxuICogKGUuZy4gZm9yICdFdXJvcGUvUHJhZ3VlJyB0aW1lem9uZSB0aGUgb2Zmc2V0IGlzIEdNVCswMDo1Nzo0NCBiZWZvcmUgMSBPY3RvYmVyIDE4OTFcbiAqIGFuZCBHTVQrMDE6MDA6MDAgYWZ0ZXIgdGhhdCBkYXRlKVxuICpcbiAqIERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyB0aGUgb2Zmc2V0IGluIG1pbnV0ZXMgYW5kIHdvdWxkIHJldHVybiA1NyBmb3IgdGhlIGV4YW1wbGUgYWJvdmUsXG4gKiB3aGljaCB3b3VsZCBsZWFkIHRvIGluY29ycmVjdCBjYWxjdWxhdGlvbnMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSB0aW1lem9uZSBvZmZzZXQgaW4gbWlsbGlzZWNvbmRzIHRoYXQgdGFrZXMgc2Vjb25kcyBpbiBhY2NvdW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKGRhdGUpIHtcbiAgdmFyIHV0Y0RhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQyhkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCksIGRhdGUuZ2V0SG91cnMoKSwgZGF0ZS5nZXRNaW51dGVzKCksIGRhdGUuZ2V0U2Vjb25kcygpLCBkYXRlLmdldE1pbGxpc2Vjb25kcygpKSk7XG4gIHV0Y0RhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpIC0gdXRjRGF0ZS5nZXRUaW1lKCk7XG59IiwidmFyIHByb3RlY3RlZERheU9mWWVhclRva2VucyA9IFsnRCcsICdERCddO1xudmFyIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zID0gWydZWScsICdZWVlZJ107XG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0aHJvd1Byb3RlY3RlZEVycm9yKHRva2VuLCBmb3JtYXQsIGlucHV0KSB7XG4gIGlmICh0b2tlbiA9PT0gJ1lZWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0QnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRgIGluc3RlYWQgb2YgYERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0REJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfVxufSIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIHNlY29uZCcsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSBzZWNvbmQnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnaGFsZiBhIG1pbnV0ZScsXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBtaW51dGUnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEgbWludXRlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgaG91cicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJzEgaG91cicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBkYXknLFxuICAgIG90aGVyOiAne3tjb3VudH19IGRheXMnXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB3ZWVrJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSB3ZWVrJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBtb250aCcsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgb25lOiAnMSBtb250aCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEgeWVhcicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdvdmVyIDEgeWVhcicsXG4gICAgb3RoZXI6ICdvdmVyIHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiAnYWxtb3N0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhbG1vc3Qge3tjb3VudH19IHllYXJzJ1xuICB9XG59O1xuXG52YXIgZm9ybWF0RGlzdGFuY2UgPSBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZSh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgdmFyIHRva2VuVmFsdWUgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG5cbiAgaWYgKHR5cGVvZiB0b2tlblZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWU7XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm9uZTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm90aGVyLnJlcGxhY2UoJ3t7Y291bnR9fScsIGNvdW50LnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiAmJiBvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICByZXR1cm4gJ2luICcgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIGFnbyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdERpc3RhbmNlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRm9ybWF0TG9uZ0ZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgLy8gVE9ETzogUmVtb3ZlIFN0cmluZygpXG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgIHZhciBmb3JtYXQgPSBhcmdzLmZvcm1hdHNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0c1thcmdzLmRlZmF1bHRXaWR0aF07XG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfTtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanNcIjtcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUsIE1NTU0gZG8sIHknLFxuICBsb25nOiAnTU1NTSBkbywgeScsXG4gIG1lZGl1bTogJ01NTSBkLCB5JyxcbiAgc2hvcnQ6ICdNTS9kZC95eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ2g6bW06c3MgYSB6enp6JyxcbiAgbG9uZzogJ2g6bW06c3MgYSB6JyxcbiAgbWVkaXVtOiAnaDptbTpzcyBhJyxcbiAgc2hvcnQ6ICdoOm1tIGEnXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJ2YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBcIidsYXN0JyBlZWVlICdhdCcgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ3llc3RlcmRheSBhdCcgcFwiLFxuICB0b2RheTogXCIndG9kYXkgYXQnIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ3RvbW9ycm93IGF0JyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ2F0JyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG5cbnZhciBmb3JtYXRSZWxhdGl2ZSA9IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0UmVsYXRpdmU7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRMb2NhbGl6ZUZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eUluZGV4LCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnRleHQgPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLmNvbnRleHQgPyBTdHJpbmcob3B0aW9ucy5jb250ZXh0KSA6ICdzdGFuZGFsb25lJztcbiAgICB2YXIgdmFsdWVzQXJyYXk7XG5cbiAgICBpZiAoY29udGV4dCA9PT0gJ2Zvcm1hdHRpbmcnICYmIGFyZ3MuZm9ybWF0dGluZ1ZhbHVlcykge1xuICAgICAgdmFyIGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCB8fCBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhciB3aWR0aCA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBkZWZhdWx0V2lkdGg7XG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1t3aWR0aF0gfHwgYXJncy5mb3JtYXR0aW5nVmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhciBfd2lkdGggPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy52YWx1ZXNbX3dpZHRoXSB8fCBhcmdzLnZhbHVlc1tfZGVmYXVsdFdpZHRoXTtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSBhcmdzLmFyZ3VtZW50Q2FsbGJhY2sgPyBhcmdzLmFyZ3VtZW50Q2FsbGJhY2soZGlydHlJbmRleCkgOiBkaXJ0eUluZGV4OyAvLyBAdHMtaWdub3JlOiBGb3Igc29tZSByZWFzb24gVHlwZVNjcmlwdCBqdXN0IGRvbid0IHdhbnQgdG8gbWF0Y2ggaXQsIG5vIG1hdHRlciBob3cgaGFyZCB3ZSB0cnkuIEkgY2hhbGxlbmdlIHlvdSB0byB0cnkgdG8gcmVtb3ZlIGl0IVxuXG4gICAgcmV0dXJuIHZhbHVlc0FycmF5W2luZGV4XTtcbiAgfTtcbn0iLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qc1wiO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0InLCAnQSddLFxuICBhYmJyZXZpYXRlZDogWydCQycsICdBRCddLFxuICB3aWRlOiBbJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzFzdCBxdWFydGVyJywgJzJuZCBxdWFydGVyJywgJzNyZCBxdWFydGVyJywgJzR0aCBxdWFydGVyJ11cbn07IC8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuLy8gSWYgeW91IGFyZSBtYWtpbmcgYSBuZXcgbG9jYWxlIGJhc2VkIG9uIHRoaXMgb25lLCBjaGVjayBpZiB0aGUgc2FtZSBpcyB0cnVlIGZvciB0aGUgbGFuZ3VhZ2UgeW91J3JlIHdvcmtpbmcgb24uXG4vLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbi8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cblxudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgd2lkZTogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnVycsICdUJywgJ0YnLCAnUyddLFxuICBzaG9ydDogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBhYmJyZXZpYXRlZDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgd2lkZTogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfVxufTtcblxudmFyIG9yZGluYWxOdW1iZXIgPSBmdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyLCBfb3B0aW9ucykge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTsgLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgLlxuICAvL1xuICAvLyBgdW5pdGAgY2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXRlJywgJ2RheU9mWWVhcicsXG4gIC8vICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJy5cblxuICB2YXIgcmVtMTAwID0gbnVtYmVyICUgMTAwO1xuXG4gIGlmIChyZW0xMDAgPiAyMCB8fCByZW0xMDAgPCAxMCkge1xuICAgIHN3aXRjaCAocmVtMTAwICUgMTApIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdzdCc7XG5cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICduZCc7XG5cbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdyZCc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bWJlciArICd0aCc7XG59O1xuXG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gYXJndW1lbnRDYWxsYmFjayhxdWFydGVyKSB7XG4gICAgICByZXR1cm4gcXVhcnRlciAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZE1hdGNoRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoO1xuICAgIHZhciBtYXRjaFBhdHRlcm4gPSB3aWR0aCAmJiBhcmdzLm1hdGNoUGF0dGVybnNbd2lkdGhdIHx8IGFyZ3MubWF0Y2hQYXR0ZXJuc1thcmdzLmRlZmF1bHRNYXRjaFdpZHRoXTtcbiAgICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2gobWF0Y2hQYXR0ZXJuKTtcblxuICAgIGlmICghbWF0Y2hSZXN1bHQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBtYXRjaGVkU3RyaW5nID0gbWF0Y2hSZXN1bHRbMF07XG4gICAgdmFyIHBhcnNlUGF0dGVybnMgPSB3aWR0aCAmJiBhcmdzLnBhcnNlUGF0dGVybnNbd2lkdGhdIHx8IGFyZ3MucGFyc2VQYXR0ZXJuc1thcmdzLmRlZmF1bHRQYXJzZVdpZHRoXTtcbiAgICB2YXIga2V5ID0gQXJyYXkuaXNBcnJheShwYXJzZVBhdHRlcm5zKSA/IGZpbmRJbmRleChwYXJzZVBhdHRlcm5zLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICB9KSA6IGZpbmRLZXkocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgfSk7XG4gICAgdmFyIHZhbHVlO1xuICAgIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKGtleSkgOiBrZXk7XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgdmFyIHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiByZXN0XG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHByZWRpY2F0ZShvYmplY3Rba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIga2V5ID0gMDsga2V5IDwgYXJyYXkubGVuZ3RoOyBrZXkrKykge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn0iLCJpbXBvcnQgYnVpbGRNYXRjaEZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qc1wiO1xuaW1wb3J0IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qc1wiO1xudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXihcXGQrKSh0aHxzdHxuZHxyZCk/L2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihifGEpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihiXFwuP1xccz9jXFwuP3xiXFwuP1xccz9jXFwuP1xccz9lXFwuP3xhXFwuP1xccz9kXFwuP3xjXFwuP1xccz9lXFwuPykvaSxcbiAgd2lkZTogL14oYmVmb3JlIGNocmlzdHxiZWZvcmUgY29tbW9uIGVyYXxhbm5vIGRvbWluaXxjb21tb24gZXJhKS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9eYi9pLCAvXihhfGMpL2ldXG59O1xudmFyIG1hdGNoUXVhcnRlclBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eWzEyMzRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXnFbMTIzNF0vaSxcbiAgd2lkZTogL15bMTIzNF0odGh8c3R8bmR8cmQpPyBxdWFydGVyL2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbnxmZWJ8bWFyfGFwcnxtYXl8anVufGp1bHxhdWd8c2VwfG9jdHxub3Z8ZGVjKS9pLFxuICB3aWRlOiAvXihqYW51YXJ5fGZlYnJ1YXJ5fG1hcmNofGFwcmlsfG1heXxqdW5lfGp1bHl8YXVndXN0fHNlcHRlbWJlcnxvY3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15qL2ksIC9eZi9pLCAvXm0vaSwgL15hL2ksIC9ebS9pLCAvXmovaSwgL15qL2ksIC9eYS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV0sXG4gIGFueTogWy9eamEvaSwgL15mL2ksIC9ebWFyL2ksIC9eYXAvaSwgL15tYXkvaSwgL15qdW4vaSwgL15qdWwvaSwgL15hdS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltzbXR3Zl0vaSxcbiAgc2hvcnQ6IC9eKHN1fG1vfHR1fHdlfHRofGZyfHNhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oc3VufG1vbnx0dWV8d2VkfHRodXxmcml8c2F0KS9pLFxuICB3aWRlOiAvXihzdW5kYXl8bW9uZGF5fHR1ZXNkYXl8d2VkbmVzZGF5fHRodXJzZGF5fGZyaWRheXxzYXR1cmRheSkvaVxufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXnMvaSwgL15tL2ksIC9edC9pLCAvXncvaSwgL150L2ksIC9eZi9pLCAvXnMvaV0sXG4gIGFueTogWy9ec3UvaSwgL15tL2ksIC9edHUvaSwgL153L2ksIC9edGgvaSwgL15mL2ksIC9ec2EvaV1cbn07XG52YXIgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihhfHB8bWl8bnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG4gIGFueTogL14oW2FwXVxcLj9cXHM/bVxcLj98bWlkbmlnaHR8bm9vbnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYS9pLFxuICAgIHBtOiAvXnAvaSxcbiAgICBtaWRuaWdodDogL15taS9pLFxuICAgIG5vb246IC9ebm8vaSxcbiAgICBtb3JuaW5nOiAvbW9ybmluZy9pLFxuICAgIGFmdGVybm9vbjogL2FmdGVybm9vbi9pLFxuICAgIGV2ZW5pbmc6IC9ldmVuaW5nL2ksXG4gICAgbmlnaHQ6IC9uaWdodC9pXG4gIH1cbn07XG52YXIgbWF0Y2ggPSB7XG4gIG9yZGluYWxOdW1iZXI6IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oe1xuICAgIG1hdGNoUGF0dGVybjogbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICBwYXJzZVBhdHRlcm46IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gdmFsdWVDYWxsYmFjayh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiB2YWx1ZUNhbGxiYWNrKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5tYXRjaFBhdHRlcm4pO1xuICAgIGlmICghbWF0Y2hSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtYXRjaGVkU3RyaW5nID0gbWF0Y2hSZXN1bHRbMF07XG4gICAgdmFyIHBhcnNlUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MucGFyc2VQYXR0ZXJuKTtcbiAgICBpZiAoIXBhcnNlUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2socGFyc2VSZXN1bHRbMF0pIDogcGFyc2VSZXN1bHRbMF07XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgdmFyIHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiByZXN0XG4gICAgfTtcbiAgfTtcbn0iLCJpbXBvcnQgZm9ybWF0RGlzdGFuY2UgZnJvbSBcIi4vX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSBcIi4vX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0UmVsYXRpdmUgZnJvbSBcIi4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGxvY2FsaXplIGZyb20gXCIuL19saWIvbG9jYWxpemUvaW5kZXguanNcIjtcbmltcG9ydCBtYXRjaCBmcm9tIFwiLi9fbGliL21hdGNoL2luZGV4LmpzXCI7XG5cbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBFbmdsaXNoIGxvY2FsZSAoVW5pdGVkIFN0YXRlcykuXG4gKiBAbGFuZ3VhZ2UgRW5nbGlzaFxuICogQGlzby02MzktMiBlbmdcbiAqIEBhdXRob3IgU2FzaGEgS29zcyBbQGtvc3Nub2NvcnBde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9rb3Nzbm9jb3JwfVxuICogQGF1dGhvciBMZXNoYSBLb3NzIFtAbGVzaGFrb3NzXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbGVzaGFrb3NzfVxuICovXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAnZW4tVVMnLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDBcbiAgICAvKiBTdW5kYXkgKi9cbiAgICAsXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiAxXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwiaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uLy4uL2xvY2FsZS9lbi1VUy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdExvY2FsZTsiLCJpbXBvcnQgaXNWYWxpZCBmcm9tIFwiLi4vaXNWYWxpZC9pbmRleC5qc1wiO1xuaW1wb3J0IHN1Yk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9uZ0Zvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuLCBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4sIHRocm93UHJvdGVjdGVkRXJyb3IgfSBmcm9tIFwiLi4vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vX2xpYi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uL19saWIvZGVmYXVsdExvY2FsZS9pbmRleC5qc1wiOyAvLyBUaGlzIFJlZ0V4cCBjb25zaXN0cyBvZiB0aHJlZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgYHxgOlxuLy8gLSBbeVlRcU1Md0lkRGVjaWhIS2ttc11vIG1hdGNoZXMgYW55IGF2YWlsYWJsZSBvcmRpbmFsIG51bWJlciB0b2tlblxuLy8gICAob25lIG9mIHRoZSBjZXJ0YWluIGxldHRlcnMgZm9sbG93ZWQgYnkgYG9gKVxuLy8gLSAoXFx3KVxcMSogbWF0Y2hlcyBhbnkgc2VxdWVuY2VzIG9mIHRoZSBzYW1lIGxldHRlclxuLy8gLSAnJyBtYXRjaGVzIHR3byBxdW90ZSBjaGFyYWN0ZXJzIGluIGEgcm93XG4vLyAtICcoJyd8W14nXSkrKCd8JCkgbWF0Y2hlcyBhbnl0aGluZyBzdXJyb3VuZGVkIGJ5IHR3byBxdW90ZSBjaGFyYWN0ZXJzICgnKSxcbi8vICAgZXhjZXB0IGEgc2luZ2xlIHF1b3RlIHN5bWJvbCwgd2hpY2ggZW5kcyB0aGUgc2VxdWVuY2UuXG4vLyAgIFR3byBxdW90ZSBjaGFyYWN0ZXJzIGRvIG5vdCBlbmQgdGhlIHNlcXVlbmNlLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtYXRjaGluZyBzaW5nbGUgcXVvdGVcbi8vICAgdGhlbiB0aGUgc2VxdWVuY2Ugd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4vLyAtIC4gbWF0Y2hlcyBhbnkgc2luZ2xlIGNoYXJhY3RlciB1bm1hdGNoZWQgYnkgcHJldmlvdXMgcGFydHMgb2YgdGhlIFJlZ0V4cHNcblxudmFyIGZvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvW3lZUXFNTHdJZERlY2loSEtrbXNdb3woXFx3KVxcMSp8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7IC8vIFRoaXMgUmVnRXhwIGNhdGNoZXMgc3ltYm9scyBlc2NhcGVkIGJ5IHF1b3RlcywgYW5kIGFsc29cbi8vIHNlcXVlbmNlcyBvZiBzeW1ib2xzIFAsIHAsIGFuZCB0aGUgY29tYmluYXRpb25zIGxpa2UgYFBQUFBQUFBwcHBwcGBcblxudmFyIGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1ArcCt8UCt8cCt8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG52YXIgZXNjYXBlZFN0cmluZ1JlZ0V4cCA9IC9eJyhbXl0qPyknPyQvO1xudmFyIGRvdWJsZVF1b3RlUmVnRXhwID0gLycnL2c7XG52YXIgdW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAgPSAvW2EtekEtWl0vO1xuLyoqXG4gKiBAbmFtZSBmb3JtYXRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgRm9ybWF0IHRoZSBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmcgaW4gdGhlIGdpdmVuIGZvcm1hdC4gVGhlIHJlc3VsdCBtYXkgdmFyeSBieSBsb2NhbGUuXG4gKlxuICogPiDimqDvuI8gUGxlYXNlIG5vdGUgdGhhdCB0aGUgYGZvcm1hdGAgdG9rZW5zIGRpZmZlciBmcm9tIE1vbWVudC5qcyBhbmQgb3RoZXIgbGlicmFyaWVzLlxuICogPiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiBUaGUgY2hhcmFjdGVycyB3cmFwcGVkIGJldHdlZW4gdHdvIHNpbmdsZSBxdW90ZXMgY2hhcmFjdGVycyAoJykgYXJlIGVzY2FwZWQuXG4gKiBUd28gc2luZ2xlIHF1b3RlcyBpbiBhIHJvdywgd2hldGhlciBpbnNpZGUgb3Igb3V0c2lkZSBhIHF1b3RlZCBzZXF1ZW5jZSwgcmVwcmVzZW50IGEgJ3JlYWwnIHNpbmdsZSBxdW90ZS5cbiAqIChzZWUgdGhlIGxhc3QgZXhhbXBsZSlcbiAqXG4gKiBGb3JtYXQgb2YgdGhlIHN0cmluZyBpcyBiYXNlZCBvbiBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlXG4gKiB3aXRoIGEgZmV3IGFkZGl0aW9ucyAoc2VlIG5vdGUgNyBiZWxvdyB0aGUgdGFibGUpLlxuICpcbiAqIEFjY2VwdGVkIHBhdHRlcm5zOlxuICogfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUGF0dGVybiB8IFJlc3VsdCBleGFtcGxlcyAgICAgICAgICAgICAgICAgICB8IE5vdGVzIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS18XG4gKiB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHLi5HR0cgIHwgQUQsIEJDICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHRyAgICB8IEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0dHICAgfCBBLCBCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IENhbGVuZGFyIHllYXIgICAgICAgICAgICAgICAgICAgfCB5ICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeW8gICAgICB8IDQ0dGgsIDFzdCwgMHRoLCAxN3RoICAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5ICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXl5ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgfCBZICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCAyMDE3dGggICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVlZICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICAgfCBSICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlIgICAgICB8IC00MywgMDAsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUiAgICAgfCAtMDQzLCAwMDAsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSICAgIHwgLTAwNDMsIDAwMDAsIDAwMDEsIDE5MDAsIDIwMTcgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUlIgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSw3IHxcbiAqIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgICB8IHUgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dSAgICAgIHwgLTQzLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1ICAgICB8IC0wNDMsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXUgICAgfCAtMDA0MywgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1dSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBRdWFydGVyIChmb3JtYXR0aW5nKSAgICAgICAgICAgIHwgUSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRUSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBRdWFydGVyIChzdGFuZC1hbG9uZSkgICAgICAgICAgIHwgcSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxcSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBNb250aCAoZm9ybWF0dGluZykgICAgICAgICAgICAgIHwgTSAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1vICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTSAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU0gICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NTSAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNb250aCAoc3RhbmQtYWxvbmUpICAgICAgICAgICAgIHwgTCAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTCAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTEwgICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMTCAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgIHwgdyAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHdvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3dyAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgIHwgSSAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJSSAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgIHwgZCAgICAgICB8IDEsIDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzMXN0ICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkZCAgICAgIHwgMDEsIDAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgIHwgRCAgICAgICB8IDEsIDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzNjV0aCwgMzY2dGggICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBERCAgICAgIHwgMDEsIDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREREICAgICB8IDAwMSwgMDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREREQgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IERheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICAgICAgfCBFLi5FRUUgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRUUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgIHwgaSAgICAgICB8IDEsIDIsIDMsIC4uLiwgNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA3dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaSAgICAgIHwgMDEsIDAyLCAuLi4sIDA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWkgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyLDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWlpICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8IDcgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICB8IGUgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWUgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlZSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChzdGFuZC1hbG9uZSkgfCBjICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY28gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2MgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjYyAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjY2MgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgYS4uYWEgICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYSAgICAgfCBhbSwgcG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhICAgIHwgYS5tLiwgcC5tLiAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYWEgICB8IGEsIHAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICB8IGIuLmJiICAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmIgICAgIHwgYW0sIHBtLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYiAgICB8IGEubS4sIHAubS4sIG5vb24sIG1pZG5pZ2h0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmJiICAgfCBhLCBwLCBuLCBtaSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICAgfCBCLi5CQkIgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQiAgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkJCICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICAgfCBoICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDEydGggICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhoICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICAgfCBIICAgICAgIHwgMCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSG8gICAgICB8IDB0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhIICAgICAgfCAwMCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICAgfCBLICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMCAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDB0aCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtLICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICAgfCBrICAgICAgIHwgMjQsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga28gICAgICB8IDI0dGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtrICAgICAgfCAyNCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW8gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1tICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc28gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNzICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICAgfCBTICAgICAgIHwgMCwgMSwgLi4uLCA5ICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1MgICAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTUyAgICAgfCAwMDAsIDAwMSwgLi4uLCA5OTkgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1NTICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy8gWikgICAgICAgIHwgWCAgICAgICB8IC0wOCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYICAgICAgfCAtMDgwMCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFggICAgIHwgLTA4OjAwLCArMDU6MzAsIFogICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWCAgICB8IC0wODAwLCArMDUzMCwgWiwgKzEyMzQ1NiAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFhYICAgfCAtMDg6MDAsICswNTozMCwgWiwgKzEyOjM0OjU2ICAgICAgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICAgfCB4ICAgICAgIHwgLTA4LCArMDUzMCwgKzAwICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHggICAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eCAgICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4ICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCwgKzEyMzQ1NiAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eHggICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAsICsxMjozNDo1NiB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgICB8IE8uLi5PT08gfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBPT09PICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiAgICAgfFxuICogfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgIHwgei4uLnp6eiB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8IDYgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHp6enogICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyLDYgICB8XG4gKiB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICAgfCB0ICAgICAgIHwgNTEyOTY5NTIwICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdHQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICB8IFQgICAgICAgfCA1MTI5Njk1MjA5MDAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUVCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgIHwgUCAgICAgICB8IDA0LzI5LzE0NTMgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQICAgICAgfCBBcHIgMjksIDE0NTMgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFAgICAgIHwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUCAgICB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgICB8IHAgICAgICAgfCAxMjowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcCAgICAgIHwgMTI6MDA6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwICAgICB8IDEyOjAwOjAwIEFNIEdNVCsyICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcHAgICAgfCAxMjowMDowMCBBTSBHTVQrMDI6MDAgICAgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IENvbWJpbmF0aW9uIG9mIGRhdGUgYW5kIHRpbWUgICAgfCBQcCAgICAgIHwgMDQvMjkvMTQ1MywgMTI6MDAgQU0gICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBwcCAgICB8IEFwciAyOSwgMTQ1MywgMTI6MDA6MDAgQU0gICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUHBwcCAgfCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQcHBwcHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgIHwgMiw3ICAgfFxuICogTm90ZXM6XG4gKiAxLiBcIkZvcm1hdHRpbmdcIiB1bml0cyAoZS5nLiBmb3JtYXR0aW5nIHF1YXJ0ZXIpIGluIHRoZSBkZWZhdWx0IGVuLVVTIGxvY2FsZVxuICogICAgYXJlIHRoZSBzYW1lIGFzIFwic3RhbmQtYWxvbmVcIiB1bml0cywgYnV0IGFyZSBkaWZmZXJlbnQgaW4gc29tZSBsYW5ndWFnZXMuXG4gKiAgICBcIkZvcm1hdHRpbmdcIiB1bml0cyBhcmUgZGVjbGluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBvZiB0aGUgbGFuZ3VhZ2VcbiAqICAgIGluIHRoZSBjb250ZXh0IG9mIGEgZGF0ZS4gXCJTdGFuZC1hbG9uZVwiIHVuaXRzIGFyZSBhbHdheXMgbm9taW5hdGl2ZSBzaW5ndWxhcjpcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIExMTEwnLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIE1NTU0nLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkdSdgXG4gKlxuICogMi4gQW55IHNlcXVlbmNlIG9mIHRoZSBpZGVudGljYWwgbGV0dGVycyBpcyBhIHBhdHRlcm4sIHVubGVzcyBpdCBpcyBlc2NhcGVkIGJ5XG4gKiAgICB0aGUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgKHNlZSBiZWxvdykuXG4gKiAgICBJZiB0aGUgc2VxdWVuY2UgaXMgbG9uZ2VyIHRoYW4gbGlzdGVkIGluIHRhYmxlIChlLmcuIGBFRUVFRUVFRUVFRWApXG4gKiAgICB0aGUgb3V0cHV0IHdpbGwgYmUgdGhlIHNhbWUgYXMgZGVmYXVsdCBwYXR0ZXJuIGZvciB0aGlzIHVuaXQsIHVzdWFsbHlcbiAqICAgIHRoZSBsb25nZXN0IG9uZSAoaW4gY2FzZSBvZiBJU08gd2Vla2RheXMsIGBFRUVFYCkuIERlZmF1bHQgcGF0dGVybnMgZm9yIHVuaXRzXG4gKiAgICBhcmUgbWFya2VkIHdpdGggXCIyXCIgaW4gdGhlIGxhc3QgY29sdW1uIG9mIHRoZSB0YWJsZS5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTScpIC8vPT4gJ05vdidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU0nKSAvLz0+ICdOJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogMy4gU29tZSBwYXR0ZXJucyBjb3VsZCBiZSB1bmxpbWl0ZWQgbGVuZ3RoIChzdWNoIGFzIGB5eXl5eXl5eWApLlxuICogICAgVGhlIG91dHB1dCB3aWxsIGJlIHBhZGRlZCB3aXRoIHplcm9zIHRvIG1hdGNoIHRoZSBsZW5ndGggb2YgdGhlIHBhdHRlcm4uXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICd5eXl5eXl5eScpIC8vPT4gJzAwMDAyMDE3J2BcbiAqXG4gKiA0LiBgUVFRUVFgIGFuZCBgcXFxcXFgIGNvdWxkIGJlIG5vdCBzdHJpY3RseSBudW1lcmljYWwgaW4gc29tZSBsb2NhbGVzLlxuICogICAgVGhlc2UgdG9rZW5zIHJlcHJlc2VudCB0aGUgc2hvcnRlc3QgZm9ybSBvZiB0aGUgcXVhcnRlci5cbiAqXG4gKiA1LiBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgcGF0dGVybnMgYXJlIEIuQy4geWVhcnM6XG4gKlxuICogICAgfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS18LS0tLS18XG4gKiAgICB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICogICAgfCBCQyAxIHwgICAxIHwgICAwIHxcbiAqICAgIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gKlxuICogICAgQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICogICAgd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkOlxuICpcbiAqICAgIHwgWWVhciB8IGB5eWAgfCBgdXVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS0tfC0tLS0tLXxcbiAqICAgIHwgMSAgICB8ICAgMDEgfCAgIDAxIHxcbiAqICAgIHwgMTQgICB8ICAgMTQgfCAgIDE0IHxcbiAqICAgIHwgMzc2ICB8ICAgNzYgfCAgMzc2IHxcbiAqICAgIHwgMTQ1MyB8ICAgNTMgfCAxNDUzIHxcbiAqXG4gKiAgICBUaGUgc2FtZSBkaWZmZXJlbmNlIGlzIHRydWUgZm9yIGxvY2FsIGFuZCBJU08gd2Vlay1udW1iZXJpbmcgeWVhcnMgKGBZYCBhbmQgYFJgKSxcbiAqICAgIGV4Y2VwdCBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFycyBhcmUgZGVwZW5kZW50IG9uIGBvcHRpb25zLndlZWtTdGFydHNPbmBcbiAqICAgIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIChjb21wYXJlIFtnZXRJU09XZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRJU09XZWVrWWVhcn1cbiAqICAgIGFuZCBbZ2V0V2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0V2Vla1llYXJ9KS5cbiAqXG4gKiA2LiBTcGVjaWZpYyBub24tbG9jYXRpb24gdGltZXpvbmVzIGFyZSBjdXJyZW50bHkgdW5hdmFpbGFibGUgaW4gYGRhdGUtZm5zYCxcbiAqICAgIHNvIHJpZ2h0IG5vdyB0aGVzZSB0b2tlbnMgZmFsbCBiYWNrIHRvIEdNVCB0aW1lem9uZXMuXG4gKlxuICogNy4gVGhlc2UgcGF0dGVybnMgYXJlIG5vdCBpbiB0aGUgVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogICAgLSBgaWA6IElTTyBkYXkgb2Ygd2Vla1xuICogICAgLSBgSWA6IElTTyB3ZWVrIG9mIHllYXJcbiAqICAgIC0gYFJgOiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICogICAgLSBgdGA6IHNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBUYDogbWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgb2A6IG9yZGluYWwgbnVtYmVyIG1vZGlmaWVyXG4gKiAgICAtIGBQYDogbG9uZyBsb2NhbGl6ZWQgZGF0ZVxuICogICAgLSBgcGA6IGxvbmcgbG9jYWxpemVkIHRpbWVcbiAqXG4gKiA4LiBgWVlgIGFuZCBgWVlZWWAgdG9rZW5zIHJlcHJlc2VudCB3ZWVrLW51bWJlcmluZyB5ZWFycyBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCB5ZWFycy5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIDkuIGBEYCBhbmQgYEREYCB0b2tlbnMgcmVwcmVzZW50IGRheXMgb2YgdGhlIHllYXIgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggZGF5cyBvZiB0aGUgbW9udGguXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0IC0gdGhlIHN0cmluZyBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0gezB8MXwyfDN8NHw1fDZ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZT0xXSAtIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgd2Vlay1udW1iZXJpbmcgeWVhciB0b2tlbnMgYFlZYCBhbmQgYFlZWVlgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIGRheSBvZiB5ZWFyIHRva2VucyBgRGAgYW5kIGBERGA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZ1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYGRhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGxvY2FsaXplYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGZvcm1hdExvbmdgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy53ZWVrU3RhcnRzT25gIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRgIGluc3RlYWQgb2YgYERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBmb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDExIEZlYnJ1YXJ5IDIwMTQgaW4gbWlkZGxlLWVuZGlhbiBmb3JtYXQ6XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgMSwgMTEpLCAnTU0vZGQveXl5eScpXG4gKiAvLz0+ICcwMi8xMS8yMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMiBKdWx5IDIwMTQgaW4gRXNwZXJhbnRvOlxuICogaW1wb3J0IHsgZW9Mb2NhbGUgfSBmcm9tICdkYXRlLWZucy9sb2NhbGUvZW8nXG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiksIFwiZG8gJ2RlJyBNTU1NIHl5eXlcIiwge1xuICogICBsb2NhbGU6IGVvTG9jYWxlXG4gKiB9KVxuICogLy89PiAnMi1hIGRlIGp1bGlvIDIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEVzY2FwZSBzdHJpbmcgYnkgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnM6XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiwgMTUpLCBcImggJ28nJ2Nsb2NrJ1wiKVxuICogLy89PiBcIjMgbydjbG9ja1wiXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0KGRpcnR5RGF0ZSwgZGlydHlGb3JtYXRTdHIsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9vcHRpb25zJGxvY2FsZSwgX3JlZjIsIF9yZWYzLCBfcmVmNCwgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUyLCBfb3B0aW9ucyRsb2NhbGUyJG9wdGksIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiwgX3JlZjUsIF9yZWY2LCBfcmVmNywgX29wdGlvbnMkd2Vla1N0YXJ0c09uLCBfb3B0aW9ucyRsb2NhbGUzLCBfb3B0aW9ucyRsb2NhbGUzJG9wdGksIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDQ7XG5cbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBmb3JtYXRTdHIgPSBTdHJpbmcoZGlydHlGb3JtYXRTdHIpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgbG9jYWxlID0gKF9yZWYgPSAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmxvY2FsZSkgIT09IG51bGwgJiYgX29wdGlvbnMkbG9jYWxlICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRsb2NhbGUgOiBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiBkZWZhdWx0TG9jYWxlO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmMiA9IChfcmVmMyA9IChfcmVmNCA9IChfb3B0aW9ucyRmaXJzdFdlZWtDb24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRmaXJzdFdlZWtDb24gIT09IHZvaWQgMCA/IF9vcHRpb25zJGZpcnN0V2Vla0NvbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIkb3B0aSA9IF9vcHRpb25zJGxvY2FsZTIub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiRvcHRpID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUyJG9wdGkuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmNCAhPT0gdm9pZCAwID8gX3JlZjQgOiBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IDEpOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciB3ZWVrU3RhcnRzT24gPSB0b0ludGVnZXIoKF9yZWY1ID0gKF9yZWY2ID0gKF9yZWY3ID0gKF9vcHRpb25zJHdlZWtTdGFydHNPbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9vcHRpb25zJHdlZWtTdGFydHNPbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkd2Vla1N0YXJ0c09uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyRvcHRpID0gX29wdGlvbnMkbG9jYWxlMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzJG9wdGkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZTMkb3B0aS53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWY3ICE9PSB2b2lkIDAgPyBfcmVmNyA6IGRlZmF1bHRPcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjYgIT09IHZvaWQgMCA/IF9yZWY2IDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0LndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjUgIT09IHZvaWQgMCA/IF9yZWY1IDogMCk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUubG9jYWxpemUpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBsb2NhbGl6ZSBwcm9wZXJ0eScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUuZm9ybWF0TG9uZykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGZvcm1hdExvbmcgcHJvcGVydHknKTtcbiAgfVxuXG4gIHZhciBvcmlnaW5hbERhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcblxuICBpZiAoIWlzVmFsaWQob3JpZ2luYWxEYXRlKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgfSAvLyBDb252ZXJ0IHRoZSBkYXRlIGluIHN5c3RlbSB0aW1lem9uZSB0byB0aGUgc2FtZSBkYXRlIGluIFVUQyswMDowMCB0aW1lem9uZS5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgd2hlbiBVVEMgZnVuY3Rpb25zIHdpbGwgYmUgaW1wbGVtZW50ZWQsIGxvY2FsZXMgd2lsbCBiZSBjb21wYXRpYmxlIHdpdGggdGhlbS5cbiAgLy8gU2VlIGFuIGlzc3VlIGFib3V0IFVUQyBmdW5jdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cblxuICB2YXIgdGltZXpvbmVPZmZzZXQgPSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSk7XG4gIHZhciB1dGNEYXRlID0gc3ViTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSwgdGltZXpvbmVPZmZzZXQpO1xuICB2YXIgZm9ybWF0dGVyT3B0aW9ucyA9IHtcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSxcbiAgICB3ZWVrU3RhcnRzT246IHdlZWtTdGFydHNPbixcbiAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICBfb3JpZ2luYWxEYXRlOiBvcmlnaW5hbERhdGVcbiAgfTtcbiAgdmFyIHJlc3VsdCA9IGZvcm1hdFN0ci5tYXRjaChsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09ICdwJyB8fCBmaXJzdENoYXJhY3RlciA9PT0gJ1AnKSB7XG4gICAgICB2YXIgbG9uZ0Zvcm1hdHRlciA9IGxvbmdGb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgIHJldHVybiBsb25nRm9ybWF0dGVyKHN1YnN0cmluZywgbG9jYWxlLmZvcm1hdExvbmcpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgLy8gUmVwbGFjZSB0d28gc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgd2l0aCBvbmUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlclxuICAgIGlmIChzdWJzdHJpbmcgPT09IFwiJydcIikge1xuICAgICAgcmV0dXJuIFwiJ1wiO1xuICAgIH1cblxuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcblxuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCInXCIpIHtcbiAgICAgIHJldHVybiBjbGVhbkVzY2FwZWRTdHJpbmcoc3Vic3RyaW5nKTtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGVyID0gZm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG5cbiAgICBpZiAoZm9ybWF0dGVyKSB7XG4gICAgICBpZiAoIShvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBTdHJpbmcoZGlydHlEYXRlKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbihzdWJzdHJpbmcpKSB7XG4gICAgICAgIHRocm93UHJvdGVjdGVkRXJyb3Ioc3Vic3RyaW5nLCBkaXJ0eUZvcm1hdFN0ciwgU3RyaW5nKGRpcnR5RGF0ZSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm9ybWF0dGVyKHV0Y0RhdGUsIHN1YnN0cmluZywgbG9jYWxlLmxvY2FsaXplLCBmb3JtYXR0ZXJPcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIubWF0Y2godW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHApKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignRm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyIGAnICsgZmlyc3RDaGFyYWN0ZXIgKyAnYCcpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBjbGVhbkVzY2FwZWRTdHJpbmcoaW5wdXQpIHtcbiAgdmFyIG1hdGNoZWQgPSBpbnB1dC5tYXRjaChlc2NhcGVkU3RyaW5nUmVnRXhwKTtcblxuICBpZiAoIW1hdGNoZWQpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlZFsxXS5yZXBsYWNlKGRvdWJsZVF1b3RlUmVnRXhwLCBcIidcIik7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgZnJvbVVuaXhUaW1lXG4gKiBAY2F0ZWdvcnkgVGltZXN0YW1wIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENyZWF0ZSBhIGRhdGUgZnJvbSBhIFVuaXggdGltZXN0YW1wLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ3JlYXRlIGEgZGF0ZSBmcm9tIGEgVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpLiBEZWNpbWFsIHZhbHVlcyB3aWxsIGJlIGRpc2NhcmRlZC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gdW5peFRpbWUgLSB0aGUgZ2l2ZW4gVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIGRhdGVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDcmVhdGUgdGhlIGRhdGUgMjkgRmVicnVhcnkgMjAxMiAxMTo0NTowNTpcbiAqIGNvbnN0IHJlc3VsdCA9IGZyb21Vbml4VGltZSgxMzMwNTE1OTA1KVxuICogLy89PiBXZWQgRmViIDI5IDIwMTIgMTE6NDU6MDVcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmcm9tVW5peFRpbWUoZGlydHlVbml4VGltZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHVuaXhUaW1lID0gdG9JbnRlZ2VyKGRpcnR5VW5peFRpbWUpO1xuICByZXR1cm4gdG9EYXRlKHVuaXhUaW1lICogMTAwMCk7XG59IiwiLyoqXG4gKiBEYXlzIGluIDEgd2Vlay5cbiAqXG4gKiBAbmFtZSBkYXlzSW5XZWVrXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5leHBvcnQgdmFyIGRheXNJbldlZWsgPSA3O1xuLyoqXG4gKiBEYXlzIGluIDEgeWVhclxuICogT25lIHllYXJzIGVxdWFscyAzNjUuMjQyNSBkYXlzIGFjY29yZGluZyB0byB0aGUgZm9ybXVsYTpcbiAqXG4gKiA+IExlYXAgeWVhciBvY2N1cmVzIGV2ZXJ5IDQgeWVhcnMsIGV4Y2VwdCBmb3IgeWVhcnMgdGhhdCBhcmUgZGl2aXNhYmxlIGJ5IDEwMCBhbmQgbm90IGRpdmlzYWJsZSBieSA0MDAuXG4gKiA+IDEgbWVhbiB5ZWFyID0gKDM2NSsxLzQtMS8xMDArMS80MDApIGRheXMgPSAzNjUuMjQyNSBkYXlzXG4gKlxuICogQG5hbWUgZGF5c0luWWVhclxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIGRheXNJblllYXIgPSAzNjUuMjQyNTtcbi8qKlxuICogTWF4aW11bSBhbGxvd2VkIHRpbWUuXG4gKlxuICogQG5hbWUgbWF4VGltZVxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIG1heFRpbWUgPSBNYXRoLnBvdygxMCwgOCkgKiAyNCAqIDYwICogNjAgKiAxMDAwO1xuLyoqXG4gKiBNaWxsaXNlY29uZHMgaW4gMSBtaW51dGVcbiAqXG4gKiBAbmFtZSBtaWxsaXNlY29uZHNJbk1pbnV0ZVxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIG1pbGxpc2Vjb25kc0luTWludXRlID0gNjAwMDA7XG4vKipcbiAqIE1pbGxpc2Vjb25kcyBpbiAxIGhvdXJcbiAqXG4gKiBAbmFtZSBtaWxsaXNlY29uZHNJbkhvdXJcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuZXhwb3J0IHZhciBtaWxsaXNlY29uZHNJbkhvdXIgPSAzNjAwMDAwO1xuLyoqXG4gKiBNaWxsaXNlY29uZHMgaW4gMSBzZWNvbmRcbiAqXG4gKiBAbmFtZSBtaWxsaXNlY29uZHNJblNlY29uZFxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIG1pbGxpc2Vjb25kc0luU2Vjb25kID0gMTAwMDtcbi8qKlxuICogTWluaW11bSBhbGxvd2VkIHRpbWUuXG4gKlxuICogQG5hbWUgbWluVGltZVxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIG1pblRpbWUgPSAtbWF4VGltZTtcbi8qKlxuICogTWludXRlcyBpbiAxIGhvdXJcbiAqXG4gKiBAbmFtZSBtaW51dGVzSW5Ib3VyXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgbWludXRlc0luSG91ciA9IDYwO1xuLyoqXG4gKiBNb250aHMgaW4gMSBxdWFydGVyXG4gKlxuICogQG5hbWUgbW9udGhzSW5RdWFydGVyXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgbW9udGhzSW5RdWFydGVyID0gMztcbi8qKlxuICogTW9udGhzIGluIDEgeWVhclxuICpcbiAqIEBuYW1lIG1vbnRoc0luWWVhclxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIG1vbnRoc0luWWVhciA9IDEyO1xuLyoqXG4gKiBRdWFydGVycyBpbiAxIHllYXJcbiAqXG4gKiBAbmFtZSBxdWFydGVyc0luWWVhclxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIHF1YXJ0ZXJzSW5ZZWFyID0gNDtcbi8qKlxuICogU2Vjb25kcyBpbiAxIGhvdXJcbiAqXG4gKiBAbmFtZSBzZWNvbmRzSW5Ib3VyXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgc2Vjb25kc0luSG91ciA9IDM2MDA7XG4vKipcbiAqIFNlY29uZHMgaW4gMSBtaW51dGVcbiAqXG4gKiBAbmFtZSBzZWNvbmRzSW5NaW51dGVcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuZXhwb3J0IHZhciBzZWNvbmRzSW5NaW51dGUgPSA2MDtcbi8qKlxuICogU2Vjb25kcyBpbiAxIGRheVxuICpcbiAqIEBuYW1lIHNlY29uZHNJbkRheVxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIHNlY29uZHNJbkRheSA9IHNlY29uZHNJbkhvdXIgKiAyNDtcbi8qKlxuICogU2Vjb25kcyBpbiAxIHdlZWtcbiAqXG4gKiBAbmFtZSBzZWNvbmRzSW5XZWVrXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgc2Vjb25kc0luV2VlayA9IHNlY29uZHNJbkRheSAqIDc7XG4vKipcbiAqIFNlY29uZHMgaW4gMSB5ZWFyXG4gKlxuICogQG5hbWUgc2Vjb25kc0luWWVhclxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIHNlY29uZHNJblllYXIgPSBzZWNvbmRzSW5EYXkgKiBkYXlzSW5ZZWFyO1xuLyoqXG4gKiBTZWNvbmRzIGluIDEgbW9udGhcbiAqXG4gKiBAbmFtZSBzZWNvbmRzSW5Nb250aFxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIHNlY29uZHNJbk1vbnRoID0gc2Vjb25kc0luWWVhciAvIDEyO1xuLyoqXG4gKiBTZWNvbmRzIGluIDEgcXVhcnRlclxuICpcbiAqIEBuYW1lIHNlY29uZHNJblF1YXJ0ZXJcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuZXhwb3J0IHZhciBzZWNvbmRzSW5RdWFydGVyID0gc2Vjb25kc0luTW9udGggKiAzOyIsImltcG9ydCB7IG1pbGxpc2Vjb25kc0luSG91ciwgbWlsbGlzZWNvbmRzSW5NaW51dGUgfSBmcm9tIFwiLi4vY29uc3RhbnRzL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgcGFyc2VJU09cbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgUGFyc2UgSVNPIHN0cmluZ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUGFyc2UgdGhlIGdpdmVuIHN0cmluZyBpbiBJU08gODYwMSBmb3JtYXQgYW5kIHJldHVybiBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEZ1bmN0aW9uIGFjY2VwdHMgY29tcGxldGUgSVNPIDg2MDEgZm9ybWF0cyBhcyB3ZWxsIGFzIHBhcnRpYWwgaW1wbGVtZW50YXRpb25zLlxuICogSVNPIDg2MDE6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDFcbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXNuJ3QgYSBzdHJpbmcsIHRoZSBmdW5jdGlvbiBjYW5ub3QgcGFyc2UgdGhlIHN0cmluZyBvclxuICogdGhlIHZhbHVlcyBhcmUgaW52YWxpZCwgaXQgcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHswfDF8Mn0gW29wdGlvbnMuYWRkaXRpb25hbERpZ2l0cz0yXSAtIHRoZSBhZGRpdGlvbmFsIG51bWJlciBvZiBkaWdpdHMgaW4gdGhlIGV4dGVuZGVkIHllYXIgZm9ybWF0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMuYWRkaXRpb25hbERpZ2l0c2AgbXVzdCBiZSAwLCAxIG9yIDJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCBzdHJpbmcgJzIwMTQtMDItMTFUMTE6MzA6MzAnIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBwYXJzZUlTTygnMjAxNC0wMi0xMVQxMTozMDozMCcpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHN0cmluZyAnKzAyMDE0MTAxJyB0byBkYXRlLFxuICogLy8gaWYgdGhlIGFkZGl0aW9uYWwgbnVtYmVyIG9mIGRpZ2l0cyBpbiB0aGUgZXh0ZW5kZWQgeWVhciBmb3JtYXQgaXMgMTpcbiAqIGNvbnN0IHJlc3VsdCA9IHBhcnNlSVNPKCcrMDIwMTQxMDEnLCB7IGFkZGl0aW9uYWxEaWdpdHM6IDEgfSlcbiAqIC8vPT4gRnJpIEFwciAxMSAyMDE0IDAwOjAwOjAwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2VJU08oYXJndW1lbnQsIG9wdGlvbnMpIHtcbiAgdmFyIF9vcHRpb25zJGFkZGl0aW9uYWxEaTtcblxuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGFkZGl0aW9uYWxEaWdpdHMgPSB0b0ludGVnZXIoKF9vcHRpb25zJGFkZGl0aW9uYWxEaSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hZGRpdGlvbmFsRGlnaXRzKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRhZGRpdGlvbmFsRGkgIT09IHZvaWQgMCA/IF9vcHRpb25zJGFkZGl0aW9uYWxEaSA6IDIpO1xuXG4gIGlmIChhZGRpdGlvbmFsRGlnaXRzICE9PSAyICYmIGFkZGl0aW9uYWxEaWdpdHMgIT09IDEgJiYgYWRkaXRpb25hbERpZ2l0cyAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdhZGRpdGlvbmFsRGlnaXRzIG11c3QgYmUgMCwgMSBvciAyJyk7XG4gIH1cblxuICBpZiAoISh0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCkgPT09ICdbb2JqZWN0IFN0cmluZ10nKSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG5cbiAgdmFyIGRhdGVTdHJpbmdzID0gc3BsaXREYXRlU3RyaW5nKGFyZ3VtZW50KTtcbiAgdmFyIGRhdGU7XG5cbiAgaWYgKGRhdGVTdHJpbmdzLmRhdGUpIHtcbiAgICB2YXIgcGFyc2VZZWFyUmVzdWx0ID0gcGFyc2VZZWFyKGRhdGVTdHJpbmdzLmRhdGUsIGFkZGl0aW9uYWxEaWdpdHMpO1xuICAgIGRhdGUgPSBwYXJzZURhdGUocGFyc2VZZWFyUmVzdWx0LnJlc3REYXRlU3RyaW5nLCBwYXJzZVllYXJSZXN1bHQueWVhcik7XG4gIH1cblxuICBpZiAoIWRhdGUgfHwgaXNOYU4oZGF0ZS5nZXRUaW1lKCkpKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cblxuICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIHZhciB0aW1lID0gMDtcbiAgdmFyIG9mZnNldDtcblxuICBpZiAoZGF0ZVN0cmluZ3MudGltZSkge1xuICAgIHRpbWUgPSBwYXJzZVRpbWUoZGF0ZVN0cmluZ3MudGltZSk7XG5cbiAgICBpZiAoaXNOYU4odGltZSkpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkYXRlU3RyaW5ncy50aW1lem9uZSkge1xuICAgIG9mZnNldCA9IHBhcnNlVGltZXpvbmUoZGF0ZVN0cmluZ3MudGltZXpvbmUpO1xuXG4gICAgaWYgKGlzTmFOKG9mZnNldCkpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgZGlydHlEYXRlID0gbmV3IERhdGUodGltZXN0YW1wICsgdGltZSk7IC8vIGpzIHBhcnNlZCBzdHJpbmcgYXNzdW1pbmcgaXQncyBpbiBVVEMgdGltZXpvbmVcbiAgICAvLyBidXQgd2UgbmVlZCBpdCB0byBiZSBwYXJzZWQgaW4gb3VyIHRpbWV6b25lXG4gICAgLy8gc28gd2UgdXNlIHV0YyB2YWx1ZXMgdG8gYnVpbGQgZGF0ZSBpbiBvdXIgdGltZXpvbmUuXG4gICAgLy8gWWVhciB2YWx1ZXMgZnJvbSAwIHRvIDk5IG1hcCB0byB0aGUgeWVhcnMgMTkwMCB0byAxOTk5XG4gICAgLy8gc28gc2V0IHllYXIgZXhwbGljaXRseSB3aXRoIHNldEZ1bGxZZWFyLlxuXG4gICAgdmFyIHJlc3VsdCA9IG5ldyBEYXRlKDApO1xuICAgIHJlc3VsdC5zZXRGdWxsWWVhcihkaXJ0eURhdGUuZ2V0VVRDRnVsbFllYXIoKSwgZGlydHlEYXRlLmdldFVUQ01vbnRoKCksIGRpcnR5RGF0ZS5nZXRVVENEYXRlKCkpO1xuICAgIHJlc3VsdC5zZXRIb3VycyhkaXJ0eURhdGUuZ2V0VVRDSG91cnMoKSwgZGlydHlEYXRlLmdldFVUQ01pbnV0ZXMoKSwgZGlydHlEYXRlLmdldFVUQ1NlY29uZHMoKSwgZGlydHlEYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIHRpbWUgKyBvZmZzZXQpO1xufVxudmFyIHBhdHRlcm5zID0ge1xuICBkYXRlVGltZURlbGltaXRlcjogL1tUIF0vLFxuICB0aW1lWm9uZURlbGltaXRlcjogL1taIF0vaSxcbiAgdGltZXpvbmU6IC8oW1orLV0uKikkL1xufTtcbnZhciBkYXRlUmVnZXggPSAvXi0/KD86KFxcZHszfSl8KFxcZHsyfSkoPzotPyhcXGR7Mn0pKT98VyhcXGR7Mn0pKD86LT8oXFxkezF9KSk/fCkkLztcbnZhciB0aW1lUmVnZXggPSAvXihcXGR7Mn0oPzpbLixdXFxkKik/KSg/Ojo/KFxcZHsyfSg/OlsuLF1cXGQqKT8pKT8oPzo6PyhcXGR7Mn0oPzpbLixdXFxkKik/KSk/JC87XG52YXIgdGltZXpvbmVSZWdleCA9IC9eKFsrLV0pKFxcZHsyfSkoPzo6PyhcXGR7Mn0pKT8kLztcblxuZnVuY3Rpb24gc3BsaXREYXRlU3RyaW5nKGRhdGVTdHJpbmcpIHtcbiAgdmFyIGRhdGVTdHJpbmdzID0ge307XG4gIHZhciBhcnJheSA9IGRhdGVTdHJpbmcuc3BsaXQocGF0dGVybnMuZGF0ZVRpbWVEZWxpbWl0ZXIpO1xuICB2YXIgdGltZVN0cmluZzsgLy8gVGhlIHJlZ2V4IG1hdGNoIHNob3VsZCBvbmx5IHJldHVybiBhdCBtYXhpbXVtIHR3byBhcnJheSBlbGVtZW50cy5cbiAgLy8gW2RhdGVdLCBbdGltZV0sIG9yIFtkYXRlLCB0aW1lXS5cblxuICBpZiAoYXJyYXkubGVuZ3RoID4gMikge1xuICAgIHJldHVybiBkYXRlU3RyaW5ncztcbiAgfVxuXG4gIGlmICgvOi8udGVzdChhcnJheVswXSkpIHtcbiAgICB0aW1lU3RyaW5nID0gYXJyYXlbMF07XG4gIH0gZWxzZSB7XG4gICAgZGF0ZVN0cmluZ3MuZGF0ZSA9IGFycmF5WzBdO1xuICAgIHRpbWVTdHJpbmcgPSBhcnJheVsxXTtcblxuICAgIGlmIChwYXR0ZXJucy50aW1lWm9uZURlbGltaXRlci50ZXN0KGRhdGVTdHJpbmdzLmRhdGUpKSB7XG4gICAgICBkYXRlU3RyaW5ncy5kYXRlID0gZGF0ZVN0cmluZy5zcGxpdChwYXR0ZXJucy50aW1lWm9uZURlbGltaXRlcilbMF07XG4gICAgICB0aW1lU3RyaW5nID0gZGF0ZVN0cmluZy5zdWJzdHIoZGF0ZVN0cmluZ3MuZGF0ZS5sZW5ndGgsIGRhdGVTdHJpbmcubGVuZ3RoKTtcbiAgICB9XG4gIH1cblxuICBpZiAodGltZVN0cmluZykge1xuICAgIHZhciB0b2tlbiA9IHBhdHRlcm5zLnRpbWV6b25lLmV4ZWModGltZVN0cmluZyk7XG5cbiAgICBpZiAodG9rZW4pIHtcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWUgPSB0aW1lU3RyaW5nLnJlcGxhY2UodG9rZW5bMV0sICcnKTtcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWV6b25lID0gdG9rZW5bMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWUgPSB0aW1lU3RyaW5nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkYXRlU3RyaW5ncztcbn1cblxuZnVuY3Rpb24gcGFyc2VZZWFyKGRhdGVTdHJpbmcsIGFkZGl0aW9uYWxEaWdpdHMpIHtcbiAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cCgnXig/OihcXFxcZHs0fXxbKy1dXFxcXGR7JyArICg0ICsgYWRkaXRpb25hbERpZ2l0cykgKyAnfSl8KFxcXFxkezJ9fFsrLV1cXFxcZHsnICsgKDIgKyBhZGRpdGlvbmFsRGlnaXRzKSArICd9KSQpJyk7XG4gIHZhciBjYXB0dXJlcyA9IGRhdGVTdHJpbmcubWF0Y2gocmVnZXgpOyAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgeWVhclxuXG4gIGlmICghY2FwdHVyZXMpIHJldHVybiB7XG4gICAgeWVhcjogTmFOLFxuICAgIHJlc3REYXRlU3RyaW5nOiAnJ1xuICB9O1xuICB2YXIgeWVhciA9IGNhcHR1cmVzWzFdID8gcGFyc2VJbnQoY2FwdHVyZXNbMV0pIDogbnVsbDtcbiAgdmFyIGNlbnR1cnkgPSBjYXB0dXJlc1syXSA/IHBhcnNlSW50KGNhcHR1cmVzWzJdKSA6IG51bGw7IC8vIGVpdGhlciB5ZWFyIG9yIGNlbnR1cnkgaXMgbnVsbCwgbm90IGJvdGhcblxuICByZXR1cm4ge1xuICAgIHllYXI6IGNlbnR1cnkgPT09IG51bGwgPyB5ZWFyIDogY2VudHVyeSAqIDEwMCxcbiAgICByZXN0RGF0ZVN0cmluZzogZGF0ZVN0cmluZy5zbGljZSgoY2FwdHVyZXNbMV0gfHwgY2FwdHVyZXNbMl0pLmxlbmd0aClcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXRlKGRhdGVTdHJpbmcsIHllYXIpIHtcbiAgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHllYXJcbiAgaWYgKHllYXIgPT09IG51bGwpIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB2YXIgY2FwdHVyZXMgPSBkYXRlU3RyaW5nLm1hdGNoKGRhdGVSZWdleCk7IC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCBzdHJpbmdcblxuICBpZiAoIWNhcHR1cmVzKSByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgdmFyIGlzV2Vla0RhdGUgPSAhIWNhcHR1cmVzWzRdO1xuICB2YXIgZGF5T2ZZZWFyID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1sxXSk7XG4gIHZhciBtb250aCA9IHBhcnNlRGF0ZVVuaXQoY2FwdHVyZXNbMl0pIC0gMTtcbiAgdmFyIGRheSA9IHBhcnNlRGF0ZVVuaXQoY2FwdHVyZXNbM10pO1xuICB2YXIgd2VlayA9IHBhcnNlRGF0ZVVuaXQoY2FwdHVyZXNbNF0pO1xuICB2YXIgZGF5T2ZXZWVrID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1s1XSkgLSAxO1xuXG4gIGlmIChpc1dlZWtEYXRlKSB7XG4gICAgaWYgKCF2YWxpZGF0ZVdlZWtEYXRlKHllYXIsIHdlZWssIGRheU9mV2VlaykpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cblxuICAgIHJldHVybiBkYXlPZklTT1dlZWtZZWFyKHllYXIsIHdlZWssIGRheU9mV2Vlayk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgwKTtcblxuICAgIGlmICghdmFsaWRhdGVEYXRlKHllYXIsIG1vbnRoLCBkYXkpIHx8ICF2YWxpZGF0ZURheU9mWWVhckRhdGUoeWVhciwgZGF5T2ZZZWFyKSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuXG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5ZWFyLCBtb250aCwgTWF0aC5tYXgoZGF5T2ZZZWFyLCBkYXkpKTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZURhdGVVbml0KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA/IHBhcnNlSW50KHZhbHVlKSA6IDE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVGltZSh0aW1lU3RyaW5nKSB7XG4gIHZhciBjYXB0dXJlcyA9IHRpbWVTdHJpbmcubWF0Y2godGltZVJlZ2V4KTtcbiAgaWYgKCFjYXB0dXJlcykgcmV0dXJuIE5hTjsgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHRpbWVcblxuICB2YXIgaG91cnMgPSBwYXJzZVRpbWVVbml0KGNhcHR1cmVzWzFdKTtcbiAgdmFyIG1pbnV0ZXMgPSBwYXJzZVRpbWVVbml0KGNhcHR1cmVzWzJdKTtcbiAgdmFyIHNlY29uZHMgPSBwYXJzZVRpbWVVbml0KGNhcHR1cmVzWzNdKTtcblxuICBpZiAoIXZhbGlkYXRlVGltZShob3VycywgbWludXRlcywgc2Vjb25kcykpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgcmV0dXJuIGhvdXJzICogbWlsbGlzZWNvbmRzSW5Ib3VyICsgbWludXRlcyAqIG1pbGxpc2Vjb25kc0luTWludXRlICsgc2Vjb25kcyAqIDEwMDA7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVGltZVVuaXQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICYmIHBhcnNlRmxvYXQodmFsdWUucmVwbGFjZSgnLCcsICcuJykpIHx8IDA7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVGltZXpvbmUodGltZXpvbmVTdHJpbmcpIHtcbiAgaWYgKHRpbWV6b25lU3RyaW5nID09PSAnWicpIHJldHVybiAwO1xuICB2YXIgY2FwdHVyZXMgPSB0aW1lem9uZVN0cmluZy5tYXRjaCh0aW1lem9uZVJlZ2V4KTtcbiAgaWYgKCFjYXB0dXJlcykgcmV0dXJuIDA7XG4gIHZhciBzaWduID0gY2FwdHVyZXNbMV0gPT09ICcrJyA/IC0xIDogMTtcbiAgdmFyIGhvdXJzID0gcGFyc2VJbnQoY2FwdHVyZXNbMl0pO1xuICB2YXIgbWludXRlcyA9IGNhcHR1cmVzWzNdICYmIHBhcnNlSW50KGNhcHR1cmVzWzNdKSB8fCAwO1xuXG4gIGlmICghdmFsaWRhdGVUaW1lem9uZShob3VycywgbWludXRlcykpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgcmV0dXJuIHNpZ24gKiAoaG91cnMgKiBtaWxsaXNlY29uZHNJbkhvdXIgKyBtaW51dGVzICogbWlsbGlzZWNvbmRzSW5NaW51dGUpO1xufVxuXG5mdW5jdGlvbiBkYXlPZklTT1dlZWtZZWFyKGlzb1dlZWtZZWFyLCB3ZWVrLCBkYXkpIHtcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgwKTtcbiAgZGF0ZS5zZXRVVENGdWxsWWVhcihpc29XZWVrWWVhciwgMCwgNCk7XG4gIHZhciBmb3VydGhPZkphbnVhcnlEYXkgPSBkYXRlLmdldFVUQ0RheSgpIHx8IDc7XG4gIHZhciBkaWZmID0gKHdlZWsgLSAxKSAqIDcgKyBkYXkgKyAxIC0gZm91cnRoT2ZKYW51YXJ5RGF5O1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBkaWZmKTtcbiAgcmV0dXJuIGRhdGU7XG59IC8vIFZhbGlkYXRpb24gZnVuY3Rpb25zXG4vLyBGZWJydWFyeSBpcyBudWxsIHRvIGhhbmRsZSB0aGUgbGVhcCB5ZWFyICh1c2luZyB8fClcblxuXG52YXIgZGF5c0luTW9udGhzID0gWzMxLCBudWxsLCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07XG5cbmZ1bmN0aW9uIGlzTGVhcFllYXJJbmRleCh5ZWFyKSB7XG4gIHJldHVybiB5ZWFyICUgNDAwID09PSAwIHx8IHllYXIgJSA0ID09PSAwICYmIHllYXIgJSAxMDAgIT09IDA7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRGF0ZSh5ZWFyLCBtb250aCwgZGF0ZSkge1xuICByZXR1cm4gbW9udGggPj0gMCAmJiBtb250aCA8PSAxMSAmJiBkYXRlID49IDEgJiYgZGF0ZSA8PSAoZGF5c0luTW9udGhzW21vbnRoXSB8fCAoaXNMZWFwWWVhckluZGV4KHllYXIpID8gMjkgOiAyOCkpO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZURheU9mWWVhckRhdGUoeWVhciwgZGF5T2ZZZWFyKSB7XG4gIHJldHVybiBkYXlPZlllYXIgPj0gMSAmJiBkYXlPZlllYXIgPD0gKGlzTGVhcFllYXJJbmRleCh5ZWFyKSA/IDM2NiA6IDM2NSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlV2Vla0RhdGUoX3llYXIsIHdlZWssIGRheSkge1xuICByZXR1cm4gd2VlayA+PSAxICYmIHdlZWsgPD0gNTMgJiYgZGF5ID49IDAgJiYgZGF5IDw9IDY7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVGltZShob3VycywgbWludXRlcywgc2Vjb25kcykge1xuICBpZiAoaG91cnMgPT09IDI0KSB7XG4gICAgcmV0dXJuIG1pbnV0ZXMgPT09IDAgJiYgc2Vjb25kcyA9PT0gMDtcbiAgfVxuXG4gIHJldHVybiBzZWNvbmRzID49IDAgJiYgc2Vjb25kcyA8IDYwICYmIG1pbnV0ZXMgPj0gMCAmJiBtaW51dGVzIDwgNjAgJiYgaG91cnMgPj0gMCAmJiBob3VycyA8IDI1O1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVRpbWV6b25lKF9ob3VycywgbWludXRlcykge1xuICByZXR1cm4gbWludXRlcyA+PSAwICYmIG1pbnV0ZXMgPD0gNTk7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBzdGFydE9mRGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBzdGFydCBvZiBhIGRheVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhIGRheSBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZEYXkobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gVHVlIFNlcCAwMiAyMDE0IDAwOjAwOjAwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZkRheShkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCBzdGFydE9mRGF5IGZyb20gXCIuLi9zdGFydE9mRGF5L2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc1NhbWVEYXlcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgQXJlIHRoZSBnaXZlbiBkYXRlcyBpbiB0aGUgc2FtZSBkYXkgKGFuZCB5ZWFyIGFuZCBtb250aCk/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBcmUgdGhlIGdpdmVuIGRhdGVzIGluIHRoZSBzYW1lIGRheSAoYW5kIHllYXIgYW5kIG1vbnRoKT9cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBmaXJzdCBkYXRlIHRvIGNoZWNrXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgc2Vjb25kIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZXMgYXJlIGluIHRoZSBzYW1lIGRheSAoYW5kIHllYXIgYW5kIG1vbnRoKVxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgNCBTZXB0ZW1iZXIgMDY6MDA6MDAgYW5kIDQgU2VwdGVtYmVyIDE4OjAwOjAwIGluIHRoZSBzYW1lIGRheT9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzU2FtZURheShuZXcgRGF0ZSgyMDE0LCA4LCA0LCA2LCAwKSwgbmV3IERhdGUoMjAxNCwgOCwgNCwgMTgsIDApKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFyZSA0IFNlcHRlbWJlciBhbmQgNCBPY3RvYmVyIGluIHRoZSBzYW1lIGRheT9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzU2FtZURheShuZXcgRGF0ZSgyMDE0LCA4LCA0KSwgbmV3IERhdGUoMjAxNCwgOSwgNCkpXG4gKiAvLz0+IGZhbHNlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFyZSA0IFNlcHRlbWJlciwgMjAxNCBhbmQgNCBTZXB0ZW1iZXIsIDIwMTUgaW4gdGhlIHNhbWUgZGF5P1xuICogY29uc3QgcmVzdWx0ID0gaXNTYW1lRGF5KG5ldyBEYXRlKDIwMTQsIDgsIDQpLCBuZXcgRGF0ZSgyMDE1LCA4LCA0KSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1NhbWVEYXkoZGlydHlEYXRlTGVmdCwgZGlydHlEYXRlUmlnaHQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlTGVmdFN0YXJ0T2ZEYXkgPSBzdGFydE9mRGF5KGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgZGF0ZVJpZ2h0U3RhcnRPZkRheSA9IHN0YXJ0T2ZEYXkoZGlydHlEYXRlUmlnaHQpO1xuICByZXR1cm4gZGF0ZUxlZnRTdGFydE9mRGF5LmdldFRpbWUoKSA9PT0gZGF0ZVJpZ2h0U3RhcnRPZkRheS5nZXRUaW1lKCk7XG59IiwiaW1wb3J0IGlzU2FtZURheSBmcm9tIFwiLi4vaXNTYW1lRGF5L2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc1RvZGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHRvZGF5P1xuICogQHB1cmUgZmFsc2VcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIElzIHRoZSBnaXZlbiBkYXRlIHRvZGF5P1xuICpcbiAqID4g4pqg77iPIFBsZWFzZSBub3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBpcyBub3QgcHJlc2VudCBpbiB0aGUgRlAgc3VibW9kdWxlIGFzXG4gKiA+IGl0IHVzZXMgYERhdGUubm93KClgIGludGVybmFsbHkgaGVuY2UgaW1wdXJlIGFuZCBjYW4ndCBiZSBzYWZlbHkgY3VycmllZC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZSBpcyB0b2RheVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRvZGF5IGlzIDYgT2N0b2JlciAyMDE0LCBpcyA2IE9jdG9iZXIgMTQ6MDA6MDAgdG9kYXk/XG4gKiBjb25zdCByZXN1bHQgPSBpc1RvZGF5KG5ldyBEYXRlKDIwMTQsIDksIDYsIDE0LCAwKSlcbiAqIC8vPT4gdHJ1ZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVG9kYXkoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gaXNTYW1lRGF5KGRpcnR5RGF0ZSwgRGF0ZS5ub3coKSk7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBnZXREYXlcbiAqIEBjYXRlZ29yeSBXZWVrZGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgZGF5IG9mIHRoZSB3ZWVrIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBkYXkgb2YgdGhlIHdlZWsgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBnaXZlbiBkYXRlXG4gKiBAcmV0dXJucyB7MHwxfDJ8M3w0fDV8Nn0gdGhlIGRheSBvZiB3ZWVrLCAwIHJlcHJlc2VudHMgU3VuZGF5XG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggZGF5IG9mIHRoZSB3ZWVrIGlzIDI5IEZlYnJ1YXJ5IDIwMTI/XG4gKiBjb25zdCByZXN1bHQgPSBnZXREYXkobmV3IERhdGUoMjAxMiwgMSwgMjkpKVxuICogLy89PiAzXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RGF5KGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0RGF5KCk7XG4gIHJldHVybiBkYXk7XG59IiwiY29uc3QgY291bnRyeVNlbGVjdElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbmNvbnN0IGNvdW50cnlTZWxlY3RMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbmNvbnN0IGNvdW50cnlTZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5jb25zdCBjb3VudHJpZXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGF0YWxpc3RcIik7XG5jb3VudHJ5U2VsZWN0TGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsIFwiY291bnRyeS1zZWxlY3RcIik7XG5jb3VudHJ5U2VsZWN0TGFiZWwuaW5uZXJUZXh0ID0gJ0NvdW50cnknO1xuY291bnRyeVNlbGVjdC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dFwiKTtcbmNvdW50cnlTZWxlY3Quc2V0QXR0cmlidXRlKFwibmFtZVwiLCBcImNvdW50cnktc2VsZWN0XCIpO1xuY291bnRyeVNlbGVjdC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImNvdW50cnktc2VsZWN0XCIpO1xuY291bnRyeVNlbGVjdC5zZXRBdHRyaWJ1dGUoXCJsaXN0XCIsIFwiY291bnRyaWVzXCIpO1xuY291bnRyaWVzLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiY291bnRyaWVzXCIpO1xuY291bnRyeVNlbGVjdElucHV0LmFwcGVuZChjb3VudHJ5U2VsZWN0TGFiZWwsIGNvdW50cnlTZWxlY3QsIGNvdW50cmllcyk7XG5cbmV4cG9ydCBjb25zdCBjb3VudHJ5TGlzdCA9IHtcbiAgQUY6IFwiQWZnaGFuaXN0YW5cIixcbiAgQUw6IFwiQWxiYW5pYVwiLFxuICBEWjogXCJBbGdlcmlhXCIsXG4gIEFTOiBcIkFtZXJpY2FuIFNhbW9hXCIsXG4gIEFEOiBcIkFuZG9ycmFcIixcbiAgQU86IFwiQW5nb2xhXCIsXG4gIEFJOiBcIkFuZ3VpbGxhXCIsXG4gIEFROiBcIkFudGFyY3RpY2FcIixcbiAgQUc6IFwiQW50aWd1YSBhbmQgQmFyYnVkYVwiLFxuICBBUjogXCJBcmdlbnRpbmFcIixcbiAgQU06IFwiQXJtZW5pYVwiLFxuICBBVzogXCJBcnViYVwiLFxuICBBVTogXCJBdXN0cmFsaWFcIixcbiAgQVQ6IFwiQXVzdHJpYVwiLFxuICBBWjogXCJBemVyYmFpamFuXCIsXG4gIEJTOiBcIkJhaGFtYXMgKHRoZSlcIixcbiAgQkg6IFwiQmFocmFpblwiLFxuICBCRDogXCJCYW5nbGFkZXNoXCIsXG4gIEJCOiBcIkJhcmJhZG9zXCIsXG4gIEJZOiBcIkJlbGFydXNcIixcbiAgQkU6IFwiQmVsZ2l1bVwiLFxuICBCWjogXCJCZWxpemVcIixcbiAgQko6IFwiQmVuaW5cIixcbiAgQk06IFwiQmVybXVkYVwiLFxuICBCVDogXCJCaHV0YW5cIixcbiAgQk86IFwiQm9saXZpYSAoUGx1cmluYXRpb25hbCBTdGF0ZSBvZilcIixcbiAgQlE6IFwiQm9uYWlyZSwgU2ludCBFdXN0YXRpdXMgYW5kIFNhYmFcIixcbiAgQkE6IFwiQm9zbmlhIGFuZCBIZXJ6ZWdvdmluYVwiLFxuICBCVzogXCJCb3Rzd2FuYVwiLFxuICBCVjogXCJCb3V2ZXQgSXNsYW5kXCIsXG4gIEJSOiBcIkJyYXppbFwiLFxuICBJTzogXCJCcml0aXNoIEluZGlhbiBPY2VhbiBUZXJyaXRvcnkgKHRoZSlcIixcbiAgQk46IFwiQnJ1bmVpIERhcnVzc2FsYW1cIixcbiAgQkc6IFwiQnVsZ2FyaWFcIixcbiAgQkY6IFwiQnVya2luYSBGYXNvXCIsXG4gIEJJOiBcIkJ1cnVuZGlcIixcbiAgQ1Y6IFwiQ2FibyBWZXJkZVwiLFxuICBLSDogXCJDYW1ib2RpYVwiLFxuICBDTTogXCJDYW1lcm9vblwiLFxuICBDQTogXCJDYW5hZGFcIixcbiAgS1k6IFwiQ2F5bWFuIElzbGFuZHMgKHRoZSlcIixcbiAgQ0Y6IFwiQ2VudHJhbCBBZnJpY2FuIFJlcHVibGljICh0aGUpXCIsXG4gIFREOiBcIkNoYWRcIixcbiAgQ0w6IFwiQ2hpbGVcIixcbiAgQ046IFwiQ2hpbmFcIixcbiAgQ1g6IFwiQ2hyaXN0bWFzIElzbGFuZFwiLFxuICBDQzogXCJDb2NvcyAoS2VlbGluZykgSXNsYW5kcyAodGhlKVwiLFxuICBDTzogXCJDb2xvbWJpYVwiLFxuICBLTTogXCJDb21vcm9zICh0aGUpXCIsXG4gIENEOiBcIkNvbmdvICh0aGUgRGVtb2NyYXRpYyBSZXB1YmxpYyBvZiB0aGUpXCIsXG4gIENHOiBcIkNvbmdvICh0aGUpXCIsXG4gIENLOiBcIkNvb2sgSXNsYW5kcyAodGhlKVwiLFxuICBDUjogXCJDb3N0YSBSaWNhXCIsXG4gIEhSOiBcIkNyb2F0aWFcIixcbiAgQ1U6IFwiQ3ViYVwiLFxuICBDVzogXCJDdXJhw6dhb1wiLFxuICBDWTogXCJDeXBydXNcIixcbiAgQ1o6IFwiQ3plY2hpYVwiLFxuICBDSTogXCJDw7R0ZSBkJ0l2b2lyZVwiLFxuICBESzogXCJEZW5tYXJrXCIsXG4gIERKOiBcIkRqaWJvdXRpXCIsXG4gIERNOiBcIkRvbWluaWNhXCIsXG4gIERPOiBcIkRvbWluaWNhbiBSZXB1YmxpYyAodGhlKVwiLFxuICBFQzogXCJFY3VhZG9yXCIsXG4gIEVHOiBcIkVneXB0XCIsXG4gIFNWOiBcIkVsIFNhbHZhZG9yXCIsXG4gIEdROiBcIkVxdWF0b3JpYWwgR3VpbmVhXCIsXG4gIEVSOiBcIkVyaXRyZWFcIixcbiAgRUU6IFwiRXN0b25pYVwiLFxuICBTWjogXCJFc3dhdGluaVwiLFxuICBFVDogXCJFdGhpb3BpYVwiLFxuICBGSzogXCJGYWxrbGFuZCBJc2xhbmRzICh0aGUpIFtNYWx2aW5hc11cIixcbiAgRk86IFwiRmFyb2UgSXNsYW5kcyAodGhlKVwiLFxuICBGSjogXCJGaWppXCIsXG4gIEZJOiBcIkZpbmxhbmRcIixcbiAgRlI6IFwiRnJhbmNlXCIsXG4gIEdGOiBcIkZyZW5jaCBHdWlhbmFcIixcbiAgUEY6IFwiRnJlbmNoIFBvbHluZXNpYVwiLFxuICBURjogXCJGcmVuY2ggU291dGhlcm4gVGVycml0b3JpZXMgKHRoZSlcIixcbiAgR0E6IFwiR2Fib25cIixcbiAgR006IFwiR2FtYmlhICh0aGUpXCIsXG4gIEdFOiBcIkdlb3JnaWFcIixcbiAgREU6IFwiR2VybWFueVwiLFxuICBHSDogXCJHaGFuYVwiLFxuICBHSTogXCJHaWJyYWx0YXJcIixcbiAgR1I6IFwiR3JlZWNlXCIsXG4gIEdMOiBcIkdyZWVubGFuZFwiLFxuICBHRDogXCJHcmVuYWRhXCIsXG4gIEdQOiBcIkd1YWRlbG91cGVcIixcbiAgR1U6IFwiR3VhbVwiLFxuICBHVDogXCJHdWF0ZW1hbGFcIixcbiAgR0c6IFwiR3Vlcm5zZXlcIixcbiAgR046IFwiR3VpbmVhXCIsXG4gIEdXOiBcIkd1aW5lYS1CaXNzYXVcIixcbiAgR1k6IFwiR3V5YW5hXCIsXG4gIEhUOiBcIkhhaXRpXCIsXG4gIEhNOiBcIkhlYXJkIElzbGFuZCBhbmQgTWNEb25hbGQgSXNsYW5kc1wiLFxuICBWQTogXCJIb2x5IFNlZSAodGhlKVwiLFxuICBITjogXCJIb25kdXJhc1wiLFxuICBISzogXCJIb25nIEtvbmdcIixcbiAgSFU6IFwiSHVuZ2FyeVwiLFxuICBJUzogXCJJY2VsYW5kXCIsXG4gIElOOiBcIkluZGlhXCIsXG4gIElEOiBcIkluZG9uZXNpYVwiLFxuICBJUjogXCJJcmFuIChJc2xhbWljIFJlcHVibGljIG9mKVwiLFxuICBJUTogXCJJcmFxXCIsXG4gIElFOiBcIklyZWxhbmRcIixcbiAgSU06IFwiSXNsZSBvZiBNYW5cIixcbiAgSUw6IFwiSXNyYWVsXCIsXG4gIElUOiBcIkl0YWx5XCIsXG4gIEpNOiBcIkphbWFpY2FcIixcbiAgSlA6IFwiSmFwYW5cIixcbiAgSkU6IFwiSmVyc2V5XCIsXG4gIEpPOiBcIkpvcmRhblwiLFxuICBLWjogXCJLYXpha2hzdGFuXCIsXG4gIEtFOiBcIktlbnlhXCIsXG4gIEtJOiBcIktpcmliYXRpXCIsXG4gIEtQOiBcIktvcmVhICh0aGUgRGVtb2NyYXRpYyBQZW9wbGUncyBSZXB1YmxpYyBvZilcIixcbiAgS1I6IFwiS29yZWEgKHRoZSBSZXB1YmxpYyBvZilcIixcbiAgS1c6IFwiS3V3YWl0XCIsXG4gIEtHOiBcIkt5cmd5enN0YW5cIixcbiAgTEE6IFwiTGFvIFBlb3BsZSdzIERlbW9jcmF0aWMgUmVwdWJsaWMgKHRoZSlcIixcbiAgTFY6IFwiTGF0dmlhXCIsXG4gIExCOiBcIkxlYmFub25cIixcbiAgTFM6IFwiTGVzb3Rob1wiLFxuICBMUjogXCJMaWJlcmlhXCIsXG4gIExZOiBcIkxpYnlhXCIsXG4gIExJOiBcIkxpZWNodGVuc3RlaW5cIixcbiAgTFQ6IFwiTGl0aHVhbmlhXCIsXG4gIExVOiBcIkx1eGVtYm91cmdcIixcbiAgTU86IFwiTWFjYW9cIixcbiAgTUc6IFwiTWFkYWdhc2NhclwiLFxuICBNVzogXCJNYWxhd2lcIixcbiAgTVk6IFwiTWFsYXlzaWFcIixcbiAgTVY6IFwiTWFsZGl2ZXNcIixcbiAgTUw6IFwiTWFsaVwiLFxuICBNVDogXCJNYWx0YVwiLFxuICBNSDogXCJNYXJzaGFsbCBJc2xhbmRzICh0aGUpXCIsXG4gIE1ROiBcIk1hcnRpbmlxdWVcIixcbiAgTVI6IFwiTWF1cml0YW5pYVwiLFxuICBNVTogXCJNYXVyaXRpdXNcIixcbiAgWVQ6IFwiTWF5b3R0ZVwiLFxuICBNWDogXCJNZXhpY29cIixcbiAgRk06IFwiTWljcm9uZXNpYSAoRmVkZXJhdGVkIFN0YXRlcyBvZilcIixcbiAgTUQ6IFwiTW9sZG92YSAodGhlIFJlcHVibGljIG9mKVwiLFxuICBNQzogXCJNb25hY29cIixcbiAgTU46IFwiTW9uZ29saWFcIixcbiAgTUU6IFwiTW9udGVuZWdyb1wiLFxuICBNUzogXCJNb250c2VycmF0XCIsXG4gIE1BOiBcIk1vcm9jY29cIixcbiAgTVo6IFwiTW96YW1iaXF1ZVwiLFxuICBNTTogXCJNeWFubWFyXCIsXG4gIE5BOiBcIk5hbWliaWFcIixcbiAgTlI6IFwiTmF1cnVcIixcbiAgTlA6IFwiTmVwYWxcIixcbiAgTkw6IFwiTmV0aGVybGFuZHMgKHRoZSlcIixcbiAgTkM6IFwiTmV3IENhbGVkb25pYVwiLFxuICBOWjogXCJOZXcgWmVhbGFuZFwiLFxuICBOSTogXCJOaWNhcmFndWFcIixcbiAgTkU6IFwiTmlnZXIgKHRoZSlcIixcbiAgTkc6IFwiTmlnZXJpYVwiLFxuICBOVTogXCJOaXVlXCIsXG4gIE5GOiBcIk5vcmZvbGsgSXNsYW5kXCIsXG4gIE1QOiBcIk5vcnRoZXJuIE1hcmlhbmEgSXNsYW5kcyAodGhlKVwiLFxuICBOTzogXCJOb3J3YXlcIixcbiAgT006IFwiT21hblwiLFxuICBQSzogXCJQYWtpc3RhblwiLFxuICBQVzogXCJQYWxhdVwiLFxuICBQUzogXCJQYWxlc3RpbmUsIFN0YXRlIG9mXCIsXG4gIFBBOiBcIlBhbmFtYVwiLFxuICBQRzogXCJQYXB1YSBOZXcgR3VpbmVhXCIsXG4gIFBZOiBcIlBhcmFndWF5XCIsXG4gIFBFOiBcIlBlcnVcIixcbiAgUEg6IFwiUGhpbGlwcGluZXMgKHRoZSlcIixcbiAgUE46IFwiUGl0Y2Fpcm5cIixcbiAgUEw6IFwiUG9sYW5kXCIsXG4gIFBUOiBcIlBvcnR1Z2FsXCIsXG4gIFBSOiBcIlB1ZXJ0byBSaWNvXCIsXG4gIFFBOiBcIlFhdGFyXCIsXG4gIE1LOiBcIlJlcHVibGljIG9mIE5vcnRoIE1hY2Vkb25pYVwiLFxuICBSTzogXCJSb21hbmlhXCIsXG4gIFJVOiBcIlJ1c3NpYW4gRmVkZXJhdGlvbiAodGhlKVwiLFxuICBSVzogXCJSd2FuZGFcIixcbiAgUkU6IFwiUsOpdW5pb25cIixcbiAgQkw6IFwiU2FpbnQgQmFydGjDqWxlbXlcIixcbiAgU0g6IFwiU2FpbnQgSGVsZW5hLCBBc2NlbnNpb24gYW5kIFRyaXN0YW4gZGEgQ3VuaGFcIixcbiAgS046IFwiU2FpbnQgS2l0dHMgYW5kIE5ldmlzXCIsXG4gIExDOiBcIlNhaW50IEx1Y2lhXCIsXG4gIE1GOiBcIlNhaW50IE1hcnRpbiAoRnJlbmNoIHBhcnQpXCIsXG4gIFBNOiBcIlNhaW50IFBpZXJyZSBhbmQgTWlxdWVsb25cIixcbiAgVkM6IFwiU2FpbnQgVmluY2VudCBhbmQgdGhlIEdyZW5hZGluZXNcIixcbiAgV1M6IFwiU2Ftb2FcIixcbiAgU006IFwiU2FuIE1hcmlub1wiLFxuICBTVDogXCJTYW8gVG9tZSBhbmQgUHJpbmNpcGVcIixcbiAgU0E6IFwiU2F1ZGkgQXJhYmlhXCIsXG4gIFNOOiBcIlNlbmVnYWxcIixcbiAgUlM6IFwiU2VyYmlhXCIsXG4gIFNDOiBcIlNleWNoZWxsZXNcIixcbiAgU0w6IFwiU2llcnJhIExlb25lXCIsXG4gIFNHOiBcIlNpbmdhcG9yZVwiLFxuICBTWDogXCJTaW50IE1hYXJ0ZW4gKER1dGNoIHBhcnQpXCIsXG4gIFNLOiBcIlNsb3Zha2lhXCIsXG4gIFNJOiBcIlNsb3ZlbmlhXCIsXG4gIFNCOiBcIlNvbG9tb24gSXNsYW5kc1wiLFxuICBTTzogXCJTb21hbGlhXCIsXG4gIFpBOiBcIlNvdXRoIEFmcmljYVwiLFxuICBHUzogXCJTb3V0aCBHZW9yZ2lhIGFuZCB0aGUgU291dGggU2FuZHdpY2ggSXNsYW5kc1wiLFxuICBTUzogXCJTb3V0aCBTdWRhblwiLFxuICBFUzogXCJTcGFpblwiLFxuICBMSzogXCJTcmkgTGFua2FcIixcbiAgU0Q6IFwiU3VkYW4gKHRoZSlcIixcbiAgU1I6IFwiU3VyaW5hbWVcIixcbiAgU0o6IFwiU3ZhbGJhcmQgYW5kIEphbiBNYXllblwiLFxuICBTRTogXCJTd2VkZW5cIixcbiAgQ0g6IFwiU3dpdHplcmxhbmRcIixcbiAgU1k6IFwiU3lyaWFuIEFyYWIgUmVwdWJsaWNcIixcbiAgVFc6IFwiVGFpd2FuXCIsXG4gIFRKOiBcIlRhamlraXN0YW5cIixcbiAgVFo6IFwiVGFuemFuaWEsIFVuaXRlZCBSZXB1YmxpYyBvZlwiLFxuICBUSDogXCJUaGFpbGFuZFwiLFxuICBUTDogXCJUaW1vci1MZXN0ZVwiLFxuICBURzogXCJUb2dvXCIsXG4gIFRLOiBcIlRva2VsYXVcIixcbiAgVE86IFwiVG9uZ2FcIixcbiAgVFQ6IFwiVHJpbmlkYWQgYW5kIFRvYmFnb1wiLFxuICBUTjogXCJUdW5pc2lhXCIsXG4gIFRSOiBcIlR1cmtleVwiLFxuICBUTTogXCJUdXJrbWVuaXN0YW5cIixcbiAgVEM6IFwiVHVya3MgYW5kIENhaWNvcyBJc2xhbmRzICh0aGUpXCIsXG4gIFRWOiBcIlR1dmFsdVwiLFxuICBVRzogXCJVZ2FuZGFcIixcbiAgVUE6IFwiVWtyYWluZVwiLFxuICBBRTogXCJVbml0ZWQgQXJhYiBFbWlyYXRlcyAodGhlKVwiLFxuICBHQjogXCJVbml0ZWQgS2luZ2RvbSBvZiBHcmVhdCBCcml0YWluIGFuZCBOb3J0aGVybiBJcmVsYW5kICh0aGUpXCIsXG4gIFVNOiBcIlVuaXRlZCBTdGF0ZXMgTWlub3IgT3V0bHlpbmcgSXNsYW5kcyAodGhlKVwiLFxuICBVUzogXCJVbml0ZWQgU3RhdGVzIG9mIEFtZXJpY2EgKHRoZSlcIixcbiAgVVk6IFwiVXJ1Z3VheVwiLFxuICBVWjogXCJVemJla2lzdGFuXCIsXG4gIFZVOiBcIlZhbnVhdHVcIixcbiAgVkU6IFwiVmVuZXp1ZWxhIChCb2xpdmFyaWFuIFJlcHVibGljIG9mKVwiLFxuICBWTjogXCJWaWV0IE5hbVwiLFxuICBWRzogXCJWaXJnaW4gSXNsYW5kcyAoQnJpdGlzaClcIixcbiAgVkk6IFwiVmlyZ2luIElzbGFuZHMgKFUuUy4pXCIsXG4gIFdGOiBcIldhbGxpcyBhbmQgRnV0dW5hXCIsXG4gIEVIOiBcIldlc3Rlcm4gU2FoYXJhXCIsXG4gIFlFOiBcIlllbWVuXCIsXG4gIFpNOiBcIlphbWJpYVwiLFxuICBaVzogXCJaaW1iYWJ3ZVwiLFxuICBBWDogXCLDhWxhbmQgSXNsYW5kc1wiLFxufTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG5mb3IgKGNvbnN0IGNvdW50cnkgaW4gY291bnRyeUxpc3QpIHtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjb3VudHJ5TGlzdCwgY291bnRyeSkpIHtcbiAgICBjb25zdCBvcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgIG9wdC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBjb3VudHJ5TGlzdFtjb3VudHJ5XSk7XG4gICAgb3B0LmlubmVyVGV4dCA9IGNvdW50cnk7XG4gICAgb3B0LmRhdGFzZXQudmFsdWUgPSBjb3VudHJ5O1xuICAgIGNvdW50cmllcy5hcHBlbmRDaGlsZChvcHQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvdW50cnlTZWxlY3RJbnB1dDtcbiIsImNvbnN0IHN0YXRlc1NlbGVjdElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbnN0YXRlc1NlbGVjdElucHV0LmNsYXNzTGlzdC5hZGQoJ25vLWRpc3BsYXknKTtcbmNvbnN0IHN0YXRlc1NlbGVjdExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbmNvbnN0IHN0YXRlc1NlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG5jb25zdCBzdGF0ZXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkYXRhbGlzdCcpO1xuc3RhdGVzU2VsZWN0TGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLCAnc3RhdGVzLXNlbGVjdCcpO1xuc3RhdGVzU2VsZWN0TGFiZWwuaW5uZXJUZXh0ID0gJ1N0YXRlJztcbnN0YXRlc1NlbGVjdC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dCcpO1xuc3RhdGVzU2VsZWN0LnNldEF0dHJpYnV0ZSgnbmFtZScsICdzdGF0ZXMtc2VsZWN0Jyk7XG5zdGF0ZXNTZWxlY3Quc2V0QXR0cmlidXRlKCdpZCcsICdzdGF0ZXMtc2VsZWN0Jyk7XG5zdGF0ZXNTZWxlY3Quc2V0QXR0cmlidXRlKCdsaXN0JywgJ3N0YXRlcycpO1xuc3RhdGVzLnNldEF0dHJpYnV0ZSgnaWQnLCAnc3RhdGVzJyk7XG5zdGF0ZXNTZWxlY3RJbnB1dC5hcHBlbmQoc3RhdGVzU2VsZWN0TGFiZWwsIHN0YXRlc1NlbGVjdCwgc3RhdGVzKTtcblxuY29uc3Qgc3RhdGVzTGlzdCA9IHtcbiAgQUw6ICdBbGFiYW1hJyxcbiAgQUs6ICdBbGFza2EnLFxuICBBWjogJ0FyaXpvbmEnLFxuICBBUjogJ0Fya2Fuc2FzJyxcbiAgQ0E6ICdDYWxpZm9ybmlhJyxcbiAgQ086ICdDb2xvcmFkbycsXG4gIENUOiAnQ29ubmVjdGljdXQnLFxuICBERTogJ0RlbGF3YXJlJyxcbiAgRkw6ICdGbG9yaWRhJyxcbiAgR0E6ICdHZW9yZ2lhJyxcbiAgSEk6ICdIYXdhaWknLFxuICBJRDogJ0lkYWhvJyxcbiAgSUw6ICdJbGxpbm9pcycsXG4gIElOOiAnSW5kaWFuYScsXG4gIElBOiAnSW93YScsXG4gIEtTOiAnS2Fuc2FzJyxcbiAgS1k6ICdLZW50dWNreScsXG4gIExBOiAnTG91aXNpYW5hJyxcbiAgTUU6ICdNYWluZScsXG4gIE1EOiAnTWFyeWxhbmQnLFxuICBNQTogJ01hc3NhY2h1c2V0dHMnLFxuICBNSTogJ01pY2hpZ2FuJyxcbiAgTU46ICdNaW5uZXNvdGEnLFxuICBNUzogJ01pc3Npc3NpcHBpJyxcbiAgTU86ICdNaXNzb3VyaScsXG4gIE1UOiAnTW9udGFuYScsXG4gIE5FOiAnTmVicmFza2EnLFxuICBOVjogJ05ldmFkYScsXG4gIE5IOiAnTmV3IEhhbXBzaGlyZScsXG4gIE5KOiAnTmV3IEplcnNleScsXG4gIE5NOiAnTmV3IE1leGljbycsXG4gIE5ZOiAnTmV3IFlvcmsnLFxuICBOQzogJ05vcnRoIENhcm9saW5hJyxcbiAgTkQ6ICdOb3J0aCBEYWtvdGEnLFxuICBPSDogJ09oaW8nLFxuICBPSzogJ09rbGFob21hJyxcbiAgT1I6ICdPcmVnb24nLFxuICBQQTogJ1Blbm5zeWx2YW5pYScsXG4gIFJJOiAnUmhvZGUgSXNsYW5kJyxcbiAgU0M6ICdTb3V0aCBDYXJvbGluYScsXG4gIFNEOiAnU291dGggRGFrb3RhJyxcbiAgVE46ICdUZW5uZXNzZWUnLFxuICBUWDogJ1RleGFzJyxcbiAgVVQ6ICdVdGFoJyxcbiAgVlQ6ICdWZXJtb250JyxcbiAgVkE6ICdWaXJnaW5pYScsXG4gIFdBOiAnV2FzaGluZ3RvbicsXG4gIFdWOiAnV2VzdCBWaXJnaW5pYScsXG4gIFdJOiAnV2lzY29uc2luJyxcbiAgV1k6ICdXeW9taW5nJyxcbn07XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuZm9yIChjb25zdCBzdGF0ZSBpbiBzdGF0ZXNMaXN0KSB7XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc3RhdGVzTGlzdCwgc3RhdGUpKSB7XG4gICAgY29uc3Qgb3B0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgb3B0LnNldEF0dHJpYnV0ZSgndmFsdWUnLCBzdGF0ZSk7XG4gICAgb3B0LmlubmVyVGV4dCA9IHN0YXRlc0xpc3Rbc3RhdGVdO1xuICAgIHN0YXRlcy5hcHBlbmRDaGlsZChvcHQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0YXRlc1NlbGVjdElucHV0O1xuIiwiaW1wb3J0IGNvdW50cnlTZWxlY3QgZnJvbSAnLi9jb3VudHJ5JztcbmltcG9ydCBzdGF0ZVNlbGVjdCBmcm9tICcuL3N0YXRlcyc7XG5cbmltcG9ydCBjbG9zZUljb24gZnJvbSAnLi9pbWcvY2xvc2UtY2lyY2xlLW91dGxpbmUuc3ZnJztcblxuY29uc3QgY291bnRyeUlucHV0RmllbGQgPSBbLi4uY291bnRyeVNlbGVjdC5jaGlsZHJlbl1bMV07XG5jb25zdCBzdGF0ZUlucHV0RmllbGQgPSBbLi4uc3RhdGVTZWxlY3QuY2hpbGRyZW5dWzFdO1xuXG5mdW5jdGlvbiBhZGRDbGVhckJ1dHRvbihlbGVtZW50KSB7XG4gIGNvbnN0IGNsb3NlSWNvbkltYWdlID0gbmV3IEltYWdlKCk7XG4gIGNsb3NlSWNvbkltYWdlLnNyYyA9IGNsb3NlSWNvbjtcbiAgY29uc3QgYnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gIGJ0bi5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnYnV0dG9uJyk7XG4gIGJ0bi5jbGFzc0xpc3QuYWRkKCdjbGVhci1idXR0b24nKTtcbiAgYnRuLmFwcGVuZENoaWxkKGNsb3NlSWNvbkltYWdlKTtcbiAgY29uc3QgaW5wdXRGaWVsZCA9IFsuLi5lbGVtZW50LmNoaWxkcmVuXVsxXTtcbiAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGlmIChlbGVtZW50ID09PSBjb3VudHJ5U2VsZWN0ICYmIGlucHV0RmllbGQudmFsdWUgPT09ICdVbml0ZWQgU3RhdGVzIG9mIEFtZXJpY2EgKHRoZSknKSB7XG4gICAgICBzdGF0ZUlucHV0RmllbGQudmFsdWUgPSAnJztcbiAgICAgIHN0YXRlU2VsZWN0LmNsYXNzTGlzdC5hZGQoJ25vLWRpc3BsYXknKTtcbiAgICB9XG4gICAgaW5wdXRGaWVsZC52YWx1ZSA9ICcnO1xuICB9KVxuICBlbGVtZW50LmFwcGVuZENoaWxkKGJ0bik7XG59XG5cbmNvbnN0IHNldHRpbmdzRm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcbnNldHRpbmdzRm9ybS5jbGFzc0xpc3QuYWRkKCdzZXR0aW5ncy1mb3JtJyk7XG5cbmNvbnN0IGFkdmFuY2VkU2VhcmNoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5hZHZhbmNlZFNlYXJjaC5jbGFzc0xpc3QuYWRkKCdhZHZhbmNlZC1zZWFyY2gnKTtcbmNvbnN0IGFkdmFuY2VkU2VhcmNoVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoNCcpO1xuYWR2YW5jZWRTZWFyY2hUaXRsZS5pbm5lclRleHQgPSAnQWR2YW5jZWQgU2VhcmNoJztcbmNvbnN0IGFkdmFuY2VkU2VhcmNoTGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG5hZHZhbmNlZFNlYXJjaExpc3QuYXBwZW5kKGNvdW50cnlTZWxlY3QsIHN0YXRlU2VsZWN0KTtcblxuY291bnRyeUlucHV0RmllbGQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XG4gIGlmIChjb3VudHJ5SW5wdXRGaWVsZC52YWx1ZSA9PT0gJ1VuaXRlZCBTdGF0ZXMgb2YgQW1lcmljYSAodGhlKScpIHtcbiAgICBzdGF0ZVNlbGVjdC5jbGFzc0xpc3QucmVtb3ZlKCduby1kaXNwbGF5Jyk7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGVJbnB1dEZpZWxkLnZhbHVlID0gJyc7XG4gICAgc3RhdGVTZWxlY3QuY2xhc3NMaXN0LmFkZCgnbm8tZGlzcGxheScpO1xuICB9XG59KVxuXG5hZGRDbGVhckJ1dHRvbihjb3VudHJ5U2VsZWN0KTtcbmFkZENsZWFyQnV0dG9uKHN0YXRlU2VsZWN0KTtcblxuYWR2YW5jZWRTZWFyY2guYXBwZW5kKGFkdmFuY2VkU2VhcmNoVGl0bGUsIGFkdmFuY2VkU2VhcmNoTGlzdCk7XG5cbmNvbnN0IHNldHRpbmdzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5zZXR0aW5ncy5jbGFzc0xpc3QuYWRkKCdzZXR0aW5ncy1zZWxlY3QnKTtcbmNvbnN0IHNldHRpbmdzVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoNCcpO1xuc2V0dGluZ3NUaXRsZS5pbm5lclRleHQgPSAnU2V0dGluZ3MnO1xuY29uc3Qgc2V0dGluZ3NMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcblxuY29uc3QgdW5pdHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuY29uc3QgdW5pdHNMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG51bml0c0xhYmVsLnNldEF0dHJpYnV0ZSgnZm9yJywgJ3VuaXRzLXRvZ2dsZScpO1xudW5pdHNMYWJlbC5pbm5lclRleHQgPSAnVW5pdHMnO1xuY29uc3QgdW5pdHNUb2dnbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xudW5pdHNUb2dnbGUuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2NoZWNrYm94Jyk7XG51bml0c1RvZ2dsZS5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3VuaXRzLXRvZ2dsZScpO1xudW5pdHNUb2dnbGUuc2V0QXR0cmlidXRlKCduYW1lJywgJ3VuaXRzLXRvZ2dsZScpO1xuY29uc3QgaW1wZXJpYWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG5pbXBlcmlhbC5jbGFzc0xpc3QuYWRkKCdpbXBlcmlhbCcpO1xuaW1wZXJpYWwuaW5uZXJUZXh0ID0gJ0ltcGVyaWFsJztcbmNvbnN0IG1ldHJpYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbm1ldHJpYy5jbGFzc0xpc3QuYWRkKCdtZXRyaWMnKTtcbm1ldHJpYy5pbm5lclRleHQgPSAnTWV0cmljJztcbnVuaXRzLmFwcGVuZCh1bml0c0xhYmVsLCBpbXBlcmlhbCwgdW5pdHNUb2dnbGUsIG1ldHJpYyk7XG5cbnVuaXRzVG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgaWYgKHVuaXRzVG9nZ2xlLmNoZWNrZWQpIHtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndW5pdHMnLCAnY2hlY2tlZCcpO1xuICB9IGVsc2Uge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1bml0cycsICd1bmNoZWNrZWQnKTtcbiAgfVxufSlcblxuc2V0dGluZ3NMaXN0LmFwcGVuZCh1bml0cyk7XG5zZXR0aW5ncy5hcHBlbmQoc2V0dGluZ3NUaXRsZSwgc2V0dGluZ3NMaXN0KTtcblxuY29uc3QgcmVzZXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbnJlc2V0LmNsYXNzTGlzdC5hZGQoJ3Jlc2V0Jyk7XG5jb25zdCByZXNldFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDQnKTtcbnJlc2V0VGl0bGUuaW5uZXJUZXh0ID0gJ1Jlc2V0JztcbmNvbnN0IHJlc2V0RGVzY3JpcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG5yZXNldERlc2NyaXB0aW9uLmlubmVyVGV4dCA9ICdGb3JnZXQgc2F2ZWQgZGF0YSBmb3IgdGhpcyBzaXRlPyc7XG5jb25zdCByZXNldEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xucmVzZXRCdXR0b24uaW5uZXJUZXh0ID0gJ1Jlc2V0JztcbnJlc2V0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnbG9jYXRpb24nKTtcbiAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3VuaXRzJyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgbG9jYXRpb24ucmVsb2FkKCk7XG59KTtcbnJlc2V0LmFwcGVuZChyZXNldFRpdGxlLCByZXNldERlc2NyaXB0aW9uLCByZXNldEJ1dHRvbik7XG5cbnNldHRpbmdzRm9ybS5hcHBlbmQoYWR2YW5jZWRTZWFyY2gsIHNldHRpbmdzLCByZXNldCk7XG5cbmV4cG9ydCBkZWZhdWx0IHNldHRpbmdzRm9ybTtcbmV4cG9ydCB7IHVuaXRzVG9nZ2xlIH07IiwiLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1zeW50YXggKi9cbmltcG9ydCBzZXR0aW5ncyBmcm9tICcuL3NldHRpbmdzJztcblxuaW1wb3J0IHN1biBmcm9tICcuL2ltZy9zdW4uc3ZnJztcbmltcG9ydCBjbGVhck5pZ2h0IGZyb20gJy4vaW1nL2NsZWFyLW5pZ2h0LnN2Zyc7XG5pbXBvcnQgcGFydGlhbENsb3VkcyBmcm9tICcuL2ltZy9wYXJ0aWFsLWNsb3Vkcy5zdmcnO1xuaW1wb3J0IHBhcnRpYWxDbG91ZHNOaWdodCBmcm9tICcuL2ltZy9jbG91ZHktbmlnaHQuc3ZnJztcbmltcG9ydCBjbG91ZCBmcm9tICcuL2ltZy9jbG91ZC5zdmcnO1xuaW1wb3J0IGJyb2tlbkNsb3VkIGZyb20gJy4vaW1nL2Jyb2tlbi1jbG91ZHMuc3ZnJztcbmltcG9ydCByYWluIGZyb20gJy4vaW1nL2Nsb3Vkcy1yYWluLnN2Zyc7XG5pbXBvcnQgc3VuUmFpbiBmcm9tICcuL2ltZy9zdW4tcmFpbi5zdmcnO1xuaW1wb3J0IHRodW5kZXIgZnJvbSAnLi9pbWcvdGh1bmRlci5zdmcnO1xuaW1wb3J0IHNub3cgZnJvbSAnLi9pbWcvc25vdy5zdmcnO1xuaW1wb3J0IG1pc3QgZnJvbSAnLi9pbWcvbWlzdC5zdmcnO1xuXG5pbXBvcnQgbWFnR2xhc3MgZnJvbSAnLi9pbWcvbWFnbmlmeS5zdmcnO1xuaW1wb3J0IGNvZyBmcm9tICcuL2ltZy9jb2ctb3V0bGluZS5zdmcnO1xuaW1wb3J0IGRvdHMgZnJvbSAnLi9pbWcvZG90cy1ob3Jpem9udGFsLWNpcmNsZS1vdXRsaW5lLnN2Zyc7XG5pbXBvcnQgZmVlbHNMaWtlSWNvbiBmcm9tICcuL2ltZy90aGVybW9tZXRlci1saW5lcy5zdmcnO1xuaW1wb3J0IGh1bWlkaXR5SWNvbiBmcm9tICcuL2ltZy93YXRlci1wZXJjZW50LnN2Zyc7XG5pbXBvcnQgc3Vuc2V0SWNvbiBmcm9tICcuL2ltZy93ZWF0aGVyLXN1bnNldC1kb3duLnN2Zyc7XG5pbXBvcnQgc3VucmlzZUljb24gZnJvbSAnLi9pbWcvd2VhdGhlci1zdW5zZXQtdXAuc3ZnJztcbmltcG9ydCB3aW5kSWNvbiBmcm9tICcuL2ltZy93ZWF0aGVyLXdpbmR5LnN2Zyc7XG5pbXBvcnQgY2xvdWRpbmVzc0ljb24gZnJvbSAnLi9pbWcvY2xvdWQtcGVyY2VudC1vdXRsaW5lLnN2Zyc7XG5cbmxldCBuZXdQYWdlID0gdHJ1ZTtcblxuY29uc3Qgc2V0dGluZ3NDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2V0dGluZ3MtY29udGFpbmVyJyk7XG5zZXR0aW5nc0NvbnRhaW5lci5hcHBlbmRDaGlsZChzZXR0aW5ncyk7XG5cbmNvbnN0IGdyYWRpZW50RGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5ncmFkaWVudERheS5jbGFzc0xpc3QuYWRkKCdncmFkaWVudCcsICdkYXknKTtcbmNvbnN0IGdyYWRpZW50Q2xvdWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbmdyYWRpZW50Q2xvdWQuY2xhc3NMaXN0LmFkZCgnZ3JhZGllbnQnLCAnY2xvdWQnKTtcbmNvbnN0IGdyYWRpZW50UmFpbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuZ3JhZGllbnRSYWluLmNsYXNzTGlzdC5hZGQoJ2dyYWRpZW50JywgJ3JhaW4nKTtcbmNvbnN0IGdyYWRpZW50TmlnaHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbmdyYWRpZW50TmlnaHQuY2xhc3NMaXN0LmFkZCgnZ3JhZGllbnQnLCAnbmlnaHQnKTtcbmNvbnN0IGdyYWRpZW50TmlnaHRDbG91ZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuZ3JhZGllbnROaWdodENsb3VkLmNsYXNzTGlzdC5hZGQoJ2dyYWRpZW50JywgJ25pZ2h0LWNsb3VkJyk7XG5jb25zdCBzaXRlV3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaXRlLXdyYXBwZXInKTtcbnNpdGVXcmFwcGVyLmFwcGVuZChcbiAgZ3JhZGllbnREYXksXG4gIGdyYWRpZW50Q2xvdWQsXG4gIGdyYWRpZW50UmFpbixcbiAgZ3JhZGllbnROaWdodCxcbiAgZ3JhZGllbnROaWdodENsb3VkXG4pO1xuXG5jb25zdCBncmFkaWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZ3JhZGllbnQnKTtcbmNvbnN0IGdyYWRpZW50c0FycmF5ID0gWy4uLmdyYWRpZW50c107XG5cbmNvbnN0IGN1cnJlbnRXZWF0aGVyQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmN1cnJlbnQtd2VhdGhlcicpO1xuY29uc3QgZm9yZWNhc3RDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZm9yZWNhc3QnKTtcblxuY29uc3Qgc2VhcmNoSWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWFyY2gtaWNvbicpO1xuY29uc3Qgc2VhcmNoSWNvbkltYWdlID0gbmV3IEltYWdlKCk7XG5zZWFyY2hJY29uSW1hZ2Uuc3JjID0gbWFnR2xhc3M7XG5zZWFyY2hJY29uLmFwcGVuZENoaWxkKHNlYXJjaEljb25JbWFnZSk7XG5cbmNvbnN0IGNvZ0ljb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29nLWljb24nKTtcbmNvbnN0IGNvZ0ljb25JbWFnZSA9IG5ldyBJbWFnZSgpO1xuY29nSWNvbkltYWdlLnNyYyA9IGNvZztcbmNvZ0ljb24uYXBwZW5kQ2hpbGQoY29nSWNvbkltYWdlKTtcblxuY29uc3QgY29nSWNvbkNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb2ctaWNvbi1jb250YWluZXInKTtcbmNvbnN0IHNldHRpbmdzU2xpZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2V0dGluZ3MnKTtcbmNvZ0ljb25Db250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gIHNldHRpbmdzU2xpZGUuY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZGVuJyk7XG59KTtcblxuZnVuY3Rpb24gc2VsZWN0SWNvbihjb2RlKSB7XG4gIGxldCBzb3VyY2U7XG4gIHN3aXRjaCAoY29kZSkge1xuICAgIGNhc2UgJzAxZCc6XG4gICAgICBzb3VyY2UgPSBzdW47XG4gICAgICBicmVhaztcbiAgICBjYXNlICcwMW4nOlxuICAgICAgc291cmNlID0gY2xlYXJOaWdodDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJzAyZCc6XG4gICAgICBzb3VyY2UgPSBwYXJ0aWFsQ2xvdWRzO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnMDJuJzpcbiAgICAgIHNvdXJjZSA9IHBhcnRpYWxDbG91ZHNOaWdodDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJzAzZCc6XG4gICAgY2FzZSAnMDNuJzpcbiAgICAgIHNvdXJjZSA9IGNsb3VkO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnMDRkJzpcbiAgICBjYXNlICcwNG4nOlxuICAgICAgc291cmNlID0gYnJva2VuQ2xvdWQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICcwOWQnOlxuICAgIGNhc2UgJzA5bic6XG4gICAgY2FzZSAnMTBuJzpcbiAgICAgIHNvdXJjZSA9IHJhaW47XG4gICAgICBicmVhaztcbiAgICBjYXNlICcxMGQnOlxuICAgICAgc291cmNlID0gc3VuUmFpbjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJzExZCc6XG4gICAgY2FzZSAnMTFuJzpcbiAgICAgIHNvdXJjZSA9IHRodW5kZXI7XG4gICAgICBicmVhaztcbiAgICBjYXNlICcxM2QnOlxuICAgIGNhc2UgJzEzbic6XG4gICAgICBzb3VyY2UgPSBzbm93O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnNTBkJzpcbiAgICBjYXNlICc1MG4nOlxuICAgICAgc291cmNlID0gbWlzdDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBzb3VyY2UgPSBzdW47XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gc291cmNlO1xufVxuXG5mdW5jdGlvbiBzZWxlY3RCYWNrZ3JvdW5kKGNvZGUpIHtcbiAgbGV0IGJnO1xuICBzd2l0Y2ggKGNvZGUpIHtcbiAgICBjYXNlICcwMWQnOlxuICAgIGNhc2UgJzAyZCc6XG4gICAgICBiZyA9IGdyYWRpZW50RGF5O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnMDFuJzpcbiAgICAgIGJnID0gZ3JhZGllbnROaWdodDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJzAzZCc6XG4gICAgY2FzZSAnMDRkJzpcbiAgICBjYXNlICcxM2QnOlxuICAgIGNhc2UgJzUwZCc6XG4gICAgICBiZyA9IGdyYWRpZW50Q2xvdWQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICcwMm4nOlxuICAgIGNhc2UgJzAzbic6XG4gICAgY2FzZSAnMDRuJzpcbiAgICBjYXNlICcxM24nOlxuICAgIGNhc2UgJzUwbic6XG4gICAgICBiZyA9IGdyYWRpZW50TmlnaHRDbG91ZDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJzA5ZCc6XG4gICAgY2FzZSAnMDluJzpcbiAgICBjYXNlICcxMG4nOlxuICAgIGNhc2UgJzEwZCc6XG4gICAgY2FzZSAnMTFkJzpcbiAgICBjYXNlICcxMW4nOlxuICAgICAgYmcgPSBncmFkaWVudFJhaW47XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgYmcgPSAnJztcbiAgfVxuICByZXR1cm4gYmc7XG59XG5cbmZ1bmN0aW9uIGNsZWFyUGFnZSgpIHtcbiAgaWYgKGN1cnJlbnRXZWF0aGVyQ29udGFpbmVyLmZpcnN0Q2hpbGQpIHtcbiAgICBjdXJyZW50V2VhdGhlckNvbnRhaW5lci5yZW1vdmVDaGlsZChjdXJyZW50V2VhdGhlckNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgfVxuICBpZiAoZm9yZWNhc3RDb250YWluZXIuZmlyc3RDaGlsZCkge1xuICAgIGZvcmVjYXN0Q29udGFpbmVyLnJlbW92ZUNoaWxkKGZvcmVjYXN0Q29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1vcmVJbmZvKGRhdGEpIHtcbiAgY29uc3QgdW5pdHNUb2dnbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdW5pdHMtdG9nZ2xlJyk7XG5cbiAgY29uc3QgbGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG5cbiAgY29uc3QgZmVlbHNMaWtlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgY29uc3QgZmVlbHNMaWtlSW1nID0gbmV3IEltYWdlKCk7XG4gIGZlZWxzTGlrZUltZy5zcmMgPSBmZWVsc0xpa2VJY29uO1xuICBjb25zdCBmZWVsc0xpa2VUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICBmZWVsc0xpa2VUZXh0LmlubmVyVGV4dCA9ICdGZWVscyBsaWtlJztcbiAgY29uc3QgZmVlbHNMaWtlVmFsdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gIGZlZWxzTGlrZVZhbHVlLmlubmVyVGV4dCA9IGAke01hdGguZmxvb3IoZGF0YS5tYWluLmZlZWxzX2xpa2UpfcKwYDtcbiAgZmVlbHNMaWtlLmFwcGVuZChmZWVsc0xpa2VJbWcsIGZlZWxzTGlrZVRleHQsIGZlZWxzTGlrZVZhbHVlKTtcblxuICBjb25zdCBodW1pZGl0eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gIGNvbnN0IGh1bWlkaXR5SW1nID0gbmV3IEltYWdlKCk7XG4gIGh1bWlkaXR5SW1nLnNyYyA9IGh1bWlkaXR5SWNvbjtcbiAgY29uc3QgaHVtaWRpdHlUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICBodW1pZGl0eVRleHQuaW5uZXJUZXh0ID0gJ0h1bWlkaXR5JztcbiAgY29uc3QgaHVtaWRpdHlWYWx1ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgaHVtaWRpdHlWYWx1ZS5pbm5lclRleHQgPSBgJHtkYXRhLm1haW4uaHVtaWRpdHl9JWA7XG4gIGh1bWlkaXR5LmFwcGVuZChodW1pZGl0eUltZywgaHVtaWRpdHlUZXh0LCBodW1pZGl0eVZhbHVlKTtcblxuICBjb25zdCBjbG91ZGluZXNzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgY29uc3QgY2xvdWRpbmVzc0ltZyA9IG5ldyBJbWFnZSgpO1xuICBjbG91ZGluZXNzSW1nLnNyYyA9IGNsb3VkaW5lc3NJY29uO1xuICBjb25zdCBjbG91ZGluZXNzVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgY2xvdWRpbmVzc1RleHQuaW5uZXJUZXh0ID0gJ0Nsb3VkaW5lc3MnO1xuICBjb25zdCBjbG91ZGluZXNzVmFsdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gIGNsb3VkaW5lc3NWYWx1ZS5pbm5lclRleHQgPSBgJHtkYXRhLmNsb3Vkcy5hbGx9JWA7XG4gIGNsb3VkaW5lc3MuYXBwZW5kKGNsb3VkaW5lc3NJbWcsIGNsb3VkaW5lc3NUZXh0LCBjbG91ZGluZXNzVmFsdWUpO1xuXG4gIGNvbnN0IHdpbmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICBjb25zdCB3aW5kSW1nID0gbmV3IEltYWdlKCk7XG4gIHdpbmRJbWcuc3JjID0gd2luZEljb247XG4gIGNvbnN0IHdpbmRUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICB3aW5kVGV4dC5pbm5lclRleHQgPSAnV2luZCc7XG4gIGNvbnN0IHdpbmRWYWx1ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgLy8gbmVlZHMgdG8gY2hhbmdlIGJhc2VkIG9uIHVuaXRzXG4gIHdpbmRWYWx1ZS5pbm5lclRleHQgPSBgJHtNYXRoLmZsb29yKFxuICAgIHVuaXRzVG9nZ2xlLmNoZWNrZWQgPyBkYXRhLndpbmQuc3BlZWQgKiAzLjYgOiBkYXRhLndpbmQuc3BlZWRcbiAgKX0gJHt1bml0c1RvZ2dsZS5jaGVja2VkID8gJ2ttL2gnIDogJ21waCd9YDtcbiAgd2luZC5hcHBlbmQod2luZEltZywgd2luZFRleHQsIHdpbmRWYWx1ZSk7XG5cbiAgY29uc3Qgc3VucmlzZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gIGNvbnN0IHN1bnJpc2VJbWcgPSBuZXcgSW1hZ2UoKTtcbiAgc3VucmlzZUltZy5zcmMgPSBzdW5yaXNlSWNvbjtcbiAgY29uc3Qgc3VucmlzZVRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gIHN1bnJpc2VUZXh0LmlubmVyVGV4dCA9ICdTdW5yaXNlJztcbiAgY29uc3Qgc3VucmlzZVZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICBzdW5yaXNlVmFsdWUuaW5uZXJUZXh0ID0gYCR7ZGF0YS5zdW5yaXNlfWA7XG4gIHN1bnJpc2UuYXBwZW5kKHN1bnJpc2VJbWcsIHN1bnJpc2VUZXh0LCBzdW5yaXNlVmFsdWUpO1xuXG4gIGNvbnN0IHN1bnNldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gIGNvbnN0IHN1bnNldEltZyA9IG5ldyBJbWFnZSgpO1xuICBzdW5zZXRJbWcuc3JjID0gc3Vuc2V0SWNvbjtcbiAgY29uc3Qgc3Vuc2V0VGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgc3Vuc2V0VGV4dC5pbm5lclRleHQgPSAnU3Vuc2V0JztcbiAgY29uc3Qgc3Vuc2V0VmFsdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gIHN1bnNldFZhbHVlLmlubmVyVGV4dCA9IGAke2RhdGEuc3Vuc2V0fWA7XG4gIHN1bnNldC5hcHBlbmQoc3Vuc2V0SW1nLCBzdW5zZXRUZXh0LCBzdW5zZXRWYWx1ZSk7XG5cbiAgbGlzdC5hcHBlbmQoZmVlbHNMaWtlLCBodW1pZGl0eSwgY2xvdWRpbmVzcywgd2luZCwgc3VucmlzZSwgc3Vuc2V0KTtcblxuICBsaXN0LmNsYXNzTGlzdC5hZGQoJ21vcmUtaW5mby1saXN0Jyk7XG5cbiAgcmV0dXJuIGxpc3Q7XG59XG5cbmZ1bmN0aW9uIHJlbmRlckN1cnJlbnRXZWF0aGVyKHsgY3VycmVudCB9KSB7XG5cbiAgaWYgKG5ld1BhZ2UpIHtcbiAgICBjb25zdCBsb2NhdGlvbklucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvY2F0aW9uLWlucHV0Jyk7XG4gICAgbG9jYXRpb25JbnB1dC5jbGFzc0xpc3QuYWRkKCdwb3N0Jyk7XG4gICAgbmV3UGFnZSA9IGZhbHNlO1xuICB9XG5cbiAgY29uc3QgY3VycmVudFdlYXRoZXJEaXNwbGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGN1cnJlbnRXZWF0aGVyRGlzcGxheS5jbGFzc0xpc3QuYWRkKCdjdXJyZW50LXdlYXRoZXItZGlzcGxheScpO1xuXG4gIGNvbnN0IGxvY2F0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGxvY2F0aW9uLmlubmVyVGV4dCA9IGN1cnJlbnQubG9jYXRpb25OYW1lO1xuICBsb2NhdGlvbi5jbGFzc0xpc3QuYWRkKCdjdXJyZW50LWxvY2F0aW9uJyk7XG5cbiAgY29uc3QgdGVtcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB0ZW1wLmNsYXNzTGlzdC5hZGQoJ2N1cnJlbnQtdGVtcCcpO1xuICB0ZW1wLmlubmVyVGV4dCA9IGAke01hdGguZmxvb3IoY3VycmVudC5tYWluLnRlbXApfcKwYDtcblxuICBjb25zdCBtb3JlSW5mb0xpc3QgPSBjcmVhdGVNb3JlSW5mbyhjdXJyZW50KTtcblxuICBjb25zdCBtb3JlSW5mbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBtb3JlSW5mby5jbGFzc0xpc3QuYWRkKCdtb3JlLWluZm8nKTtcbiAgY29uc3QgbW9yZUluZm9JY29uID0gbmV3IEltYWdlKCk7XG4gIG1vcmVJbmZvSWNvbi5zcmMgPSBkb3RzO1xuICBtb3JlSW5mby5hcHBlbmRDaGlsZChtb3JlSW5mb0ljb24pO1xuICBtb3JlSW5mby5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBpZiAobW9yZUluZm9MaXN0LnN0eWxlLm1heEhlaWdodCkge1xuICAgICAgbW9yZUluZm9MaXN0LnN0eWxlLm1heEhlaWdodCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1vcmVJbmZvTGlzdC5zdHlsZS5tYXhIZWlnaHQgPSBgJHttb3JlSW5mb0xpc3Quc2Nyb2xsSGVpZ2h0ICB9cHhgO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgaWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBpY29uLmNsYXNzTGlzdC5hZGQoJ2N1cnJlbnQtd2VhdGhlci1pY29uJyk7XG4gIGNvbnN0IGljb25TVkcgPSBuZXcgSW1hZ2UoKTtcbiAgaWNvblNWRy5jbGFzc0xpc3QuYWRkKCdpY29uJyk7XG4gIGljb25TVkcuc3JjID0gc2VsZWN0SWNvbihjdXJyZW50LndlYXRoZXJbMF0uaWNvbik7XG4gIGljb24uYXBwZW5kKGljb25TVkcsIG1vcmVJbmZvKTtcblxuICBjb25zdCBkZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkZXNjcmlwdGlvbi5jbGFzc0xpc3QuYWRkKCdjdXJyZW50LWRlc2NyaXB0aW9uJyk7XG4gIGRlc2NyaXB0aW9uLmlubmVyVGV4dCA9IGN1cnJlbnQud2VhdGhlclswXS5kZXNjcmlwdGlvbjtcblxuICBjb25zdCBiYWNrZ3JvdW5kID0gc2VsZWN0QmFja2dyb3VuZChjdXJyZW50LndlYXRoZXJbMF0uaWNvbik7XG4gIGlmIChiYWNrZ3JvdW5kID09PSBncmFkaWVudENsb3VkKSB7XG4gICAgc2l0ZVdyYXBwZXIuY2xhc3NOYW1lID0gJ3NpdGUtd3JhcHBlciBjbG91ZCc7XG4gIH0gZWxzZSB7XG4gICAgc2l0ZVdyYXBwZXIuY2xhc3NOYW1lID0gJ3NpdGUtd3JhcHBlcic7XG4gIH1cbiAgZm9yIChjb25zdCBncmFkaWVudCBvZiBncmFkaWVudHNBcnJheSkge1xuICAgIGlmIChiYWNrZ3JvdW5kID09PSBncmFkaWVudCkge1xuICAgICAgZ3JhZGllbnQuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdyYWRpZW50LnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgIH1cbiAgfVxuICBjdXJyZW50V2VhdGhlckRpc3BsYXkuYXBwZW5kKGxvY2F0aW9uLCB0ZW1wLCBkZXNjcmlwdGlvbiwgaWNvbiwgbW9yZUluZm9MaXN0KTtcbiAgcmV0dXJuIGN1cnJlbnRXZWF0aGVyRGlzcGxheTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyRm9yZWNhc3QoeyBmb3JlY2FzdCB9KSB7XG4gIGNvbnN0IGZvcmVjYXN0RGlzcGxheSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBmb3JlY2FzdERpc3BsYXkuY2xhc3NMaXN0LmFkZCgnZm9yZWNhc3QtZGlzcGxheScpO1xuICBmb3IgKGNvbnN0IGRheSBpbiBmb3JlY2FzdCkge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZm9yZWNhc3QsIGRheSkpIHtcbiAgICAgIGNvbnN0IGRheURpc3BsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGRheURpc3BsYXkuY2xhc3NMaXN0LmFkZCgnZGF5LWRpc3BsYXknKTtcblxuICAgICAgY29uc3QgZGF5VGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGRheVRpdGxlLmNsYXNzTGlzdC5hZGQoJ2RheS10aXRsZScpO1xuICAgICAgZGF5VGl0bGUuaW5uZXJUZXh0ID0gZGF5O1xuICAgICAgZGF5RGlzcGxheS5hcHBlbmRDaGlsZChkYXlUaXRsZSk7XG5cbiAgICAgIGNvbnN0IGljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGljb24uY2xhc3NMaXN0LmFkZCgnZGF5LWljb24nKTtcbiAgICAgIGNvbnN0IGljb25TVkcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgIGljb25TVkcuY2xhc3NMaXN0LmFkZCgnaWNvbicpO1xuICAgICAgaWNvblNWRy5zcmMgPSBzZWxlY3RJY29uKGZvcmVjYXN0W2RheV0uaWNvbik7XG4gICAgICBpY29uLmFwcGVuZENoaWxkKGljb25TVkcpO1xuXG4gICAgICBjb25zdCBsb3dIaWdoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBsb3dIaWdoLmNsYXNzTGlzdC5hZGQoJ2xvdy1oaWdoJyk7XG4gICAgICBjb25zdCBsb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICBjb25zdCBoaWdoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgbG93LmlubmVyVGV4dCA9IGBMOiAke2ZvcmVjYXN0W2RheV0ubG93fcKwYDtcbiAgICAgIGhpZ2guaW5uZXJUZXh0ID0gYEg6ICR7Zm9yZWNhc3RbZGF5XS5oaWdofcKwYDtcbiAgICAgIGxvd0hpZ2guYXBwZW5kKGxvdywgaGlnaCk7XG5cbiAgICAgIGRheURpc3BsYXkuYXBwZW5kKGRheVRpdGxlLCBpY29uLCBsb3dIaWdoKTtcblxuICAgICAgZm9yZWNhc3REaXNwbGF5LmFwcGVuZENoaWxkKGRheURpc3BsYXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZm9yZWNhc3REaXNwbGF5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW5kZXJXZWF0aGVyRGV0YWlscyhpbmZvKSB7XG4gIGNsZWFyUGFnZSgpO1xuICBjdXJyZW50V2VhdGhlckNvbnRhaW5lci5hcHBlbmRDaGlsZChyZW5kZXJDdXJyZW50V2VhdGhlcihpbmZvKSk7XG4gIGZvcmVjYXN0Q29udGFpbmVyLmFwcGVuZENoaWxkKHJlbmRlckZvcmVjYXN0KGluZm8pKTtcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnRpbnVlICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLXN5bnRheCAqL1xuaW1wb3J0IHsgaXNTYW1lRGF5LCBwYXJzZUlTTywgZ2V0RGF5LCBpc1RvZGF5LCBmcm9tVW5peFRpbWUsIGZvcm1hdCB9IGZyb20gXCJkYXRlLWZuc1wiO1xuaW1wb3J0IHJlbmRlcldlYXRoZXJEZXRhaWxzIGZyb20gJy4vRE9NJztcblxuYXN5bmMgZnVuY3Rpb24gcmV0cmlldmVXZWF0aGVyRGF0YSh7IGxhdCwgbG9uIH0pIHtcblxuICBjb25zdCB1bml0c1RvZ2dsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN1bml0cy10b2dnbGUnKTtcblxuICBjb25zdCBkYXRhID0ge307XG4gIGNvbnN0IGZldGNoUHJlZml4ID0gXCJodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvXCI7XG4gIGNvbnN0IG1pZGRsZSA9IGBsYXQ9JHtsYXR9Jmxvbj0ke2xvbn1gO1xuICBjb25zdCBmZXRjaFN1ZmZpeCA9IGAmYXBwaWQ9OTIxY2ZkODc2ZmM3YmRkMTc2ODQ5N2MxOGRjMWJmODEmdW5pdHM9JHt1bml0c1RvZ2dsZS5jaGVja2VkID8gJ21ldHJpYycgOiAnaW1wZXJpYWwnfWA7XG4gIGNvbnN0IGN1cnJlbnRXZWF0aGVyID0gYXdhaXQgZmV0Y2goXG4gICAgYCR7ZmV0Y2hQcmVmaXh9L3dlYXRoZXI/JHttaWRkbGV9JHtmZXRjaFN1ZmZpeH1gXG4gICk7XG4gIGNvbnN0IGZpdmVEYXlXZWF0aGVyID0gYXdhaXQgZmV0Y2goXG4gICAgYCR7ZmV0Y2hQcmVmaXh9L2ZvcmVjYXN0PyR7bWlkZGxlfSR7ZmV0Y2hTdWZmaXh9YFxuICApO1xuICBkYXRhLmN1cnJlbnQgPSBhd2FpdCBjdXJyZW50V2VhdGhlci5qc29uKCk7XG4gIGRhdGEuZml2ZURheSA9IGF3YWl0IGZpdmVEYXlXZWF0aGVyLmpzb24oKTtcbiAgZGF0YS5jdXJyZW50LnN1bnJpc2UgPSBmb3JtYXQoZnJvbVVuaXhUaW1lKGRhdGEuY3VycmVudC5zeXMuc3VucmlzZSksICdwJyk7XG4gIGRhdGEuY3VycmVudC5zdW5zZXQgPSBmb3JtYXQoZnJvbVVuaXhUaW1lKGRhdGEuY3VycmVudC5zeXMuc3Vuc2V0KSwgJ3AnKTtcbiAgZGF0YS5mb3JlY2FzdCA9IGFuYWx5emVGb3JlY2FzdChkYXRhLmZpdmVEYXkpO1xuICByZXR1cm4gZGF0YTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0QW5kRGlzcGxheVdlYXRoZXIobG9jSW5mbykge1xuICBjb25zdCB3ZWF0aGVyRGF0YSA9IGF3YWl0IHJldHJpZXZlV2VhdGhlckRhdGEobG9jSW5mbyk7XG4gIHdlYXRoZXJEYXRhLmN1cnJlbnQubG9jYXRpb25OYW1lID0gbG9jSW5mby5uYW1lO1xuICByZW5kZXJXZWF0aGVyRGV0YWlscyh3ZWF0aGVyRGF0YSk7XG59XG5cbmZ1bmN0aW9uIGZpbmRNb3N0Q29tbW9uKGFycmF5KSB7XG4gIGxldCBoaWdoZXN0Q291bnQgPSAwO1xuICBsZXQgbW9zdENvbW1vbjtcbiAgZm9yIChjb25zdCBpdGVtIG9mIGFycmF5KSB7XG4gICAgbGV0IGNvdW50ID0gMDtcbiAgICBmb3IgKGNvbnN0IG90aGVySXRlbSBvZiBhcnJheSkge1xuICAgICAgaWYgKGl0ZW0gPT09IG90aGVySXRlbSkge1xuICAgICAgICBjb3VudCArPSAxO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY291bnQgPiBoaWdoZXN0Q291bnQpIHtcbiAgICAgIGhpZ2hlc3RDb3VudCA9IGNvdW50O1xuICAgICAgbW9zdENvbW1vbiA9IGl0ZW07XG4gICAgfVxuICB9XG4gIHJldHVybiBtb3N0Q29tbW9uO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVEYXkobnVtKSB7XG4gIGxldCBkYXk7XG4gIHN3aXRjaCAobnVtKSB7XG4gICAgY2FzZSAwOlxuICAgICAgZGF5ID0gXCJTdW5kYXlcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIGRheSA9IFwiTW9uZGF5XCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICBkYXkgPSBcIlR1ZXNkYXlcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIGRheSA9IFwiV2VkbmVzZGF5XCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICBkYXkgPSBcIlRodXJzZGF5XCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICBkYXkgPSBcIkZyaWRheVwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA2OlxuICAgICAgZGF5ID0gXCJTYXR1cmRheVwiO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGRheSA9IFwibm8gZGF5XCI7XG4gIH1cbiAgcmV0dXJuIGRheTtcbn1cblxuZnVuY3Rpb24gYW5hbHl6ZUZvcmVjYXN0KGRhdGEpIHtcbiAgY29uc3QgYXJyYXkgPSBkYXRhLmxpc3Q7XG4gIGNvbnN0IGFycmF5T2ZEYXlzID0gYXJyYXkucmVkdWNlKChhLCBiKSA9PiB7XG4gICAgaWYgKGEubGVuZ3RoKSB7XG4gICAgICBjb25zdCBsYXN0RGF0ZSA9IHBhcnNlSVNPKGFbYS5sZW5ndGggLSAxXVswXS5kdF90eHQpO1xuICAgICAgY29uc3QgdGhpc0RhdGUgPSBwYXJzZUlTTyhiLmR0X3R4dCk7XG4gICAgICBpZiAoaXNTYW1lRGF5KGxhc3REYXRlLCB0aGlzRGF0ZSkpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdLnB1c2goYik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhLnB1c2goW2JdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYS5wdXNoKFtiXSk7XG4gICAgfVxuICAgIHJldHVybiBhO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgZml2ZURheUZvcmVjYXN0ID0ge307XG4gIGZvciAoY29uc3QgZGF5IG9mIGFycmF5T2ZEYXlzKSB7XG4gICAgaWYgKGlzVG9kYXkocGFyc2VJU08oZGF5WzBdLmR0X3R4dCkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgbGV0IGRheU9mV2VlaztcbiAgICBsZXQgbWluVGVtcDtcbiAgICBsZXQgbWF4VGVtcDtcbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IFtdO1xuICAgIGNvbnN0IGljb24gPSBbXTtcblxuICAgIGZvciAoY29uc3QgdGhyZWVIb3VyIG9mIGRheSkge1xuICAgICAgaWYgKCFkYXlPZldlZWspIHtcbiAgICAgICAgZGF5T2ZXZWVrID0gdHJhbnNsYXRlRGF5KGdldERheShwYXJzZUlTTyh0aHJlZUhvdXIuZHRfdHh0KSkpO1xuICAgICAgfVxuICAgICAgaWYgKCFtaW5UZW1wIHx8IHRocmVlSG91ci5tYWluLnRlbXBfbWluIDwgbWluVGVtcCkge1xuICAgICAgICBtaW5UZW1wID0gTWF0aC5mbG9vcih0aHJlZUhvdXIubWFpbi50ZW1wX21pbik7XG4gICAgICB9XG4gICAgICBpZiAoIW1heFRlbXAgfHwgdGhyZWVIb3VyLm1haW4udGVtcF9tYXggPiBtYXhUZW1wKSB7XG4gICAgICAgIG1heFRlbXAgPSBNYXRoLmZsb29yKHRocmVlSG91ci5tYWluLnRlbXBfbWF4KTtcbiAgICAgIH1cbiAgICAgIGlmICh0aHJlZUhvdXIud2VhdGhlclswXS5pY29uLmluY2x1ZGVzKFwiZFwiKSkge1xuICAgICAgICBkZXNjcmlwdGlvbi5wdXNoKHRocmVlSG91ci53ZWF0aGVyWzBdLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgaWNvbi5wdXNoKHRocmVlSG91ci53ZWF0aGVyWzBdLmljb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZpdmVEYXlGb3JlY2FzdFtkYXlPZldlZWtdID0ge1xuICAgICAgaGlnaDogbWF4VGVtcCxcbiAgICAgIGxvdzogbWluVGVtcCxcbiAgICAgIGRlc2NyaXB0aW9uOiBmaW5kTW9zdENvbW1vbihkZXNjcmlwdGlvbiksXG4gICAgICBpY29uOiBmaW5kTW9zdENvbW1vbihpY29uKSxcbiAgICB9O1xuICB9XG4gIHJldHVybiBmaXZlRGF5Rm9yZWNhc3Q7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldEFuZERpc3BsYXlXZWF0aGVyO1xuIiwiaW1wb3J0IGdldEFuZERpc3BsYXlXZWF0aGVyIGZyb20gJy4vZmV0Y2hXZWF0aGVyJztcbmltcG9ydCB7IGNvdW50cnlMaXN0IH0gZnJvbSAnLi9jb3VudHJ5JztcblxuY29uc3QgbG9jSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbG9jJyk7XG5jb25zdCBzdWdnZXN0aW9uQm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN1Z2dlc3Rpb24tYm94LWNvbnRhaW5lcicpO1xuXG5hc3luYyBmdW5jdGlvbiBmaW5kTG9jYXRpb24oKSB7XG4gIGNvbnN0IGNvdW50cnkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY291bnRyeS1zZWxlY3QnKTtcbiAgY29uc3Qgc3RhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdGVzLXNlbGVjdCcpO1xuICBjb25zdCBwcmVmaXggPSAnaHR0cHM6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2dlby8xLjAvJztcbiAgY29uc3QgaW5wdXQgPSBsb2NJbnB1dC52YWx1ZTtcbiAgbGV0IG1pZGRsZTtcbiAgY29uc3QgYXBpS2V5ID0gJyZhcHBpZD05MjFjZmQ4NzZmYzdiZGQxNzY4NDk3YzE4ZGMxYmY4MSc7XG4gIGxldCBjb3VudHJ5Q29kZTtcbiAgaWYgKGNvdW50cnkudmFsdWUpIHtcbiAgICBjb25zdCBzaG93blZhbCA9IGNvdW50cnkudmFsdWU7XG4gICAgY291bnRyeUNvZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgYCNjb3VudHJpZXMgb3B0aW9uW3ZhbHVlPScke3Nob3duVmFsfSddYFxuICAgICkuZGF0YXNldC52YWx1ZTtcbiAgfVxuICBpZiAoTnVtYmVyKGlucHV0KSkge1xuICAgIGlmIChjb3VudHJ5LnZhbHVlKSB7XG4gICAgICBtaWRkbGUgPSBgemlwP3ppcD0ke2lucHV0fSwke2NvdW50cnlDb2RlfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1pZGRsZSA9IGB6aXA/emlwPSR7aW5wdXR9YDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoc3RhdGUudmFsdWUpIHtcbiAgICBtaWRkbGUgPSBgZGlyZWN0P3E9JHtpbnB1dH0sJHtzdGF0ZS52YWx1ZX0sJHtjb3VudHJ5Q29kZX0mbGltaXQ9N2A7XG4gIH0gZWxzZSBpZiAoY291bnRyeS52YWx1ZSkge1xuICAgIG1pZGRsZSA9IGBkaXJlY3Q/cT0ke2lucHV0fSwke2NvdW50cnlDb2RlfSZsaW1pdD03YDtcbiAgfSBlbHNlIHtcbiAgICBtaWRkbGUgPSBgZGlyZWN0P3E9JHtpbnB1dH0mbGltaXQ9N2A7XG4gIH1cblxuICBjb25zdCBsb2NhdGlvbkxpc3RSZXF1ZXN0ID0gYXdhaXQgZmV0Y2goYCR7cHJlZml4fSR7bWlkZGxlfSR7YXBpS2V5fWApO1xuICBjb25zdCBsb2NhdGlvbkxpc3QgPSBhd2FpdCBsb2NhdGlvbkxpc3RSZXF1ZXN0Lmpzb24oKTtcbiAgcmV0dXJuIGxvY2F0aW9uTGlzdDtcbn1cblxuZnVuY3Rpb24gZGVsYXkobXMpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb21pc2UtZXhlY3V0b3ItcmV0dXJuXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25Cb3gocmVzcG9uc2UpIHtcbiAgaWYgKHN1Z2dlc3Rpb25Cb3guZmlyc3RDaGlsZCkge1xuICAgIHN1Z2dlc3Rpb25Cb3gucmVtb3ZlQ2hpbGQoc3VnZ2VzdGlvbkJveC5maXJzdENoaWxkKTtcbiAgfVxuICBjb25zdCBib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgYm94LmNsYXNzTGlzdC5hZGQoJ3N1Z2dlc3Rpb24tYm94Jyk7XG5cbiAgLy8gemlwIHJlc3BvbnNlIGlzIG5vdCBhbiBhcnJheVxuICBpZiAoIUFycmF5LmlzQXJyYXkocmVzcG9uc2UpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgcmVzcG9uc2UgPSBbcmVzcG9uc2VdO1xuICB9XG4gIGlmICghcmVzcG9uc2UubGVuZ3RoKSB7XG4gICAgY29uc3Qgbm9SZXN1bHRzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgbm9SZXN1bHRzLmNsYXNzTGlzdC5hZGQoJ2xvYy1zdWdnZXN0aW9uJyk7XG4gICAgbm9SZXN1bHRzLmlubmVyVGV4dCA9ICdObyByZXN1bHRzJztcbiAgICBib3guYXBwZW5kQ2hpbGQobm9SZXN1bHRzKTtcbiAgfSBlbHNlIHtcbiAgICByZXNwb25zZS5mb3JFYWNoKChzdWcpID0+IHtcbiAgICAgIGNvbnN0IHN1Z2dlc3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgIHN1Z2dlc3Rpb24uc2V0QXR0cmlidXRlKCd0eXBlJywgJ2J1dHRvbicpO1xuICAgICAgc3VnZ2VzdGlvbi5jbGFzc0xpc3QuYWRkKCdsb2Mtc3VnZ2VzdGlvbicpO1xuICAgICAgc3VnZ2VzdGlvbi5pbm5lclRleHQgPSBgJHtzdWcubmFtZX0sICR7XG4gICAgICAgIHN1Zy5zdGF0ZSA/PyBjb3VudHJ5TGlzdFtzdWcuY291bnRyeV1cbiAgICAgIH1gO1xuICAgICAgc3VnZ2VzdGlvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgc3VnZ2VzdGlvbkJveC5yZW1vdmVDaGlsZChzdWdnZXN0aW9uQm94LmZpcnN0Q2hpbGQpO1xuICAgICAgICBsb2NJbnB1dC52YWx1ZSA9ICcnO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbG9jYXRpb24nLCBKU09OLnN0cmluZ2lmeShzdWcpKTtcbiAgICAgICAgZ2V0QW5kRGlzcGxheVdlYXRoZXIoc3VnKTtcbiAgICAgIH0pO1xuICAgICAgYm94LmFwcGVuZENoaWxkKHN1Z2dlc3Rpb24pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGJveDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZGVsYXlBbmRTZWFyY2godmFsdWUsIHdhaXQpIHtcbiAgYXdhaXQgZGVsYXkod2FpdCk7XG4gIGlmICh2YWx1ZSA9PT0gbG9jSW5wdXQudmFsdWUpIHtcbiAgICBjb25zdCBsb2NhdGlvbkxpc3QgPSBhd2FpdCBmaW5kTG9jYXRpb24obG9jSW5wdXQudmFsdWUpO1xuICAgIGNvbnN0IG9wdGlvbkJveCA9IGNyZWF0ZU9wdGlvbkJveChsb2NhdGlvbkxpc3QpO1xuICAgIHN1Z2dlc3Rpb25Cb3guYXBwZW5kQ2hpbGQob3B0aW9uQm94KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVTZWFyY2hJbnB1dCgpIHtcbiAgaWYgKCFsb2NJbnB1dC52YWx1ZSkge1xuICAgIGlmIChzdWdnZXN0aW9uQm94LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN1Z2dlc3Rpb25Cb3gucmVtb3ZlQ2hpbGQoc3VnZ2VzdGlvbkJveC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChsb2NJbnB1dC52YWx1ZS5sZW5ndGggPiA0KSB7XG4gICAgZGVsYXlBbmRTZWFyY2gobG9jSW5wdXQudmFsdWUsIDQwMCk7XG4gIH0gZWxzZSB7XG4gICAgZGVsYXlBbmRTZWFyY2gobG9jSW5wdXQudmFsdWUsIDIwMDApO1xuICB9XG59XG5cbmV4cG9ydCB7IGZpbmRMb2NhdGlvbiwgaGFuZGxlU2VhcmNoSW5wdXQgfTtcbiIsImltcG9ydCB7IGhhbmRsZVNlYXJjaElucHV0IH0gZnJvbSAnLi9sb2NhdGlvblNlbGVjdCc7XG5pbXBvcnQgZ2V0QW5kRGlzcGxheVdlYXRoZXIgZnJvbSAnLi9mZXRjaFdlYXRoZXInO1xuaW1wb3J0IHsgdW5pdHNUb2dnbGUgfSBmcm9tICcuL3NldHRpbmdzJztcblxuY29uc3QgbG9jSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbG9jJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluaXQoKSB7XG4gIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbG9jYXRpb24nKSkge1xuICAgIGNvbnN0IGxvY2F0aW9uID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbG9jYXRpb24nKSk7XG4gICAgY29uc3QgdW5pdHMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndW5pdHMnKTtcbiAgICBpZiAodW5pdHMgPT09ICdjaGVja2VkJykge1xuICAgICAgdW5pdHNUb2dnbGUuY2hlY2tlZCA9IHRydWU7XG4gICAgfVxuICAgIGdldEFuZERpc3BsYXlXZWF0aGVyKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGxvY0lucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xuICAgIGhhbmRsZVNlYXJjaElucHV0KCk7XG4gIH0pO1xuXG4gIGxvY0lucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgKGUpID0+IHtcbiAgICBpZiAoZS5rZXlDb2RlID09PSAxMykge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSk7XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHtcbiAgICBjb25zdCBtb3JlSW5mb0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9yZS1pbmZvLWxpc3QnKTtcbiAgICBpZiAobW9yZUluZm9MaXN0KSB7XG4gICAgICBpZiAobW9yZUluZm9MaXN0LnN0eWxlLm1heEhlaWdodCkge1xuICAgICAgICBtb3JlSW5mb0xpc3Quc3R5bGUubWF4SGVpZ2h0ID0gYCR7bW9yZUluZm9MaXN0LnNjcm9sbEhlaWdodCAgfXB4YDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IGluaXQgZnJvbSAnLi9pbml0JztcbmltcG9ydCAnLi9zdHlsZS5jc3MnO1xuXG5pbml0KCk7XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicmVwbGFjZSIsInAiLCJuYyIsInJlcXVpcmVkQXJncyIsInJlcXVpcmVkIiwiYXJncyIsIlR5cGVFcnJvciIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwiaXNEYXRlIiwidmFsdWUiLCJhcmd1bWVudHMiLCJEYXRlIiwidG9EYXRlIiwiYXJndW1lbnQiLCJhcmdTdHIiLCJnZXRUaW1lIiwiY29uc29sZSIsIndhcm4iLCJzdGFjayIsIk5hTiIsImlzVmFsaWQiLCJkaXJ0eURhdGUiLCJkYXRlIiwiaXNOYU4iLCJOdW1iZXIiLCJ0b0ludGVnZXIiLCJkaXJ0eU51bWJlciIsIm51bWJlciIsIk1hdGgiLCJjZWlsIiwiZmxvb3IiLCJhZGRNaWxsaXNlY29uZHMiLCJkaXJ0eUFtb3VudCIsInRpbWVzdGFtcCIsImFtb3VudCIsInN1Yk1pbGxpc2Vjb25kcyIsIk1JTExJU0VDT05EU19JTl9EQVkiLCJzdGFydE9mVVRDSVNPV2VlayIsIndlZWtTdGFydHNPbiIsImRheSIsImdldFVUQ0RheSIsImRpZmYiLCJzZXRVVENEYXRlIiwiZ2V0VVRDRGF0ZSIsInNldFVUQ0hvdXJzIiwiZ2V0VVRDSVNPV2Vla1llYXIiLCJ5ZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyIiwic2V0VVRDRnVsbFllYXIiLCJzdGFydE9mTmV4dFllYXIiLCJmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyIiwic3RhcnRPZlRoaXNZZWFyIiwic3RhcnRPZlVUQ0lTT1dlZWtZZWFyIiwiZm91cnRoT2ZKYW51YXJ5IiwiTUlMTElTRUNPTkRTX0lOX1dFRUsiLCJkZWZhdWx0T3B0aW9ucyIsImdldERlZmF1bHRPcHRpb25zIiwic3RhcnRPZlVUQ1dlZWsiLCJfcmVmIiwiX3JlZjIiLCJfcmVmMyIsIl9vcHRpb25zJHdlZWtTdGFydHNPbiIsIl9vcHRpb25zJGxvY2FsZSIsIl9vcHRpb25zJGxvY2FsZSRvcHRpbyIsIl9kZWZhdWx0T3B0aW9ucyRsb2NhbCIsIl9kZWZhdWx0T3B0aW9ucyRsb2NhbDIiLCJsb2NhbGUiLCJSYW5nZUVycm9yIiwiZ2V0VVRDV2Vla1llYXIiLCJfb3B0aW9ucyRmaXJzdFdlZWtDb24iLCJmaXJzdFdlZWtDb250YWluc0RhdGUiLCJmaXJzdFdlZWtPZk5leHRZZWFyIiwiZmlyc3RXZWVrT2ZUaGlzWWVhciIsInN0YXJ0T2ZVVENXZWVrWWVhciIsImZpcnN0V2VlayIsImFkZExlYWRpbmdaZXJvcyIsInRhcmdldExlbmd0aCIsInNpZ24iLCJvdXRwdXQiLCJhYnMiLCJ0b2tlbiIsInNpZ25lZFllYXIiLCJtb250aCIsImdldFVUQ01vbnRoIiwiU3RyaW5nIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIm51bWJlck9mRGlnaXRzIiwibWlsbGlzZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwicG93IiwiRyIsImxvY2FsaXplIiwiZXJhIiwid2lkdGgiLCJ5Iiwib3JkaW5hbE51bWJlciIsInVuaXQiLCJsaWdodEZvcm1hdHRlcnMiLCJZIiwic2lnbmVkV2Vla1llYXIiLCJ3ZWVrWWVhciIsIlIiLCJ1IiwiUSIsInF1YXJ0ZXIiLCJjb250ZXh0IiwicSIsIk0iLCJMIiwidyIsIndlZWsiLCJyb3VuZCIsImdldFVUQ1dlZWsiLCJJIiwiaXNvV2VlayIsImdldFVUQ0lTT1dlZWsiLCJEIiwiZGF5T2ZZZWFyIiwic2V0VVRDTW9udGgiLCJzdGFydE9mWWVhclRpbWVzdGFtcCIsImRpZmZlcmVuY2UiLCJnZXRVVENEYXlPZlllYXIiLCJFIiwiZGF5T2ZXZWVrIiwibG9jYWxEYXlPZldlZWsiLCJjIiwiaXNvRGF5T2ZXZWVrIiwiZGF5UGVyaW9kRW51bVZhbHVlIiwiZGF5UGVyaW9kIiwidG9Mb3dlckNhc2UiLCJiIiwiaG91cnMiLCJCIiwiaCIsIkgiLCJLIiwibSIsInMiLCJTIiwiWCIsIl9sb2NhbGl6ZSIsInRpbWV6b25lT2Zmc2V0IiwiX29yaWdpbmFsRGF0ZSIsImdldFRpbWV6b25lT2Zmc2V0IiwiZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzIiwiZm9ybWF0VGltZXpvbmUiLCJ4IiwiTyIsImZvcm1hdFRpbWV6b25lU2hvcnQiLCJ6IiwidCIsIm9yaWdpbmFsRGF0ZSIsIlQiLCJvZmZzZXQiLCJkaXJ0eURlbGltaXRlciIsImFic09mZnNldCIsIm1pbnV0ZXMiLCJkZWxpbWl0ZXIiLCJkYXRlTG9uZ0Zvcm1hdHRlciIsInBhdHRlcm4iLCJmb3JtYXRMb25nIiwidGltZUxvbmdGb3JtYXR0ZXIiLCJ0aW1lIiwiUCIsImRhdGVUaW1lRm9ybWF0IiwibWF0Y2hSZXN1bHQiLCJtYXRjaCIsImRhdGVQYXR0ZXJuIiwidGltZVBhdHRlcm4iLCJkYXRlVGltZSIsImdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMiLCJ1dGNEYXRlIiwiVVRDIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwicHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zIiwicHJvdGVjdGVkV2Vla1llYXJUb2tlbnMiLCJpc1Byb3RlY3RlZERheU9mWWVhclRva2VuIiwiaW5kZXhPZiIsImlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiIsInRocm93UHJvdGVjdGVkRXJyb3IiLCJmb3JtYXQiLCJpbnB1dCIsImZvcm1hdERpc3RhbmNlTG9jYWxlIiwibGVzc1RoYW5YU2Vjb25kcyIsIm9uZSIsIm90aGVyIiwieFNlY29uZHMiLCJoYWxmQU1pbnV0ZSIsImxlc3NUaGFuWE1pbnV0ZXMiLCJ4TWludXRlcyIsImFib3V0WEhvdXJzIiwieEhvdXJzIiwieERheXMiLCJhYm91dFhXZWVrcyIsInhXZWVrcyIsImFib3V0WE1vbnRocyIsInhNb250aHMiLCJhYm91dFhZZWFycyIsInhZZWFycyIsIm92ZXJYWWVhcnMiLCJhbG1vc3RYWWVhcnMiLCJidWlsZEZvcm1hdExvbmdGbiIsImRlZmF1bHRXaWR0aCIsImZvcm1hdHMiLCJmdWxsIiwibG9uZyIsIm1lZGl1bSIsInNob3J0IiwiZm9ybWF0UmVsYXRpdmVMb2NhbGUiLCJsYXN0V2VlayIsInllc3RlcmRheSIsInRvZGF5IiwidG9tb3Jyb3ciLCJuZXh0V2VlayIsImJ1aWxkTG9jYWxpemVGbiIsImRpcnR5SW5kZXgiLCJ2YWx1ZXNBcnJheSIsImZvcm1hdHRpbmdWYWx1ZXMiLCJkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIiwiX2RlZmF1bHRXaWR0aCIsIl93aWR0aCIsInZhbHVlcyIsImFyZ3VtZW50Q2FsbGJhY2siLCJfb3B0aW9ucyIsInJlbTEwMCIsIm5hcnJvdyIsImFiYnJldmlhdGVkIiwid2lkZSIsImFtIiwicG0iLCJtaWRuaWdodCIsIm5vb24iLCJtb3JuaW5nIiwiYWZ0ZXJub29uIiwiZXZlbmluZyIsIm5pZ2h0IiwiYnVpbGRNYXRjaEZuIiwic3RyaW5nIiwibWF0Y2hQYXR0ZXJuIiwibWF0Y2hQYXR0ZXJucyIsImRlZmF1bHRNYXRjaFdpZHRoIiwibWF0Y2hlZFN0cmluZyIsInBhcnNlUGF0dGVybnMiLCJkZWZhdWx0UGFyc2VXaWR0aCIsIkFycmF5IiwiaXNBcnJheSIsImZpbmRJbmRleCIsInRlc3QiLCJmaW5kS2V5IiwidmFsdWVDYWxsYmFjayIsInJlc3QiLCJzbGljZSIsIm9iamVjdCIsInByZWRpY2F0ZSIsImFycmF5IiwicGFyc2VQYXR0ZXJuIiwicGFyc2VJbnQiLCJwYXJzZVJlc3VsdCIsImFueSIsImNvZGUiLCJmb3JtYXREaXN0YW5jZSIsInRva2VuVmFsdWUiLCJhZGRTdWZmaXgiLCJjb21wYXJpc29uIiwiZm9ybWF0UmVsYXRpdmUiLCJfZGF0ZSIsIl9iYXNlRGF0ZSIsImZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImVzY2FwZWRTdHJpbmdSZWdFeHAiLCJkb3VibGVRdW90ZVJlZ0V4cCIsInVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwIiwiZGlydHlGb3JtYXRTdHIiLCJfcmVmNCIsIl9vcHRpb25zJGxvY2FsZTIiLCJfb3B0aW9ucyRsb2NhbGUyJG9wdGkiLCJfcmVmNSIsIl9yZWY2IiwiX3JlZjciLCJfb3B0aW9ucyRsb2NhbGUzIiwiX29wdGlvbnMkbG9jYWxlMyRvcHRpIiwiX2RlZmF1bHRPcHRpb25zJGxvY2FsMyIsIl9kZWZhdWx0T3B0aW9ucyRsb2NhbDQiLCJmb3JtYXRTdHIiLCJkZWZhdWx0TG9jYWxlIiwiZm9ybWF0dGVyT3B0aW9ucyIsInN1YnN0cmluZyIsImZpcnN0Q2hhcmFjdGVyIiwibG9uZ0Zvcm1hdHRlciIsImNsZWFuRXNjYXBlZFN0cmluZyIsImZvcm1hdHRlciIsInVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucyIsInVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMiLCJtYXRjaGVkIiwiZnJvbVVuaXhUaW1lIiwiZGlydHlVbml4VGltZSIsInVuaXhUaW1lIiwibWlsbGlzZWNvbmRzSW5Ib3VyIiwicGFyc2VJU08iLCJfb3B0aW9ucyRhZGRpdGlvbmFsRGkiLCJhZGRpdGlvbmFsRGlnaXRzIiwiZGF0ZVN0cmluZ3MiLCJzcGxpdERhdGVTdHJpbmciLCJwYXJzZVllYXJSZXN1bHQiLCJwYXJzZVllYXIiLCJwYXJzZURhdGUiLCJyZXN0RGF0ZVN0cmluZyIsInBhcnNlVGltZSIsInRpbWV6b25lIiwic2V0RnVsbFllYXIiLCJzZXRIb3VycyIsInBhcnNlVGltZXpvbmUiLCJwYXR0ZXJucyIsImRhdGVUaW1lRGVsaW1pdGVyIiwidGltZVpvbmVEZWxpbWl0ZXIiLCJkYXRlUmVnZXgiLCJ0aW1lUmVnZXgiLCJ0aW1lem9uZVJlZ2V4IiwiZGF0ZVN0cmluZyIsInRpbWVTdHJpbmciLCJzcGxpdCIsInN1YnN0ciIsImV4ZWMiLCJyZWdleCIsIlJlZ0V4cCIsImNhcHR1cmVzIiwiY2VudHVyeSIsImlzV2Vla0RhdGUiLCJwYXJzZURhdGVVbml0IiwiX3llYXIiLCJ2YWxpZGF0ZVdlZWtEYXRlIiwiaXNvV2Vla1llYXIiLCJkYXlPZklTT1dlZWtZZWFyIiwiZGF5c0luTW9udGhzIiwiaXNMZWFwWWVhckluZGV4IiwidmFsaWRhdGVEYXRlIiwidmFsaWRhdGVEYXlPZlllYXJEYXRlIiwibWF4IiwicGFyc2VUaW1lVW5pdCIsInNlY29uZHMiLCJ2YWxpZGF0ZVRpbWUiLCJwYXJzZUZsb2F0IiwidGltZXpvbmVTdHJpbmciLCJfaG91cnMiLCJ2YWxpZGF0ZVRpbWV6b25lIiwic3RhcnRPZkRheSIsImlzU2FtZURheSIsImRpcnR5RGF0ZUxlZnQiLCJkaXJ0eURhdGVSaWdodCIsImRhdGVMZWZ0U3RhcnRPZkRheSIsImRhdGVSaWdodFN0YXJ0T2ZEYXkiLCJpc1RvZGF5Iiwibm93IiwiZ2V0RGF5IiwiY291bnRyeVNlbGVjdElucHV0IiwiY291bnRyeVNlbGVjdExhYmVsIiwiY291bnRyeVNlbGVjdCIsImNvdW50cmllcyIsImlubmVyVGV4dCIsImFwcGVuZCIsImNvdW50cnlMaXN0IiwiQUYiLCJBTCIsIkRaIiwiQVMiLCJBRCIsIkFPIiwiQUkiLCJBUSIsIkFHIiwiQVIiLCJBTSIsIkFXIiwiQVUiLCJBVCIsIkFaIiwiQlMiLCJCSCIsIkJEIiwiQkIiLCJCWSIsIkJFIiwiQloiLCJCSiIsIkJNIiwiQlQiLCJCTyIsIkJRIiwiQkEiLCJCVyIsIkJWIiwiQlIiLCJJTyIsIkJOIiwiQkciLCJCRiIsIkJJIiwiQ1YiLCJLSCIsIkNNIiwiQ0EiLCJLWSIsIkNGIiwiVEQiLCJDTCIsIkNOIiwiQ1giLCJDQyIsIkNPIiwiS00iLCJDRCIsIkNHIiwiQ0siLCJDUiIsIkhSIiwiQ1UiLCJDVyIsIkNZIiwiQ1oiLCJDSSIsIkRLIiwiREoiLCJETSIsIkRPIiwiRUMiLCJFRyIsIlNWIiwiR1EiLCJFUiIsIkVFIiwiU1oiLCJFVCIsIkZLIiwiRk8iLCJGSiIsIkZJIiwiRlIiLCJHRiIsIlBGIiwiVEYiLCJHQSIsIkdNIiwiR0UiLCJERSIsIkdIIiwiR0kiLCJHUiIsIkdMIiwiR0QiLCJHUCIsIkdVIiwiR1QiLCJHRyIsIkdOIiwiR1ciLCJHWSIsIkhUIiwiSE0iLCJWQSIsIkhOIiwiSEsiLCJIVSIsIklTIiwiSU4iLCJJRCIsIklSIiwiSVEiLCJJRSIsIklNIiwiSUwiLCJJVCIsIkpNIiwiSlAiLCJKRSIsIkpPIiwiS1oiLCJLRSIsIktJIiwiS1AiLCJLUiIsIktXIiwiS0ciLCJMQSIsIkxWIiwiTEIiLCJMUyIsIkxSIiwiTFkiLCJMSSIsIkxUIiwiTFUiLCJNTyIsIk1HIiwiTVciLCJNWSIsIk1WIiwiTUwiLCJNVCIsIk1IIiwiTVEiLCJNUiIsIk1VIiwiWVQiLCJNWCIsIkZNIiwiTUQiLCJNQyIsIk1OIiwiTUUiLCJNUyIsIk1BIiwiTVoiLCJNTSIsIk5BIiwiTlIiLCJOUCIsIk5MIiwiTkMiLCJOWiIsIk5JIiwiTkUiLCJORyIsIk5VIiwiTkYiLCJNUCIsIk5PIiwiT00iLCJQSyIsIlBXIiwiUFMiLCJQQSIsIlBHIiwiUFkiLCJQRSIsIlBIIiwiUE4iLCJQTCIsIlBUIiwiUFIiLCJRQSIsIk1LIiwiUk8iLCJSVSIsIlJXIiwiUkUiLCJCTCIsIlNIIiwiS04iLCJMQyIsIk1GIiwiUE0iLCJWQyIsIldTIiwiU00iLCJTVCIsIlNBIiwiU04iLCJSUyIsIlNDIiwiU0wiLCJTRyIsIlNYIiwiU0siLCJTSSIsIlNCIiwiU08iLCJaQSIsIkdTIiwiU1MiLCJFUyIsIkxLIiwiU0QiLCJTUiIsIlNKIiwiU0UiLCJDSCIsIlNZIiwiVFciLCJUSiIsIlRaIiwiVEgiLCJUTCIsIlRHIiwiVEsiLCJUTyIsIlRUIiwiVE4iLCJUUiIsIlRNIiwiVEMiLCJUViIsIlVHIiwiVUEiLCJBRSIsIkdCIiwiVU0iLCJVUyIsIlVZIiwiVVoiLCJWVSIsIlZFIiwiVk4iLCJWRyIsIlZJIiwiV0YiLCJFSCIsIllFIiwiWk0iLCJaVyIsIkFYIiwiY291bnRyeSIsIm9wdCIsImRhdGFzZXQiLCJzdGF0ZXNTZWxlY3RJbnB1dCIsImNsYXNzTGlzdCIsImFkZCIsInN0YXRlc1NlbGVjdExhYmVsIiwic3RhdGVzU2VsZWN0Iiwic3RhdGVzIiwic3RhdGVzTGlzdCIsIkFLIiwiQ1QiLCJGTCIsIkhJIiwiSUEiLCJLUyIsIk1JIiwiTlYiLCJOSCIsIk5KIiwiTk0iLCJOWSIsIk5EIiwiT0giLCJPSyIsIk9SIiwiUkkiLCJUWCIsIlVUIiwiVlQiLCJXQSIsIldWIiwiV0kiLCJXWSIsInN0YXRlIiwiY291bnRyeUlucHV0RmllbGQiLCJzdGF0ZUlucHV0RmllbGQiLCJzdGF0ZVNlbGVjdCIsImFkZENsZWFyQnV0dG9uIiwiY2xvc2VJY29uSW1hZ2UiLCJJbWFnZSIsImNsb3NlSWNvbiIsImJ0biIsImlucHV0RmllbGQiLCJjaGlsZHJlbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZXR0aW5nc0Zvcm0iLCJhZHZhbmNlZFNlYXJjaCIsImFkdmFuY2VkU2VhcmNoVGl0bGUiLCJhZHZhbmNlZFNlYXJjaExpc3QiLCJzZXR0aW5ncyIsInNldHRpbmdzVGl0bGUiLCJzZXR0aW5nc0xpc3QiLCJ1bml0cyIsInVuaXRzTGFiZWwiLCJ1bml0c1RvZ2dsZSIsImltcGVyaWFsIiwibWV0cmljIiwiY2hlY2tlZCIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJyZXNldCIsInJlc2V0VGl0bGUiLCJyZXNldERlc2NyaXB0aW9uIiwicmVzZXRCdXR0b24iLCJyZW1vdmVJdGVtIiwicmVsb2FkIiwibmV3UGFnZSIsImdyYWRpZW50RGF5IiwiZ3JhZGllbnRDbG91ZCIsImdyYWRpZW50UmFpbiIsImdyYWRpZW50TmlnaHQiLCJncmFkaWVudE5pZ2h0Q2xvdWQiLCJzaXRlV3JhcHBlciIsImdyYWRpZW50c0FycmF5IiwicXVlcnlTZWxlY3RvckFsbCIsImN1cnJlbnRXZWF0aGVyQ29udGFpbmVyIiwiZm9yZWNhc3RDb250YWluZXIiLCJzZWFyY2hJY29uIiwic2VhcmNoSWNvbkltYWdlIiwibWFnR2xhc3MiLCJjb2dJY29uIiwiY29nSWNvbkltYWdlIiwiY29nIiwiY29nSWNvbkNvbnRhaW5lciIsInNldHRpbmdzU2xpZGUiLCJzZWxlY3RJY29uIiwic3VuIiwiY2xlYXJOaWdodCIsInBhcnRpYWxDbG91ZHMiLCJwYXJ0aWFsQ2xvdWRzTmlnaHQiLCJjbG91ZCIsImJyb2tlbkNsb3VkIiwicmFpbiIsInN1blJhaW4iLCJ0aHVuZGVyIiwic25vdyIsIm1pc3QiLCJyZW5kZXJXZWF0aGVyRGV0YWlscyIsImluZm8iLCJjdXJyZW50IiwiY3VycmVudFdlYXRoZXJEaXNwbGF5IiwibG9jYXRpb25OYW1lIiwidGVtcCIsIm1haW4iLCJtb3JlSW5mb0xpc3QiLCJmZWVsc0xpa2UiLCJmZWVsc0xpa2VJbWciLCJmZWVsc0xpa2VJY29uIiwiZmVlbHNMaWtlVGV4dCIsImZlZWxzTGlrZVZhbHVlIiwiZmVlbHNfbGlrZSIsImh1bWlkaXR5IiwiaHVtaWRpdHlJbWciLCJodW1pZGl0eUljb24iLCJodW1pZGl0eVRleHQiLCJodW1pZGl0eVZhbHVlIiwiY2xvdWRpbmVzcyIsImNsb3VkaW5lc3NJbWciLCJjbG91ZGluZXNzSWNvbiIsImNsb3VkaW5lc3NUZXh0IiwiY2xvdWRpbmVzc1ZhbHVlIiwiY2xvdWRzIiwiYWxsIiwid2luZCIsIndpbmRJbWciLCJ3aW5kSWNvbiIsIndpbmRUZXh0Iiwid2luZFZhbHVlIiwic3BlZWQiLCJzdW5yaXNlIiwic3VucmlzZUltZyIsInN1bnJpc2VJY29uIiwic3VucmlzZVRleHQiLCJzdW5yaXNlVmFsdWUiLCJzdW5zZXQiLCJzdW5zZXRJbWciLCJzdW5zZXRJY29uIiwic3Vuc2V0VGV4dCIsInN1bnNldFZhbHVlIiwiY3JlYXRlTW9yZUluZm8iLCJtb3JlSW5mbyIsIm1vcmVJbmZvSWNvbiIsImRvdHMiLCJtYXhIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJpY29uIiwiaWNvblNWRyIsIndlYXRoZXIiLCJkZXNjcmlwdGlvbiIsImJhY2tncm91bmQiLCJiZyIsInNlbGVjdEJhY2tncm91bmQiLCJjbGFzc05hbWUiLCJncmFkaWVudCIsIm9wYWNpdHkiLCJyZW5kZXJDdXJyZW50V2VhdGhlciIsImZvcmVjYXN0IiwiZm9yZWNhc3REaXNwbGF5IiwiZGF5RGlzcGxheSIsImRheVRpdGxlIiwibG93SGlnaCIsImxvdyIsImhpZ2giLCJyZW5kZXJGb3JlY2FzdCIsImZpbmRNb3N0Q29tbW9uIiwibW9zdENvbW1vbiIsImhpZ2hlc3RDb3VudCIsIm90aGVySXRlbSIsInRyYW5zbGF0ZURheSIsIm51bSIsInRvZ2dsZSIsImFzeW5jIiwibG9jSW5mbyIsIndlYXRoZXJEYXRhIiwibGF0IiwibG9uIiwiZmV0Y2hQcmVmaXgiLCJtaWRkbGUiLCJmZXRjaFN1ZmZpeCIsImN1cnJlbnRXZWF0aGVyIiwiZmV0Y2giLCJmaXZlRGF5V2VhdGhlciIsImpzb24iLCJmaXZlRGF5Iiwic3lzIiwiYXJyYXlPZkRheXMiLCJyZWR1Y2UiLCJkdF90eHQiLCJmaXZlRGF5Rm9yZWNhc3QiLCJtaW5UZW1wIiwibWF4VGVtcCIsInRocmVlSG91ciIsInRlbXBfbWluIiwidGVtcF9tYXgiLCJpbmNsdWRlcyIsImFuYWx5emVGb3JlY2FzdCIsInJldHJpZXZlV2VhdGhlckRhdGEiLCJuYW1lIiwibG9jSW5wdXQiLCJzdWdnZXN0aW9uQm94IiwiZGVsYXlBbmRTZWFyY2giLCJ3YWl0IiwibXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJsb2NhdGlvbkxpc3QiLCJnZXRFbGVtZW50QnlJZCIsImNvdW50cnlDb2RlIiwic2hvd25WYWwiLCJsb2NhdGlvbkxpc3RSZXF1ZXN0IiwiZmluZExvY2F0aW9uIiwib3B0aW9uQm94IiwicmVzcG9uc2UiLCJib3giLCJmb3JFYWNoIiwic3VnIiwic3VnZ2VzdGlvbiIsImdldEFuZERpc3BsYXlXZWF0aGVyIiwibm9SZXN1bHRzIiwiY3JlYXRlT3B0aW9uQm94IiwiZ2V0SXRlbSIsInBhcnNlIiwia2V5Q29kZSIsInByZXZlbnREZWZhdWx0IiwiaW5pdCJdLCJzb3VyY2VSb290IjoiIn0=